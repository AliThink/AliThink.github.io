<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The  Force  Awakens
</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-11-10T08:30:27.828Z</updated>
  <id>/</id>
  
  <author>
    <name>AliThink</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOSer‘s 跨界之路</title>
    <link href="/2017/11/10/iOSer%E2%80%98s%E8%B7%A8%E7%95%8C%E4%B9%8B%E8%B7%AF/"/>
    <id>/2017/11/10/iOSer‘s跨界之路/</id>
    <published>2017-11-10T07:32:10.000Z</published>
    <updated>2017-11-10T08:30:27.828Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>又到一年双十一，做一下从阿里回家这段日子的思想汇报吧~</p></blockquote><h2 id="Part-One-在阿里这段日子的收获"><a href="#Part-One-在阿里这段日子的收获" class="headerlink" title="Part One 在阿里这段日子的收获"></a>Part One 在阿里这段日子的收获</h2><blockquote><p>呜谢这段日子阿里小伙伴们的帮助与陪伴（人太多，就不一一感谢啦😙）。</p></blockquote><h3 id="一、技能"><a href="#一、技能" class="headerlink" title="一、技能"></a>一、技能</h3><h4 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h4><blockquote><p>很多东西都是相通的，许多知识都可以互相反哺。<br>回忆几个印象深刻的侧影吧（排名不分先后）。</p></blockquote><ul><li>跟着土土哥反编译源码探究一个诡异问题的内在原因。</li><li>和老谭一起讨论一个问题的最佳实现策略。（代码生成器。。超越手淘的金钟罩）</li><li>毒姐号称要超越YY的缓存库。</li><li>晓明哥惊世骇俗的服务中间层SP。</li><li>平哥的数据驱动型UI组件库。（以及对胸部的了解。。。）</li><li>宪华的只要两行代码~（强调对于代码的封装与精简极致）</li><li>茶哥、远哥对于组件化的规划与推进。</li><li>贤哥RTL的完美方案。</li><li>东伟网络库与混合容器（包含weex）的整合优化。</li><li>仁哥：“多思考总结，做每件事情最后能让你得到些什么”（偶尔看到仁哥代码的喜悦）。😇</li></ul><h4 id="PM"><a href="#PM" class="headerlink" title="PM"></a>PM</h4><blockquote><p>免责声明，粗略一写，纯个人体会😆</p></blockquote><p><img src="http://of71dfqgz.bkt.clouddn.com/%E9%98%BF%E9%87%8C%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B.png" alt="阿里项目流程"></p><h3 id="二、思想"><a href="#二、思想" class="headerlink" title="二、思想"></a>二、思想</h3><blockquote><p>其实感觉来阿里的这段日子，思想上的转变可能更重要一些。</p></blockquote><h4 id="产品Owner意识"><a href="#产品Owner意识" class="headerlink" title="产品Owner意识"></a>产品Owner意识</h4><blockquote><p>体会颇深。</p></blockquote><p>程序猿们通过对于产品的思考，形成一个可行的初步规划（先跟自己的主管交流一下）。然后去跟产品交流这个规划的可行性，从不同角度达成共识后，技术发起的产品需求便会跟随迭代推进下去。</p><p>程序猿对于产品演进的方向会有自己的思考，结合技术视野，往往能与产品碰撞出不少可行的方案。对于程序猿产出的产品目标是可以写进自己KPI中的，那么也就会以需求Owner的角色负责将方案完善，整合资源，推进产品目标的达成。</p><p>对于业务产品的深度理解、思考与实践，作为一个产品的“Owner”去打磨她，她也会用最好的数据表现来回报Owner们–人人都是产品经理。</p><h4 id="善于总结"><a href="#善于总结" class="headerlink" title="善于总结"></a>善于总结</h4><blockquote><p>说到总结，也是因为之前总结了一篇博文，才被宪华推荐的。</p></blockquote><h5 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h5><p>小伙伴们都很善于总结，有的画导图，有的写ppt，团队云雀上的分享也干货满满（于是回来后，赶紧自己也用gitbook自建了一个团队的知识库😎）。</p><blockquote><p>带来的好处很多，比如知识结构化、系统化、知识的传承等。</p></blockquote><p>关注每次努力后自己的成长。有些功能可能上线不久就废弃了，不用伤心，因为宝贵的知识、经验与感悟已经留在我们的身上。</p><h5 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h5><p>对自己负责模块的数据表现应该做到了如指掌。数据表现背后的意义是什么；如何埋点才能完善数据路径，进而准确推算用户行动链。有了完善的数据行为反馈，对于引导未来的产品方向具有重要意义。</p><blockquote><p>回来的这段日子，自己的职业方向跟数据更亲密了，接下来总结下这段时间搞得一些东东（想到哪写到哪，不苛求逻辑性。。。）。</p></blockquote><h2 id="Part-Two-为什么回来"><a href="#Part-Two-为什么回来" class="headerlink" title="Part Two 为什么回来"></a>Part Two 为什么回来</h2><blockquote><p>感谢文哥、剑哥、亮哥等韩都老朋友的收留。😋</p></blockquote><ul><li><p>横向发展的思考：</p><ul><li>对于移动端大环境的思考。</li><li>横向扩展：<ul><li>对于AI方向的思考尝试。</li><li>大前端跟潮。</li><li>后端知识弥补。</li><li>项目管理尝试。</li><li>。。。</li></ul></li></ul></li><li><p>家庭生活因素的综合考量：</p><ul><li>家人关怀。</li><li>房价。。。</li><li>上学。。。</li><li>。。。</li></ul></li></ul><h2 id="Part-Three-折腾了什么"><a href="#Part-Three-折腾了什么" class="headerlink" title="Part Three 折腾了什么"></a>Part Three 折腾了什么</h2><blockquote><p>一晃回来快3个月了。</p></blockquote><h3 id="一、对自己的几点要求"><a href="#一、对自己的几点要求" class="headerlink" title="一、对自己的几点要求"></a>一、对自己的几点要求</h3><ul><li>既然是跨界，开始往往会比较痛苦，坚持不退缩。</li><li>不为自己设限。</li><li>多总结多沉淀。</li><li>保持产品思维。</li></ul><h3 id="二、技术栈"><a href="#二、技术栈" class="headerlink" title="二、技术栈"></a>二、技术栈</h3><blockquote><p>全是一波新东西，受益匪浅。</p></blockquote><h4 id="1-机器学习"><a href="#1-机器学习" class="headerlink" title="1. 机器学习"></a>1. 机器学习</h4><blockquote><p>感谢文哥的悉心教导😘</p></blockquote><h5 id="搞出来的一些东东"><a href="#搞出来的一些东东" class="headerlink" title="搞出来的一些东东"></a>搞出来的一些东东</h5><ul><li>spark mllib流派：<a href="http://alithink.com/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E6%A1%88%E4%BE%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="external">销售预测案例源码分析</a></li><li>sklearn流派：<a href="http://alithink.com/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E7%88%86%E6%97%BA%EF%BC%88scikit-learn%E7%89%88%E6%9C%AC%EF%BC%89/" target="_blank" rel="external">销售预测爆旺（scikit-learn版本）</a></li></ul><h5 id="几点体会"><a href="#几点体会" class="headerlink" title="几点体会"></a>几点体会</h5><ul><li>记得路上听得到音频时也讲过，做AI或者ML方向，坚实的理论基础以及对于业务的深刻理解是非常重要的。而这块也是目前我最最最欠缺的（当然其它方面也欠缺😆）。将来要猛补这方面知识。<ul><li>推荐几本入门的好书：<ul><li>spark方向： 《spark机器学习》（PACKT）</li><li>sklearn方向（推荐这个方向，解决方案更丰富一些）：《白话大数据与机器学习》<ul><li>这本书估计高手们都不屑一顾吧，不过感觉很适合我。从最基础的理论开始讲起，对于已经把高数，概率论已经忘干净的人士来说，太有帮助了。。（部分笔记分享一下）</li></ul></li></ul></li></ul></li></ul><p><img src="http://of71dfqgz.bkt.clouddn.com/%E7%99%BD%E8%AF%9D%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" alt="白话大数据与机器学习"></p><ul><li>良好的数据基础是必要条件。良好的周期性数据积累，对于各数据变动节点相关数据的完备与丰富，会为ML分析打下坚实的基础。</li><li>数据探索是个体力活。不断对比相关度，探索特征相关性。发现一条规律弥足珍贵。</li><li>传统的专家模式，在维度较少的情况下，还能看的过来；维度数量上来了，机器的优势就上来了。</li><li>各种算法都是浮云，先做LR再说。。（高手绕行）</li><li>结果的可解释性。。。</li></ul><h4 id="2-前后端"><a href="#2-前后端" class="headerlink" title="2. 前后端"></a>2. 前后端</h4><blockquote><p>我其实是vue党。。</p></blockquote><h5 id="智子（Flask-Bootstrap）"><a href="#智子（Flask-Bootstrap）" class="headerlink" title="智子（Flask + Bootstrap）"></a>智子（Flask + Bootstrap）</h5><p><img src="http://of71dfqgz.bkt.clouddn.com/%E6%99%BA%E5%AD%90%E6%95%88%E6%9E%9C.jpg" alt="智子效果"></p><blockquote><p>使用Flask的原因: 算法模型使用sklearn搞得，同是python好基友，于是就直接上手了。</p></blockquote><ul><li>Flask真的很轻，搭建起来异常轻松愉快，推荐一本书《Flask Web开发：基于Python的Web应用开发实战》。<ul><li>单文件也能搞定，但工程拆分之后逻辑就更清楚了（虽然麻烦不少）。</li><li>建议用python virtual环境来搞，可以类比为npm package, cocoapods podfile。</li><li>千万不要virtual clear，太恐怖了，程序一下就没有了，真的啥都不剩了。。。</li></ul></li><li>小应用配合WTForms，前后端表单开发效率神器。</li><li>python写出来的代码看起来还是很德味的，对python的好感度大为提升。</li><li>bootstrap程序猿UI神器。（至少看起来不会那么丑了。。）</li></ul><h5 id="有趣的双十一（实时Dashboard-angular-nebular-Elasticsearch）"><a href="#有趣的双十一（实时Dashboard-angular-nebular-Elasticsearch）" class="headerlink" title="有趣的双十一（实时Dashboard angular + nebular + Elasticsearch）"></a>有趣的双十一（实时Dashboard angular + nebular + Elasticsearch）</h5><blockquote><p>vue党为什么用angular: 因为想用nebular的这套主题。。。</p></blockquote><p><img src="http://of71dfqgz.bkt.clouddn.com/interesting.png" alt="interesting"></p><ul><li>直接看Angular官方文档吧，更新速度实在太快了。。<ul><li>官方的英雄实例很赞，适合入门上手。</li><li>typescript用起来还是很爽的。</li><li>整体还是略重，cli很完备，如果没有cli配个工程估计比较痛苦了。</li><li>先查看自身逻辑再怀疑库逻辑。。（一个ngfor绑定的问题，定位半天发现是自己逻辑写错了。。）</li></ul></li><li>es压秒级查询速度：<ul><li>结合Angular的数据绑定，实时更新效果不错。</li><li>es的查询逻辑可以封装一波，利于复用。</li><li>小白查询编写技巧：<ul><li>书籍推荐：《Elasticsearch服务器开发》（PACKT）</li><li>先用Elasticsearch sql生成一个基本的模板（往往是无法直接拿来用的。。），再进行调整修改。</li><li>查询一定要用keyword…</li></ul></li><li>之前试过es的morelikethis 指定匹配字段，相似度神器哈</li></ul></li></ul><h4 id="3-UED"><a href="#3-UED" class="headerlink" title="3. UED"></a>3. UED</h4><blockquote><p>零星接了点这方面的货，还蛮有意思的哈</p></blockquote><h5 id="培训视频"><a href="#培训视频" class="headerlink" title="培训视频"></a>培训视频</h5><p><img src="http://of71dfqgz.bkt.clouddn.com/%E5%9F%B9%E8%AE%AD.png" alt="培训"></p><h5 id="双十一H5直播间设计"><a href="#双十一H5直播间设计" class="headerlink" title="双十一H5直播间设计"></a>双十一H5直播间设计</h5><p><img src="http://of71dfqgz.bkt.clouddn.com/%E7%9B%B4%E6%92%AD%E9%97%B4.png" alt="直播间"></p><h5 id="双十一数据海报"><a href="#双十一数据海报" class="headerlink" title="双十一数据海报"></a>双十一数据海报</h5><p><img src="http://of71dfqgz.bkt.clouddn.com/report.png" alt="report"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>持续学习，共同成长。</p><p>最后预祝今晚双十一：“大吉大利，晚上吃鸡~”🐥🐥🐥🐥🐥🐥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;又到一年双十一，做一下从阿里回家这段日子的思想汇报吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Part-One-在阿里这段日子的收获&quot;&gt;&lt;a href=&quot;#Part-One-在阿里这段日子的收获&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
      <category term="回忆录" scheme="/categories/%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>xgboost填坑</title>
    <link href="/2017/11/09/xgboost%E5%A1%AB%E5%9D%91/"/>
    <id>/2017/11/09/xgboost填坑/</id>
    <published>2017-11-09T14:48:27.000Z</published>
    <updated>2017-11-10T01:18:12.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><h3 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h3><ul><li><code>git clone --recursive https://github.com/dmlc/xgboost</code></li><li>gcc6 install<ul><li>gcc7支持有问题</li><li>降级版本安装<code>brew install gcc@6 --without-multilib</code></li></ul></li><li>配置与编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd xgboost; cp make/minimum.mk ./config.mk; make -j4</span><br><span class="line">    </span><br><span class="line">// config.mk中需要指定gcc版本  gcc-6/g++-6</span><br><span class="line">cd xgboost; cp make/config.mk ./config.mk; make -j4</span><br></pre></td></tr></table></figure><ul><li><p>【可选】清楚之前的编译内容</p><ul><li>make clean</li><li>make distclean</li></ul></li><li><p>终极情况。。。</p><ul><li><p>清理系统版本gcc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin/</span><br><span class="line">rm cc gcc c++ g++</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>* 配置6系列的gcc，注意看一下自己gcc的版本号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/Cellar/gcc\@6/6.4.0/bin/gcc-6 cc</span><br><span class="line">ln -s /usr/local/Cellar/gcc\@6/6.4.0/bin/gcc-6 gcc</span><br><span class="line">ln -s /usr/local/bin/c++-6 c++</span><br><span class="line">ln -s /usr/local/bin/g++-6 g++</span><br></pre></td></tr></table></figure></code></pre><ul><li>如何安装到anaconda<ul><li><code>sudo /Users/alithink/anaconda/bin/ipython3 setup.py install</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装说明&quot;&gt;&lt;a href=&quot;#安装说明&quot; class=&quot;headerlink&quot; title=&quot;安装说明&quot;&gt;&lt;/a&gt;安装说明&lt;/h2&gt;&lt;h3 id=&quot;OSX&quot;&gt;&lt;a href=&quot;#OSX&quot; class=&quot;headerlink&quot; title=&quot;OSX&quot;&gt;&lt;/a&gt;OS
      
    
    </summary>
    
      <category term="ML" scheme="/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>销售预测爆旺（scikit-learn版本）</title>
    <link href="/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E7%88%86%E6%97%BA%EF%BC%88scikit-learn%E7%89%88%E6%9C%AC%EF%BC%89/"/>
    <id>/2017/11/09/销售预测爆旺（scikit-learn版本）/</id>
    <published>2017-11-09T14:43:52.000Z</published>
    <updated>2017-11-10T01:18:12.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>悼念一下回归模型的悲剧，先尝试一下分类模型，稍后再整他</p></blockquote><h2 id="1-数据探索"><a href="#1-数据探索" class="headerlink" title="1 数据探索"></a>1 数据探索</h2><blockquote><p>sparkSQL支持用sql对数据集进行分析，数据探索工作仍然大部分放在spark中来完成</p></blockquote><h3 id="1-1-🔑发现的一些相关性"><a href="#1-1-🔑发现的一些相关性" class="headerlink" title="1.1 🔑发现的一些相关性"></a>1.1 🔑发现的一些相关性</h3><blockquote><p>对应的数值越接近1表示正相关性越大，越接近-1表示负相关性越大，越接近0表示相关性越小</p></blockquote><ul><li>销售额的相关度往往好于销量<ul><li>毛利率、销量以及库存周转率的权衡在销售额上综合体现了？</li><li>销售任务的导向作用?</li></ul></li><li><p>排除极low款与爆款的前提下</p><ul><li>新货前30天预测后30天相关性较大</li><li><p>新货前30天预测整个商品季相关性较大</p><ul><li>放开爆款，反而销量的相关度上去了</li><li>销售额的相关度有所下降</li></ul><ul><li><img src="http://of71dfqgz.bkt.clouddn.com/15060597682343.jpg" alt=""></li><li><img src="http://of71dfqgz.bkt.clouddn.com/15060602769621.jpg" alt=""></li><li><img src="http://of71dfqgz.bkt.clouddn.com/15060632132189.jpg" alt=""></li></ul></li></ul></li><li>冬装数据太奇葩了，基本依托于两个大活动走货<ul><li>考虑要把冬装单独拆分出模型来搞</li><li>其它季节货品使用一个预测模型</li><li>只保留冬季的情况<br><img src="http://of71dfqgz.bkt.clouddn.com/15063072795952.jpg" alt=""></li></ul></li></ul><h3 id="1-2-决定尝试分offset构建模型"><a href="#1-2-决定尝试分offset构建模型" class="headerlink" title="1.2 决定尝试分offset构建模型"></a>1.2 决定尝试分offset构建模型</h3><h4 id="1-2-1-预测商品级销量分类段划分：offset-total-quantity"><a href="#1-2-1-预测商品级销量分类段划分：offset-total-quantity" class="headerlink" title="1.2.1 预测商品级销量分类段划分：offset_total_quantity"></a>1.2.1 预测商品级销量分类段划分：offset_total_quantity</h4><table><thead><tr><th>Offset（销量）</th><th>正分类（大于offset）</th><th>负分类(小于offset)</th></tr></thead><tbody><tr><td>1000</td><td>1477</td><td>4471</td></tr><tr><td>1600</td><td>1016</td><td>4932</td></tr><tr><td>10000</td><td>204</td><td>5744</td></tr><tr><td>50000</td><td>16</td><td>5932</td></tr></tbody></table><h4 id="1-2-2-参考周期划分："><a href="#1-2-2-参考周期划分：" class="headerlink" title="1.2.2 参考周期划分："></a>1.2.2 参考周期划分：</h4><blockquote><p>重点调优放在前三个档，因为参考周期太长，预测的意义也就小了</p></blockquote><ul><li>前3天：offset3_quantity</li><li>前7天：offset7_quantity</li><li>前15天：offset15_quantity</li><li>前30天：offset30_quantity </li></ul><h2 id="2-开撸"><a href="#2-开撸" class="headerlink" title="2 开撸"></a>2 开撸</h2><blockquote><p>代码的注释基本都用的英文，不是为了装逼，是怕有字符集兼容问题。。。</p></blockquote><h3 id="2-1-包引入"><a href="#2-1-包引入" class="headerlink" title="2.1 包引入"></a>2.1 包引入</h3><blockquote><p>大致分为三类: 数据操作类、sklearn相关、可视化相关。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package import</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> plotly.offline <span class="keyword">import</span> download_plotlyjs, init_notebook_mode, plot, iplot</span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br></pre></td></tr></table></figure><h4 id="核心包简介"><a href="#核心包简介" class="headerlink" title="核心包简介"></a>核心包简介</h4><ul><li>pandas: 数据集读取操作查询转换输出库。</li><li>sklearn: scikit-learn提供的ML相关方法实现库。<ul><li>preprocessing: 特征预处理相关。</li><li>model_selection: model所需的数据集选取生成。</li><li>metrics: 模型效果评估相关方法。</li><li>externals: 模型持久化相关。</li></ul></li><li>plotly: 发现的一个第三方可视化库，比matplotlib操作起来简单，生成图形可以交互分享，但是间歇性被墙。。😂</li></ul><h2 id="2-辅助函数声明"><a href="#2-辅助函数声明" class="headerlink" title="2. 辅助函数声明"></a>2. 辅助函数声明</h2><h3 id="2-1-生成对应offset的类标"><a href="#2-1-生成对应offset的类标" class="headerlink" title="2.1 生成对应offset的类标"></a>2.1 生成对应offset的类标</h3><blockquote><p>类标生成辅助方法，方法会塞入到pandas dataframe的apply方法中，默认会传入row</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_hot_product_label</span><span class="params">(row, offset, column_index)</span>:</span></span><br><span class="line">    <span class="string">"""Classification label generator.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        row: pandas dataframe row.</span></span><br><span class="line"><span class="string">        offset: Classification offset, such as 1000, 1600, 10000, 50000.</span></span><br><span class="line"><span class="string">        column_index: Dataframe row[column_index], such as row[12].</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">        Result of row_column value above offset. For example:</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        1: row_column &gt;= offset.</span></span><br><span class="line"><span class="string">        0: row_column &lt; offset.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> (row[column_index] &gt;= offset):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="2-2-特征变换"><a href="#2-2-特征变换" class="headerlink" title="2.2 特征变换"></a>2.2 特征变换</h3><blockquote><p>减少特征之间或者特征与类标之间取值差距，blablabla</p></blockquote><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote><p>log辅助方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_quantity</span><span class="params">(row, column_index)</span>:</span></span><br><span class="line">    <span class="string">"""Log the value."""</span></span><br><span class="line">    <span class="keyword">return</span> log(row[column_index])</span><br></pre></td></tr></table></figure><blockquote><p>标准化转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">standardScalerTransform</span><span class="params">(X_train, X_test)</span>:</span></span><br><span class="line">    <span class="string">"""StandardScaler transform."""</span></span><br><span class="line">    sc = StandardScaler()</span><br><span class="line">    sc.fit(X_train)</span><br><span class="line">    <span class="keyword">return</span> (sc.transform(X_train), sc.transform(X_test))</span><br></pre></td></tr></table></figure><blockquote><p>min-Max转换</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minMaxTransform</span><span class="params">(X_train, X_test)</span>:</span></span><br><span class="line">    <span class="string">"""MinMaxScaler transform."""</span></span><br><span class="line">    sc = MinMaxScaler()</span><br><span class="line">    sc.fit(X_train)</span><br><span class="line">    <span class="keyword">return</span> (sc.transform(X_train), sc.transform(X_test))</span><br></pre></td></tr></table></figure><h3 id="2-3-样本均匀化"><a href="#2-3-样本均匀化" class="headerlink" title="2.3 样本均匀化"></a>2.3 样本均匀化</h3><h4 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h4><blockquote><p>正负样本分布不均匀，需要均匀化处理，使得正负样本数基本一致。<br>隆重介绍<strong>imblearn</strong>库，提供各种样本均匀化算法的实现。</p></blockquote><table><thead><tr><th>Offset（销量）</th><th>正分类（大于offset）</th><th>负分类(小于offset)</th></tr></thead><tbody><tr><td>1000</td><td>1477</td><td>4471</td></tr><tr><td>1600</td><td>1016</td><td>4932</td></tr><tr><td>10000</td><td>204</td><td>5744</td></tr><tr><td>50000</td><td>16</td><td>5932</td></tr></tbody></table><h4 id="under-sampling"><a href="#under-sampling" class="headerlink" title="under-sampling"></a>under-sampling</h4><blockquote><p>把多的砍掉，正样本多就砍正样本，负样本多就砍负样本的，最后就一致了。<br>至于如何砍就有很多算法了，这里选用了NearMiss算法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imblearn.under_sampling <span class="keyword">import</span> NearMiss</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">under_samplingTransform</span><span class="params">(X, y)</span>:</span></span><br><span class="line">    <span class="string">"""Under-sampling NearMiss mode."""</span></span><br><span class="line">    <span class="keyword">return</span> NearMiss(random_state=<span class="number">0</span>, version=<span class="number">1</span>).fit_sample(X, y)</span><br></pre></td></tr></table></figure><h4 id="over-sampling"><a href="#over-sampling" class="headerlink" title="over-sampling"></a>over-sampling</h4><blockquote><p>哪种样本少了，就想办法造一些，最后就一致了。<br>至于如何造就有很多算法了，这里选用了SMOTE的SVM模式算法。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE, ADASYN</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over_samplingTransform</span><span class="params">(X, y)</span>:</span></span><br><span class="line">    <span class="string">"""Over-sampling SMOTE svm mode."""</span></span><br><span class="line">    <span class="keyword">return</span> SMOTE(kind=<span class="string">'svm'</span>).fit_sample(X, y)</span><br></pre></td></tr></table></figure><h3 id="2-4-模型算法"><a href="#2-4-模型算法" class="headerlink" title="2.4 模型算法"></a>2.4 模型算法</h3><blockquote><p>最简单的是感知器算法，因为不能解决线性不可分问题，就忽略掉了。。</p></blockquote><h4 id="逻辑斯蒂回归"><a href="#逻辑斯蒂回归" class="headerlink" title="逻辑斯蒂回归"></a>逻辑斯蒂回归</h4><blockquote><p>唬人的名字，说是回归，其实是分类算法。。<br>分类界用的很多。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logisticRegModelGenerator</span><span class="params">(train_std, y_train)</span>:</span></span><br><span class="line">    <span class="string">"""LogisticRegression model generator."""</span></span><br><span class="line">    <span class="keyword">return</span> LogisticRegression(C=<span class="number">1000</span>, random_state=<span class="number">0</span>).fit(train_std, y_train)</span><br></pre></td></tr></table></figure><h4 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h4><blockquote><p>理论上说可以忽略样本分布不均匀的问题（因为属于决策树类的算法）。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_forest_classifier</span><span class="params">(train_x, train_y)</span>:</span>    </span><br><span class="line">    <span class="string">"""Random Forest model generator."""</span> </span><br><span class="line">    <span class="keyword">return</span> RandomForestClassifier(n_estimators=<span class="number">8</span>).fit(train_x, train_y)</span><br></pre></td></tr></table></figure><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><blockquote><p>忽然概念名词超多的算法，什么超平面啥的。。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_classifier</span><span class="params">(train_x, train_y)</span>:</span>    </span><br><span class="line">    <span class="string">"""SVM model generator."""</span></span><br><span class="line">    <span class="keyword">return</span> SVC(kernel=<span class="string">'rbf'</span>, probability=<span class="keyword">True</span>).fit(train_x, train_y)</span><br></pre></td></tr></table></figure><h4 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h4><blockquote><p>梯度提升算法（实测在这个场景综合效果较好😘）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_boosting_classifier</span><span class="params">(train_x, train_y)</span>:</span>    </span><br><span class="line">    <span class="string">"""GBDT model generator."""</span></span><br><span class="line">    <span class="keyword">return</span> GradientBoostingClassifier(n_estimators=<span class="number">200</span>).fit(train_x, train_y)</span><br></pre></td></tr></table></figure><h4 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h4><blockquote><p>在kaggle大赛中叱咤风云的神级算法，在这个场景实测效果不如GBDT<br>但xg有些好处，比如可以输出每轮学习时的精确度，以及输出目前输入特征的重要性分数，便于优化调参。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> plot_importance</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xgboost_classifier</span><span class="params">(train_x, train_y)</span>:</span></span><br><span class="line">    <span class="string">"""xgboost model generator."""</span></span><br><span class="line">    model = XGBClassifier()</span><br><span class="line">    model.fit(train_x, train_y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Feature importance.</span></span><br><span class="line">    <span class="comment"># plot_importance(model)</span></span><br><span class="line">    <span class="comment"># pyplot.show()</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h3 id="2-5-预测类"><a href="#2-5-预测类" class="headerlink" title="2.5 预测类"></a>2.5 预测类</h3><blockquote><p>SalesProphet（销售预言家）：预测辅助类<br>因为各种特征offset、类标、算法的组合，不封装一个类的话，将来会死的。。（已经死过一轮了，改一个东东要累死。。）<br>具体方法作用详见注释哈，总之就是传入参数，调用predit完事。<br>（吐槽python 断言竟然只能在继承于testcase的类中使用。。）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesProphet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Sales prediction class.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        datasource: Sales prediction datasource relied on.</span></span><br><span class="line"><span class="string">        features_name: Feature names array.</span></span><br><span class="line"><span class="string">        label_name: Label names String.</span></span><br><span class="line"><span class="string">        model_type: Algorithm of model training.</span></span><br><span class="line"><span class="string">        X: Feature data.</span></span><br><span class="line"><span class="string">        y: Label data.</span></span><br><span class="line"><span class="string">        X_train: X train data.</span></span><br><span class="line"><span class="string">        X_test: X test data.</span></span><br><span class="line"><span class="string">        y_train: y train data.</span></span><br><span class="line"><span class="string">        y_test: y test data.</span></span><br><span class="line"><span class="string">        y_pred: y data predicted.</span></span><br><span class="line"><span class="string">        model: ML model fitted.</span></span><br><span class="line"><span class="string">        accuracy_score: Model accuracy score.</span></span><br><span class="line"><span class="string">        f1_score: Model f1 score.</span></span><br><span class="line"><span class="string">        train_score: Model score in train set.</span></span><br><span class="line"><span class="string">        test_score: Model score in test set.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datasource, features_name, label_name, model_type=<span class="string">'logistic'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""Inits SalesProphet with datasource, features_name, label_name, model_type(default is logistic)"""</span></span><br><span class="line">        self.datasource = datasource</span><br><span class="line">        self.features_name = features_name</span><br><span class="line">        self.label_name = label_name</span><br><span class="line">        self.model_type = model_type</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feature_engineering</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Feature engineering about: X y generated, one-hot, sampling blabla..."""</span></span><br><span class="line">        <span class="comment"># assertIsNotNone(self.datasource, 'Guys, forget the datasource!!!')</span></span><br><span class="line">        <span class="comment"># assertNotEqual(len(self.features_name), 0, 'features is empty. WTF...')</span></span><br><span class="line">        <span class="comment"># assertNotEqual(len(self.label_name), 0, 'label is empty. WTF...')</span></span><br><span class="line">        </span><br><span class="line">        self.X = self.datasource[self.features_name].values</span><br><span class="line">        self.y = self.datasource[self.label_name]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># one-hot</span></span><br><span class="line">        ohe = OneHotEncoder(categorical_features = [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">        self.X = ohe.fit_transform(self.X).toarray()</span><br><span class="line">        </span><br><span class="line">        self.X, self.y = over_samplingTransform(self.X, self.y)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_test_transform</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Trainset and testset splitor and standard transform."""</span></span><br><span class="line">        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=<span class="number">0.3</span>, random_state=<span class="number">0</span>)</span><br><span class="line">        self.X_train, self.X_test = standardScalerTransform(self.X_train, self.X_test)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">model_fitting</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Algorithm of model selector."""</span></span><br><span class="line">        model_alg_switcher = &#123;</span><br><span class="line">            <span class="string">'logistic'</span>: logisticRegModelGenerator,</span><br><span class="line">            <span class="string">'rf'</span>: random_forest_classifier,</span><br><span class="line">            <span class="string">'svm'</span>: svm_classifier,</span><br><span class="line">            <span class="string">'gdbt'</span>: gradient_boosting_classifier,</span><br><span class="line">            <span class="string">'xgboost'</span>: xgboost_classifier</span><br><span class="line">        &#125;</span><br><span class="line">        func = model_alg_switcher.get(self.model_type, logisticRegModelGenerator)</span><br><span class="line">        <span class="keyword">return</span> func(self.X_train, self.y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genPredictReport</span><span class="params">(self, printlog=False)</span>:</span></span><br><span class="line">        <span class="string">"""Model estimate report generation. Set printlog YES to pring log."""</span></span><br><span class="line">        self.accuracy_score = accuracy_score(self.y_test, self.y_pred)</span><br><span class="line">        self.f1_score = f1_score(self.y_test, self.y_pred, average=<span class="string">'binary'</span>)</span><br><span class="line">        self.train_score = self.model.score(self.X_train, self.y_train)</span><br><span class="line">        self.test_score = self.model.score(self.X_test, self.y_test)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> printlog:</span><br><span class="line">            print(<span class="string">'/--------------START-------------'</span>)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'| feature: %s'</span> % self.features_name)</span><br><span class="line">            print(<span class="string">'| label: %s'</span> % self.label_name)</span><br><span class="line">            print(<span class="string">'| model alg: %s'</span> % self.model_type)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'|----Estimate score------'</span>)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'| accuracy is: %.2f'</span> % self.accuracy_score)</span><br><span class="line">            print(<span class="string">'| f1_score is: %.2f'</span> % self.f1_score)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'|---Over-fitting check---'</span>)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'| train-set score: %.2f'</span> % self.train_score)</span><br><span class="line">            print(<span class="string">'| test-set score: %.2f'</span> % self.test_score)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'|---------------END--------------/\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_genReportChart</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""y_test and y_pred chart generation."""</span></span><br><span class="line">        t = np.arange(len(self.y_pred))</span><br><span class="line">        <span class="comment"># Create traces</span></span><br><span class="line">        trace0 = go.Scatter(</span><br><span class="line">            x = t,</span><br><span class="line">            y = self.y_pred,</span><br><span class="line">            mode = <span class="string">'lines'</span>,</span><br><span class="line">            name = <span class="string">'predict'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        trace1 = go.Scatter(</span><br><span class="line">            x = t,</span><br><span class="line">            y = self.y_test,</span><br><span class="line">            mode = <span class="string">'lines'</span>,</span><br><span class="line">            name = <span class="string">'real'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        data = [trace0, trace1]</span><br><span class="line"></span><br><span class="line">        py.iplot(data, filename=<span class="string">'(%self.features_name)_(%self.labels_name)_(%self.model_type.model)'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_saveModel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Model persistence."""</span></span><br><span class="line">        joblib.dump(self.model, <span class="string">'%(self.features_name)_%(self.labels_name)_(%self.model_type.model)'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Predict main method."""</span></span><br><span class="line">        self.feature_engineering()</span><br><span class="line">        self.train_test_transform()</span><br><span class="line">        </span><br><span class="line">        self.model = self.model_fitting()</span><br><span class="line">        self.y_pred = self.model.predict(self.X_test)</span><br><span class="line">        self.genPredictReport()</span><br></pre></td></tr></table></figure><h2 id="3-数据准备"><a href="#3-数据准备" class="headerlink" title="3. 数据准备"></a>3. 数据准备</h2><h3 id="3-1-数据读取"><a href="#3-1-数据读取" class="headerlink" title="3.1 数据读取"></a>3.1 数据读取</h3><blockquote><p>从spark 导出准备好的数据到csv文件，pandas读取该csv中的数据。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">"data/product_2016_offset_group.csv"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>获取前5条数据看看情况</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br></pre></td></tr></table></figure><blockquote><p>describe 可以对df中各列的综合指标进行集中展示。<br>比如中位数、均值等等，方便进一步分析数据。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.describe()</span><br></pre></td></tr></table></figure><h3 id="3-2-销量特征log变换"><a href="#3-2-销量特征log变换" class="headerlink" title="3.2 销量特征log变换"></a>3.2 销量特征log变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">'log_3_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">8</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_7_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">9</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_15_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">10</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_30_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">11</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_total_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">12</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br></pre></td></tr></table></figure><h3 id="3-3-类标生成"><a href="#3-3-类标生成" class="headerlink" title="3.3 类标生成"></a>3.3 类标生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">'hot_1000_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">1000</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'hot_1600_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">1600</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'hot_10000_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">10000</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'hot_50000_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">50000</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br><span class="line">train_data[train_data.hot_1000_product == <span class="number">1</span>].count()</span><br></pre></td></tr></table></figure><pre><code>product_code                  1477category_id                   1477season                        1477offset3_amount_actual         1477offset7_amount_actual         1477offset15_amount_actual        1477offset30_amount_actual        1477offset_total_amount_actual    1477offset3_quantity              1477offset7_quantity              1477offset15_quantity             1477offset30_quantity             1477offset_total_quantity         1477log_3_quantity                1477log_7_quantity                1477log_15_quantity               1477log_30_quantity               1477log_total_quantity            1477hot_1000_product              1477hot_1600_product              1477hot_10000_product             1477hot_50000_product             1477dtype: int64</code></pre><h3 id="3-4-数据清洗"><a href="#3-4-数据清洗" class="headerlink" title="3.4 数据清洗"></a>3.4 数据清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data_normal = train_data[train_data.offset30_quantity &lt;= train_data.offset_total_quantity]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data_normal[train_data_normal.offset_total_quantity &lt; <span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># drop null row</span></span><br><span class="line">print(train_data_normal.isnull().sum())</span><br><span class="line">train_data_valid = train_data_normal.dropna()</span><br></pre></td></tr></table></figure><pre><code>product_code                  0category_id                   0season                        0offset3_amount_actual         0offset7_amount_actual         0offset15_amount_actual        0offset30_amount_actual        0offset_total_amount_actual    0offset3_quantity              0offset7_quantity              0offset15_quantity             0offset30_quantity             0offset_total_quantity         0log_3_quantity                0log_7_quantity                0log_15_quantity               0log_30_quantity               0log_total_quantity            0hot_1000_product              0hot_1600_product              0hot_10000_product             0hot_50000_product             0dtype: int64</code></pre><blockquote><ol><li>无序特征做onehot消除次序关系。</li><li>整理特征与类标。</li><li>循环生成预言家，让它预测，生成报告，然后把他丢到预言家数组里面（salesProphets）便于后面生成分析对比用的DataFrame。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># category_id, season onehot</span></span><br><span class="line">feature_disordered = [<span class="string">'category_id'</span>, <span class="string">'season'</span>]</span><br><span class="line"></span><br><span class="line">feature_cols_3 = feature_disordered + [<span class="string">'offset3_quantity'</span>]</span><br><span class="line">feature_cols_7 = feature_disordered + [<span class="string">'offset7_quantity'</span>]</span><br><span class="line">feature_cols_15 = feature_disordered + [<span class="string">'offset15_quantity'</span>]</span><br><span class="line">feature_cols_30 = feature_disordered + [<span class="string">'offset30_quantity'</span>]</span><br><span class="line">feature_offsets = [feature_cols_3, feature_cols_7, feature_cols_15, feature_cols_30]</span><br><span class="line"></span><br><span class="line">label_names = [<span class="string">'hot_1000_product'</span>, <span class="string">'hot_1600_product'</span>, <span class="string">'hot_10000_product'</span>, <span class="string">'hot_50000_product'</span>]</span><br><span class="line"></span><br><span class="line">algs = [<span class="string">'logistic'</span>, <span class="string">'rf'</span>, <span class="string">'svm'</span>, <span class="string">'gdbt'</span>,<span class="string">'xgboost'</span>]</span><br><span class="line"></span><br><span class="line">salesProphets = []</span><br><span class="line"><span class="keyword">for</span> alg <span class="keyword">in</span> algs:</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> feature_offsets:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> label_names:</span><br><span class="line">            salesProphet = SalesProphet(train_data_valid, feature, y, alg)</span><br><span class="line">            salesProphet.predict()</span><br><span class="line">            salesProphet.genPredictReport()</span><br><span class="line">            salesProphets.append(salesProphet)</span><br></pre></td></tr></table></figure><blockquote><p>预言家数组生成综合对比DataFrame</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整理生成报告DataFrame</span></span><br><span class="line">feature_column = []</span><br><span class="line">label_column = []</span><br><span class="line">model_alg_column = []</span><br><span class="line">accuracy_column = []</span><br><span class="line">f1_score_column = []</span><br><span class="line">trainset_score_column = []</span><br><span class="line">testset_score_column = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> salesProphet <span class="keyword">in</span> salesProphets:</span><br><span class="line">    feature_column.append(salesProphet.features_name)</span><br><span class="line">    label_column.append(salesProphet.label_name)</span><br><span class="line">    model_alg_column.append(salesProphet.model_type)</span><br><span class="line">    accuracy_column.append(salesProphet.accuracy_score)</span><br><span class="line">    f1_score_column.append(salesProphet.f1_score)</span><br><span class="line">    trainset_score_column.append(salesProphet.train_score)</span><br><span class="line">    testset_score_column.append(salesProphet.test_score)</span><br><span class="line"></span><br><span class="line">result_data = &#123;<span class="string">'feature'</span>: feature_column, <span class="string">'label'</span>: label_column, </span><br><span class="line">               <span class="string">'model_alg'</span>: model_alg_column, <span class="string">'accuracy'</span>: accuracy_column, </span><br><span class="line">               <span class="string">'f1_score'</span>: f1_score_column, <span class="string">'trainset_score'</span>: trainset_score_column, </span><br><span class="line">               <span class="string">'testset_score'</span>: testset_score_column&#125;</span><br><span class="line"></span><br><span class="line">result_df = DataFrame(result_data)</span><br></pre></td></tr></table></figure><blockquote><p>分析报告保存</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_df.to_csv(<span class="string">'data/result_df.csv'</span>)</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h3 id="特征重要性分析"><a href="#特征重要性分析" class="headerlink" title="特征重要性分析"></a>特征重要性分析</h3><blockquote><p>分数越高越重要</p></blockquote><p><img src="http://of71dfqgz.bkt.clouddn.com/%E6%A8%A1%E5%9E%8B%E7%89%B9%E5%BE%81%E9%87%8D%E8%A6%81%E6%80%A7%E5%88%86%E6%9E%90.jpg" alt="模型特征重要性分析"></p><h3 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h3><blockquote><p>分数越接近1越好</p></blockquote><p><img src="http://of71dfqgz.bkt.clouddn.com/%E7%BB%BC%E5%90%88%E5%AF%B9%E6%AF%94%E6%8A%A5%E5%91%8A.png" alt="综合对比报告"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://scikit-learn.org/stable/" target="_blank" rel="external">scikit-learn官网</a></li><li><a href="http://contrib.scikit-learn.org/imbalanced-learn/stable/" target="_blank" rel="external">imbalanced-learn官网</a></li><li><a href="http://blog.csdn.net/Bryan__/article/details/51288953" target="_blank" rel="external">python sklearn分类算法简单调用</a></li><li><a href="http://www.jianshu.com/p/7e0e2d66b3d4" target="_blank" rel="external">Kaggle神器xgboost</a></li><li><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/" target="_blank" rel="external">莫烦PYTHON 机器学习专题(需翻墙)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;悼念一下回归模型的悲剧，先尝试一下分类模型，稍后再整他&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-数据探索&quot;&gt;&lt;a href=&quot;#1-数据探索&quot; class=&quot;headerlink&quot; title=&quot;1 数据探索&quot;&gt;&lt;/a&gt;1 数据探索
      
    
    </summary>
    
      <category term="ML" scheme="/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>销售预测案例源码分析</title>
    <link href="/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E6%A1%88%E4%BE%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>/2017/11/09/销售预测案例源码分析/</id>
    <published>2017-11-09T14:35:29.000Z</published>
    <updated>2017-11-10T01:18:12.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文重在借案例学习spark相关数据结构与语法</p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="1-特征转换"><a href="#1-特征转换" class="headerlink" title="1. 特征转换"></a>1. 特征转换</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> stateHolidayIndexer = <span class="keyword">new</span> <span class="type">StringIndexer</span>()</span><br><span class="line">    .setInputCol(<span class="string">"StateHoliday"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"StateHolidayIndex"</span>)</span><br><span class="line">  <span class="keyword">val</span> schoolHolidayIndexer = <span class="keyword">new</span> <span class="type">StringIndexer</span>()</span><br><span class="line">    .setInputCol(<span class="string">"SchoolHoliday"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"SchoolHolidayIndex"</span>)</span><br><span class="line">  <span class="keyword">val</span> stateHolidayEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"StateHolidayIndex"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"StateHolidayVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> schoolHolidayEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"SchoolHolidayIndex"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"SchoolHolidayVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> dayOfMonthEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"DayOfMonth"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"DayOfMonthVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> dayOfWeekEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"DayOfWeek"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"DayOfWeekVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> storeEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"Store"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"StoreVec"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> assembler = <span class="keyword">new</span> <span class="type">VectorAssembler</span>()</span><br><span class="line">    .setInputCols(<span class="type">Array</span>(<span class="string">"StoreVec"</span>, <span class="string">"DayOfWeekVec"</span>, <span class="string">"Open"</span>,</span><br><span class="line">      <span class="string">"DayOfMonthVec"</span>, <span class="string">"StateHolidayVec"</span>, <span class="string">"SchoolHolidayVec"</span>))</span><br><span class="line">    .setOutputCol(<span class="string">"features"</span>)</span><br></pre></td></tr></table></figure><ul><li><p>先转化为StringIndexer</p><ul><li>inputCol原始列</li><li><p>outputCol转化为对应的index列: </p><ul><li>从0开始编号，出现频次最多的项目，编号小</li><li>有时候会有着这样的场景</li><li><p>用一个df转换另一个df,当df2对应列中的值超出了df1中的范围时，可以选择策略</p><ul><li>skip：忽略掉</li><li>keep：超出项对应分配一个index</li><li><p>默认为抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val indexed2 = indexer.fit(df1).setHandleInvalid(&quot;skip&quot;).transform(df2)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>做OneHotEncoder</p><ul><li>转化为对应向量</li><li>只指定一位为1，其余为0，出现频率最低的为(最终序号, [], [])</li></ul></li><li>VectorAssembler<ul><li>将对应元素合并成一个向量，打平</li></ul></li></ul><h3 id="2-环境初始化（面向像我这样的小白选手）"><a href="#2-环境初始化（面向像我这样的小白选手）" class="headerlink" title="2. 环境初始化（面向像我这样的小白选手）"></a>2. 环境初始化（面向像我这样的小白选手）</h3><blockquote><p>main中 大部分抄袭文档</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"alithink"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="keyword">val</span> sparkSession = <span class="type">SparkSession</span>.builder().getOrCreate()</span><br></pre></td></tr></table></figure><ul><li>SparkConf:<ul><li>Spark各种key-value的配置项<ul><li>setAppName: 给你的应用配置一个名字</li><li>setMaster: 连接到的主URL，例如这里的local代表本地单线程运行，local[4]本地4核运行，或者spark://master:7077 spark典型的Mater/slave模式</li></ul></li></ul></li><li>SparkContext:<ul><li>理解为与spark集群的对接人，可以用她来创建RDDs, accumulators 和 broadcast variables</li><li>每个JVM环境活着的SparkContext只有一个，创建一个新的前先stop（将来这个限制可能会被移除）</li></ul></li><li><p>SparkSession:</p><ul><li>合并了SparkContext和SQLContext<ul><li>内部有对应属性在需要时可以取得对应实例</li></ul></li><li>用于操作DataSet和DataFrame API</li><li><p>使用：</p><ul><li>REPL已经预先创建了（比如spark-shell, zeppelin）</li><li><p>获取已经存在的或者新创建一个：</p><ul><li><code>SparkSession.builder().getOrCreate()</code><ul><li>前提是sparkContext已经创建</li></ul></li><li><p>尽量用SparkSession来接管一切吧（上述代码可以改为如下）</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"alithink"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line"><span class="comment">// val sc = new SparkContext(conf)</span></span><br><span class="line"><span class="comment">// val sparkSession = SparkSession.builder().getOrCreate()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sparkSession = <span class="type">SparkSession</span>.builder</span><br><span class="line">                 <span class="comment">//.master("local")</span></span><br><span class="line">                 <span class="comment">//.appName("alithink")</span></span><br><span class="line">                 .config(conf)</span><br><span class="line">                 .getOrCreate()</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h3 id="3-训练数据整理"><a href="#3-训练数据整理" class="headerlink" title="3. 训练数据整理"></a>3. 训练数据整理</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main中调用</span></span><br><span class="line"><span class="keyword">val</span> data = loadTrainingData(sparkSession, <span class="string">"/Users/alithink/Space/common_data/train.csv"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体实现函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadTrainingData</span></span>(sqlContext:<span class="type">SparkSession</span>, filePath:<span class="type">String</span>):<span class="type">DataFrame</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> trainRaw = sqlContext</span><br><span class="line">    .read.format(<span class="string">"com.databricks.spark.csv"</span>)</span><br><span class="line">    .option(<span class="string">"header"</span>, <span class="string">"true"</span>)</span><br><span class="line">    .load(filePath)</span><br><span class="line">    .repartition(<span class="number">30</span>)</span><br><span class="line">  trainRaw.createOrReplaceTempView(<span class="string">"raw_training_data"</span>)</span><br><span class="line">   </span><br><span class="line">  sqlContext.sql(<span class="string">""</span><span class="string">"SELECT</span></span><br><span class="line"><span class="string">    double(Sales) label, double(Store) Store, int(Open) Open, double(DayOfWeek)   DayOfWeek,</span></span><br><span class="line"><span class="string">    StateHoliday, SchoolHoliday, (double(regexp_extract(Date, '\\d+-\\d+-(\\d+)', 1))) DayOfMonth</span></span><br><span class="line"><span class="string">    FROM raw_training_data</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span>).na.drop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SparkSession：<ul><li>read 返回一个DataFrameReader<ul><li>format(读取格式):com.databricks.spark.csv期初为一个开源库，后来已经集成到spark2.*啦</li><li><code>option(&quot;header&quot;, &quot;true&quot;)</code> 使用第一行作为头</li><li>赠送 <code>.option(&quot;inferSchema&quot;, &quot;true&quot;)</code> 自动推导类型</li></ul></li></ul></li><li>DataFrame（粗略一说，内容太多^_^）:<ul><li>DataSet[Row]</li><li>DataFrame vs RDD<br><img src="http://of71dfqgz.bkt.clouddn.com/15048413811557.jpg" alt=""></li><li>DataFrame vs DataSet<ul><li>往往区别是在于行类型的不确定与确定</li></ul></li></ul></li><li>DataSet:<ul><li>repartition: 返回按规则分区后的dataset<ul><li>一句话：分区由少变多，或者在一些不是键值对的RDD中想要重新分区的话，就需要使用repartition了</li><li>有多变少，直接coalesce,repartition其实就是shuffle=true的coalesce</li><li>关于分区：分区的个数决定了并行计算的粒度<ul><li>详情参考：<a href="https://www.zhihu.com/question/31948747" target="_blank" rel="external">知乎传送门</a></li></ul></li></ul></li><li>createOrReplaceTempView:<ul><li>创建本地临时‘表’，便于之后sql操作</li></ul></li></ul></li><li>sql:<ul><li>na.drop() 丢掉所有包含null的row</li></ul></li></ul><h3 id="4-线性回归（随机森林类似，换了方法以及ParamMaps）"><a href="#4-线性回归（随机森林类似，换了方法以及ParamMaps）" class="headerlink" title="4. 线性回归（随机森林类似，换了方法以及ParamMaps）"></a>4. 线性回归（随机森林类似，换了方法以及ParamMaps）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preppedLRPipeline</span></span>():<span class="type">TrainValidationSplit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> lr = <span class="keyword">new</span> <span class="type">LinearRegression</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> paramGrid = <span class="keyword">new</span> <span class="type">ParamGridBuilder</span>()</span><br><span class="line">     .addGrid(lr.regParam, <span class="type">Array</span>(<span class="number">0.1</span>, <span class="number">0.01</span>))</span><br><span class="line">     .addGrid(lr.fitIntercept)</span><br><span class="line">     .addGrid(lr.elasticNetParam, <span class="type">Array</span>(<span class="number">0.0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>))</span><br><span class="line">     .build()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> pipeline = <span class="keyword">new</span> <span class="type">Pipeline</span>()</span><br><span class="line">     .setStages(<span class="type">Array</span>(stateHolidayIndexer, schoolHolidayIndexer,</span><br><span class="line">       stateHolidayEncoder, schoolHolidayEncoder, storeEncoder,</span><br><span class="line">       dayOfWeekEncoder, dayOfMonthEncoder,</span><br><span class="line">       assembler, lr))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> tvs = <span class="keyword">new</span> <span class="type">TrainValidationSplit</span>()</span><br><span class="line">     .setEstimator(pipeline)</span><br><span class="line">     .setEvaluator(<span class="keyword">new</span> <span class="type">RegressionEvaluator</span>)</span><br><span class="line">     .setEstimatorParamMaps(paramGrid)</span><br><span class="line">     .setTrainRatio(<span class="number">0.75</span>)</span><br><span class="line">    tvs</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">* <span class="type">LinearRegression</span>:</span><br><span class="line">    * spark mllib自带的线性回归，支持多种类型的正则方法（具体算法迷茫中）</span><br><span class="line">        * <span class="type">Lasso</span> <span class="type">L1</span></span><br><span class="line">        * ridge <span class="type">L2</span></span><br><span class="line">        * elastic net <span class="type">L2</span> + <span class="type">L1</span>   </span><br><span class="line">        * none   </span><br><span class="line">* <span class="type">ParamGridBuilder</span>:</span><br><span class="line">    * 参数网格：</span><br><span class="line">        * 通过不同参数的组合，形成大量参数调优组合后的模型</span><br><span class="line">        * 然后用对应的验证评估方法去择优</span><br><span class="line">    * regParam:定义规范化项的权重</span><br><span class="line">    * elasticNetParam:<span class="type">Elastic</span> net参数，取值介于<span class="number">0</span>，<span class="number">1</span></span><br><span class="line">    * 这里elaticNetParam设置<span class="number">5</span>个值，regParam2个值，代表会有 <span class="number">5</span>*<span class="number">2</span>=<span class="number">10</span>个不同的模型被训练。</span><br><span class="line">* <span class="type">Pipeline</span>:</span><br><span class="line">    * 由一个个stages组成，每一个stage可以是estimator或者transformer</span><br><span class="line">    * fit model时触发</span><br><span class="line">* <span class="type">TrainValidationSplit</span>:</span><br><span class="line">    * 参数调整检验。</span><br><span class="line">    * 随机将输入的dataset划分为训练集和验证集，使用评估机制选择效果最好的模型。</span><br><span class="line">* <span class="type">RegressionEvaluator</span>:</span><br><span class="line">    * 上面说的用于验证模型效果的evaluator</span><br><span class="line"></span><br><span class="line">### <span class="number">5.</span> 模型训练与验证</span><br><span class="line"></span><br><span class="line">``` scala</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fitModel</span></span>(tvs:<span class="type">TrainValidationSplit</span>, data:<span class="type">DataFrame</span>) = &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">Array</span>(training, test) = data.randomSplit(<span class="type">Array</span>(<span class="number">0.8</span>, <span class="number">0.2</span>), seed = <span class="number">12345</span>)</span><br><span class="line">    logger.info(<span class="string">"Fitting data"</span>)</span><br><span class="line">    <span class="keyword">val</span> model = tvs.fit(training)</span><br><span class="line">    logger.info(<span class="string">"Now performing test on hold out set"</span>)</span><br><span class="line">    <span class="keyword">val</span> holdout = model.transform(test).select(<span class="string">"prediction"</span>,<span class="string">"label"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// have to do a type conversion for RegressionMetrics</span></span><br><span class="line">    <span class="keyword">val</span> rm = <span class="keyword">new</span> <span class="type">RegressionMetrics</span>(holdout.rdd.map(x =&gt;</span><br><span class="line">      (x(<span class="number">0</span>).asInstanceOf[<span class="type">Double</span>], x(<span class="number">1</span>).asInstanceOf[<span class="type">Double</span>])))</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"Test Metrics"</span>)</span><br><span class="line">    logger.info(<span class="string">"Test Explained Variance:"</span>)</span><br><span class="line">    logger.info(rm.explainedVariance)</span><br><span class="line">    logger.info(<span class="string">"Test R^2 Coef:"</span>)</span><br><span class="line">    logger.info(rm.r2)</span><br><span class="line">    logger.info(<span class="string">"Test MSE:"</span>)</span><br><span class="line">    logger.info(rm.meanSquaredError)rm = <span class="keyword">new</span> <span class="type">RegressionMetrics</span>(holdout.rdd.map(x =&gt;</span><br><span class="line">      (x(<span class="number">0</span>).asInstanceOf[<span class="type">Double</span>], x(<span class="number">1</span>).asInstanceOf[<span class="type">Double</span>])))</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"Test Metrics"</span>)</span><br><span class="line">    logger.info(<span class="string">"Test Explained Variance:"</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"Test RMSE:"</span>)</span><br><span class="line">    logger.info(rm.rootMeanSquaredError)</span><br><span class="line"></span><br><span class="line">    model</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先划分训练集和测试集</li><li>fit：<ul><li>用训练集拟合出一个model</li></ul></li><li>RegressionMetrics:<ul><li>回归evaluator</li><li>集中评估标准：<ul><li>R^2：决定系数，反应因变量的全部变异能通过回归关系被自变量解释的比例。如R平方为0.8，则表示回归关系可以解释因变量80%的变异。换句话说，如果我们能控制自变量不变，则因变量的变异程度会减少80%</li><li>explainedVariance: 解释方差，具体详见：<a href="http://blog.sciencenet.cn/blog-1148346-852482.html" target="_blank" rel="external">http://blog.sciencenet.cn/blog-1148346-852482.html</a></li><li>MAE mean absolute error: 绝对误差，准确值与其测量值之间的误差。</li><li>MSE mean squared error: 均方误差, 衡量平均误差的方法。</li><li>RMSE root mean square error: 均方根误差。</li></ul></li></ul></li><li>最后用训练好的模型transform测试集，然后将结果保存。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://sparktutorials.net/spark-mllib---predict-store-sales-with-ml-pipelines" target="_blank" rel="external">Spark MLLib - Predict Store Sales with ML Pipelines</a></li><li><a href="http://spark.apache.org/docs/latest/api/scala/index.html#package" target="_blank" rel="external">Spark doc</a></li><li><a href="http://dblab.xmu.edu.cn/blog/1510-2/" target="_blank" rel="external">Spark2.1.0入门：模型选择和超参数调整</a></li><li><a href="Spark2 Linear Regression线性回归">Spark2 Linear Regression线性回归</a></li><li><a href="http://blog.csdn.net/tuntunwang/article/details/60870312" target="_blank" rel="external">基于spark用线性回归（linear regression)进行数据预测</a></li><li><a href="http://www.jianshu.com/p/200473f264bc" target="_blank" rel="external">Intellij之Spark Scala开发环境搭建</a></li><li><a href="http://dblab.xmu.edu.cn/blog/1297-2/" target="_blank" rel="external">Spark入门：标签和索引的转化：StringIndexer- IndexToString-VectorIndexer</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文重在借案例学习spark相关数据结构与语法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;流程&quot;&gt;&lt;a href=&quot;#流程&quot; class=&quot;headerlink&quot; title=&quot;流程&quot;&gt;&lt;/a&gt;流程&lt;/h2&gt;&lt;h3 id=&quot;1-特征转换&quot;
      
    
    </summary>
    
      <category term="ML" scheme="/categories/ML/"/>
    
    
  </entry>
  
  <entry>
    <title>爱乐之城</title>
    <link href="/2017/03/18/%E7%88%B1%E4%B9%90%E4%B9%8B%E5%9F%8E/"/>
    <id>/2017/03/18/爱乐之城/</id>
    <published>2017-03-18T15:12:11.000Z</published>
    <updated>2017-11-10T01:18:12.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一部好电影，总是能触响你内心的共鸣，爱乐之城就是这样一部好电影。</p></blockquote><h2 id="好电影应该包含什么"><a href="#好电影应该包含什么" class="headerlink" title="好电影应该包含什么"></a>好电影应该包含什么</h2><ul><li>引人共鸣的音乐</li><li>好故事</li><li>好结局</li><li>引人深思</li></ul><h2 id="共鸣"><a href="#共鸣" class="headerlink" title="共鸣"></a>共鸣</h2><h3 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h3><p>每个人都有拥有梦想的权利，年轻就应该去追逐，无惧失败。在追逐梦想的道路上，除了自己的那份坚持之外，最可贵的就是能有一个人在激励与支持你（原来想说默默的支持，看到塞的方式之后，感觉如果你打算支持她就要把这份支持高调的表达出来，并从内心真正的认可对方）。</p><p>最近关于梦想的讨论好多，听了马老师的演讲后，跟同事在一起也讨论了好久。很多梦想可能需要在财务自由后才能实现，为了梦想可能中途需要做很多妥协。这些妥协，对于像我们这样支身前往异地的伪单身们应该感受会更加强烈。在“家”的城市里的温暖，为了追逐自己的梦想消失了，为了梦想，妥协的不只是自己的那份还有属于家人的那份温暖。所以，我们既然为了梦想放弃了这么多，有什么理由不加倍努力呢。</p><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>选择，每个人这辈子都会经历各种各样的选择。电影中，用一些表现形式，让大家可以看到主角们不同选择所后续形成的生活轨迹。这点让我回忆起凯奇的《居家男人》，不过结局不同，居家男人的凯奇最后还有再选择的机会与命运，而塞巴斯蒂安则选择了祝福、接受以及把那份对米娅的爱深深藏在心里。</p><p>选择，有的时候就是这样，你不选择永远不知道什么才是你想要的。但一定要知道哪些是不能割舍的，如果触碰了它，就没有选择的余地了。一旦失去了唾手可得的幸福，可能想要再追逐回来就太难了或者也许已经不可能了吧。我想塞看到米娅身边的人，内心想了很多，米娅已经有了自己新的生活，有了身边这个同样爱她的人，也许也已经有了一个完整的家庭，从米娅临走时的微笑，他确认到了这一点，那么这也是他想要给米娅带来的幸福，所以他的内心也就坦然接受了现实。</p><p>选择过了，那么就要为自己的选择负责。如果选择是错误的，可以尝试努力追回，但不要影响这个世界的轨迹。</p><h3 id="一种“真爱”的诠释"><a href="#一种“真爱”的诠释" class="headerlink" title="一种“真爱”的诠释"></a>一种“真爱”的诠释</h3><p>命运之神有时候就是那么喜欢开玩笑，有时候硬把两个毫不相干的人拽在一起，想不在一起都不行，然后却又会突然切断这份羁绊。</p><p>塞对米娅的爱是毋庸置疑的，就像他为米娅一直弹奏的那首钢琴曲，一直没有变。我觉得其实米娅最后没有选择跟塞在一起其实也是电影在映射现实。现实就是这样，唯一不变的就是变化，正是有了这些偶然才构成了生活。但从米娅对塞的回笑，可以感受到米娅还深爱着塞，但是生活还是要继续下去。</p><p>爱一个人，要去从内心支持对方的梦想，允许对方的偶尔发泄，毕竟我们都是人，都会有各种感情，就像哈佛幸福课中Tal所说的Permision to be human。爱一个人，要学会接受对方的选择，如果对方是幸福的，如果不能相守，也要释然的祝福它。</p><h3 id="生活与幸福"><a href="#生活与幸福" class="headerlink" title="生活与幸福"></a>生活与幸福</h3><p>生活代表着变化与偶然，而幸福则属于积极心理学的范畴，关于幸福感兴趣可以尝试听一下哈佛幸福课。</p><p>追逐梦想是幸福的，电影最后，可以说塞和米娅的梦想都实现了，但是属于他们之间的幸福却失去了。前面是幸福的范畴，后面是生活的范畴。</p><p>生活中的有些幸福，往往跟物质生活是无关的（当然要满足基本的物质需求）。就像塞跟米娅相爱之初，他们像一般情侣一样，天天黏在一起是幸福的。但是塞为了支持米娅的梦想，去接受乐队的工作，聚少离多的日子，他们的生活轨迹开始出现岔路，幸福也在悄然变化。</p><p>有时候幸福悄悄的藏了起来，不易发现，要去找到它，并把它与自己的梦想系在一起，因为可能不经意间割舍掉的幸福说不定就是自己梦想的最终故里。</p><h2 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h2><p>挺好的一部电影，好久没有这种抑制不住情感的时刻，也许跟自己当下的生活相关吧。追逐梦想，珍视幸福，不要让它们在你的指尖溜走。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一部好电影，总是能触响你内心的共鸣，爱乐之城就是这样一部好电影。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;好电影应该包含什么&quot;&gt;&lt;a href=&quot;#好电影应该包含什么&quot; class=&quot;headerlink&quot; title=&quot;好电影应该包含
      
    
    </summary>
    
      <category term="影评" scheme="/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
  </entry>
  
  <entry>
    <title>哈佛幸福课小结</title>
    <link href="/2017/02/12/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE%E5%B0%8F%E7%BB%93/"/>
    <id>/2017/02/12/哈佛幸福课小结/</id>
    <published>2017-02-12T12:22:35.000Z</published>
    <updated>2017-11-10T01:18:12.436Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>关于未来的一些梳理</title>
    <link href="/2017/02/12/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A2%B3%E7%90%86/"/>
    <id>/2017/02/12/关于未来的一些梳理/</id>
    <published>2017-02-12T12:08:20.000Z</published>
    <updated>2017-11-10T01:18:12.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>家人与朋友的支持是男人前行的永恒动力。新起点，新方向，杭州我来了。</p></blockquote><p><img src="http://of71dfqgz.bkt.clouddn.com/Alibaba%20App.png" alt="alibaba.com"></p><p>d</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;家人与朋友的支持是男人前行的永恒动力。新起点，新方向，杭州我来了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://of71dfqgz.bkt.clouddn.com/Alibaba%20App.png&quot; alt=&quot;al
      
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>2016</title>
    <link href="/2016/12/30/2016/"/>
    <id>/2016/12/30/2016/</id>
    <published>2016-12-30T07:24:57.000Z</published>
    <updated>2017-11-10T01:18:12.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>眼睛一闭一睁，2016就这样过去了</p></blockquote><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul><li>私有pod库封装实践<ul><li>简介：<a href="http://alithink.com/2016/06/04/cocoapods%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B0%81%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="external">cocoapods私有仓库封装过程中的思考</a></li><li>功能性封装</li><li>业务型封装</li></ul></li><li>纯Swift开发项目<ul><li>入门：<ul><li>猫神的swift 100 tips</li><li>raywenderlich的swift 学徒</li></ul></li><li>进阶：swift进阶</li><li>实践：TFA、HBI企业项目实践<ul><li><a href="http://alithink.com/2016/06/28/BI%20APP%E5%9B%BE%E5%BD%A2%E5%BA%93%E9%80%89%E5%9E%8B/" target="_blank" rel="external">BI App图形库选型</a></li><li><a href="http://alithink.com/2016/07/25/Charts%E8%AF%8A%E7%96%97%E6%97%A5%E5%BF%97/" target="_blank" rel="external">Charts诊疗日志</a></li></ul></li></ul></li><li>体验watchOS开发<ul><li>简介：<a href="http://alithink.com/2016/11/15/Focus/" target="_blank" rel="external">Focus</a></li><li>成果：Focus App开发与上线</li></ul></li><li>认真梳理了iOS的知识体系<ul><li>额。。发现打印出来可以当桌布或者鼠标垫了。。略大</li></ul></li><li>探索的方向：<ul><li>前端<ul><li>vuejs =&gt; weex<ul><li>个人观点仅从语言层面来说感觉weex有点滞后了</li></ul></li><li>认认真真从基础梳理下前端知识<ul><li>推荐书籍：The Big Nerd Ranch的Front-End Web Development</li></ul></li></ul></li><li>微信小程序<ul><li>早期实践了一波</li><li>1月9日正式上线敬请期待</li></ul></li></ul></li></ul><blockquote><p>2017：</p><ul><li>iOS技术深入，探求世界的真相（OC + Swift）</li><li>看好前端方向，持续学习</li></ul></blockquote><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li>认认真真的重新搞起了博客<ul><li>hexo + next + (github &amp;&amp; coding)</li></ul></li><li>从今年5月份开始共计18篇文章</li><li>有几篇同步到简书和CocoaChina，有幸得到推荐^_^</li></ul><blockquote><p>2017：先立一个flag，保证平均一周一篇吧</p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul><li>自学：没人能控制得了你，除了你自己</li><li>学习路径：（以iOS为例）<ul><li>官方资源：<ul><li>开发文档与设计指南</li><li>WWDC</li><li>demo</li></ul></li><li>优秀三方：<ul><li>书籍：钟爱于以实例为引导的阅读方式<ul><li>objc相关（中文翻译水准不错）</li><li>Raywenderlich</li><li>the big nerd ranch</li><li>相关优秀源码</li></ul></li></ul></li><li>Feeds：<ul><li>大牛们的精品博客文章</li><li>社区的技术分享：最近比较多的微信分享效果也还是不错的</li></ul></li><li>分享：<ul><li>写博客</li><li>开源社区分享</li></ul></li><li>实践：<ul><li>开源小项目</li><li>上架小App（不求money，但求memory）</li></ul></li><li>学习小技巧<ul><li>遵从记忆曲线，时而停下来，闭上眼睛，回忆一下，效果更佳</li><li>擅用思维导图：<ul><li>越是一头雾水，越能拨云见日</li><li>知识串起来，更利于关联记忆</li></ul></li><li>学习没动力的时候怎么办？<ul><li>如何为家人带来更好的生活，只能自己更加的努力。（想一下自己闺女那可爱的脸庞^_^）</li><li>培养兴趣，建立成长的信心</li><li>推荐一个视频课程：网易公开课《哈弗幸福课》</li><li>其他各种鸡汤，ted啥的</li></ul></li><li>好好锻炼身体</li></ul></li></ul></li></ul><h3 id="败家"><a href="#败家" class="headerlink" title="败家"></a>败家</h3><ul><li>2016 MacBook Pro 13 with touchbar</li><li>Apple Watch Series2</li><li>v500 =&gt; ikbc</li><li>小米全家桶（箱包、移动电源、插排、路由器、净化器、手环、耳机、电池、口罩、笔、各种线材…）</li><li>手串（小叶紫檀、白玉菩提、黄檀、黑檀、金丝楠…）</li><li>其他各种乱七八糟落地吃灰的东东</li></ul><blockquote><p>PS：兴奋之余需节制，节制，节制，节制。。。</p><p>2017：极简消费，东西在精不在多。。。</p></blockquote><h3 id="家人"><a href="#家人" class="headerlink" title="家人"></a>家人</h3><p>最后也是最重要的，感谢家人这一年对我工作学习的支持。</p><p>家人的支持是男人前行的永恒动力。</p><blockquote><p>2017：认认真真工作，好好锻炼身体，结识各路朋友，悉心珍爱家人</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;眼睛一闭一睁，2016就这样过去了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;技术&quot;&gt;&lt;a href=&quot;#技术&quot; class=&quot;headerlink&quot; title=&quot;技术&quot;&gt;&lt;/a&gt;技术&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;私有pod库封装实践&lt;u
      
    
    </summary>
    
      <category term="回忆录" scheme="/categories/%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Focus</title>
    <link href="/2016/11/15/Focus/"/>
    <id>/2016/11/15/Focus/</id>
    <published>2016-11-15T03:15:14.000Z</published>
    <updated>2017-11-10T01:18:12.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Focus一次探索watchOS的实践。再次慨叹下Apple的审核速度，just one day…</p></blockquote><h2 id="Focus-有些事情需要这份执着"><a href="#Focus-有些事情需要这份执着" class="headerlink" title="Focus - 有些事情需要这份执着"></a>Focus - 有些事情需要这份执着</h2><p>人这一辈子总有一些一定要去做必须要去体验的东西。</p><p>对于这些事物的追求需要这份执念。</p><p>Focus帮助我们专注于做最重要的事情，给她一个期限，可能是一两年，也可能只有几天或者几小时，总之一旦决定拥有她，那么中途就不要背弃她。</p><p>人这一辈子不要过得太复杂，专注于现在，执着于每次的努力，当回看过往，必将为自己而骄傲。</p><blockquote><p>Focus App Store：<a href="https://itunes.apple.com/us/app/focus-concentrate-on-one-task/id1169917639" target="_blank" rel="external">传送门</a></p></blockquote><h2 id="Focus长什么样"><a href="#Focus长什么样" class="headerlink" title="Focus长什么样"></a>Focus长什么样</h2><p><img src="http://of71dfqgz.bkt.clouddn.com/focus_appstore.png" alt="focus_appstore.png"></p><h2 id="Focus参数"><a href="#Focus参数" class="headerlink" title="Focus参数"></a>Focus参数</h2><ul><li>Language: pure Swift3</li><li>Support: iOS9+、watchOS3.0+（包含Complication、WatchConnectivity）</li><li>Vender: Realm(iOS、watchOS)、DCPathButton、IQKeyboardManagerSwift、SCLAlertView、SnapKit</li><li>OpenSource：梳理完毕后开源</li></ul><h2 id="为什么要做这么个App"><a href="#为什么要做这么个App" class="headerlink" title="为什么要做这么个App"></a>为什么要做这么个App</h2><p>Apple发布了新款的Apple Watch Series2，之前一直想涉足watchOS的领域，一看设备更新了就赶紧入手了一款。这么贵的东东，不开发点东西感觉对不起自己花出去的银子。于是在认真体验了一段时间后，进行了以下产品思考:</p><p><img src="http://of71dfqgz.bkt.clouddn.com/aw_mind.png" alt="aw_mind.png"></p><p>最后决定先尝试制作一款GTD类APP，跟其它同质App的区别呢就在于只关注于一件事情的实现引导。提供的Apple Watch端App包含了几乎所有iOS端的功能，同时结合Complication可以将Focus的精简信息展现到表盘中。利用Apple Watch的贴近特点，进行一些轻度提醒。（说不定过段时间可能会搞一下那个偷偷录音的APP ^_^）</p><h2 id="Focus让我了解了什么"><a href="#Focus让我了解了什么" class="headerlink" title="Focus让我了解了什么"></a>Focus让我了解了什么</h2><h3 id="1-Swift3"><a href="#1-Swift3" class="headerlink" title="1. Swift3"></a>1. Swift3</h3><p>Swift3更新以来，还没有将原有的swift2项目进行迁移，正好拿个人项目进行了实践。</p><p>综合体会就是更加优雅简洁了，这里就不展开描述了。推荐几个不错的教程，首先是官方文档，然后有猫神的《Swifter - <em>100</em> 个 <em>Swift</em> 必备 <em>tips</em>》（买的正版，动态更新为了swift3的版本）,还有raywenderlich swift相关教程也在第一时间更新为了swift3版本。</p><h3 id="2-watchOS-3-0"><a href="#2-watchOS-3-0" class="headerlink" title="2. watchOS 3.0"></a>2. watchOS 3.0</h3><p>初涉watch SDK，现在的感觉是相较iOS SDK各有优劣，不过watch SDK的劣势多了一些。</p><h4 id="几个小例子："><a href="#几个小例子：" class="headerlink" title="几个小例子："></a>几个小例子：</h4><ul><li>table这一块，watchOS的处理会更“简约”一些，没有这么多的数据代理，转而采用了配置方法的调用，初始化配置更集中了。这里也是针对watch的使用场景进行了SDK层面的精简优化。</li><li>自带一个计时性质的文本控件date、timer，一般的场景只需要简单配置就可以使用了（不过可定制项比较有限，Focus中为了统一，还是改为自己实现一个倒计时）</li><li>感觉watchOS中的picker就是一个噩梦。。。，官方是没有提供watchOS版本的日期选择器的，所以需要自己用picker进行组装，里面好多坑，这块等开源后感兴趣的同学可以参考下。</li><li>关于控件封装，原本搞完了watchOS版本的日期选择器是打算抽离封装一下的，但是发现watchOS的控件封装真的没有太好的途径，总不能把一个controller分享出来吧。。。（虽然github上有人这么搞）</li></ul><h4 id="几个建议："><a href="#几个建议：" class="headerlink" title="几个建议："></a>几个建议：</h4><ul><li><p>将iOS与watchOS的公用模块提取为单独的framework方便复用。</p></li><li><p>iOS与watchOS的数据同步通过WatchConnectivity，由于一些技术文章的更新缓慢，其中介绍的appgroup方式其实已经不适用了（被坑了一轮）。</p><p>同时建议除了配置自动的同步机制外，添加一个按钮触发的同步操作，以方便用户及时进行同步。例如Focus中当点击iPhone或者watch主页面中央的小漏斗时，会弹出同步提示窗口：</p><p><img src="http://of71dfqgz.bkt.clouddn.com/sync.PNG" alt="sync.PNG"></p></li><li><p>关于文本录入这块watchOS3已经可以使用presentTextInputController(withSuggestions:allowedInputMode:)了，弹出的输入模块可以进行语音录入，建议选择以及新更新的Scribble，也建议大家使用。（虽然中文的录入还是有点难用）</p></li></ul><h3 id="3-Realm"><a href="#3-Realm" class="headerlink" title="3. Realm"></a>3. Realm</h3><p>早就听说了realm的大名，一直想尝试一下，正好借助这个机会集成了进去。不过得出的结论是，其实就目前的realm而言，个人感觉不太适合用于watch相关的应用。主要原因就是库文件略大，watch应用四五十兆的应用大小限制，使得每一寸空间都显得特别珍贵（App Store审核的限制，其实相较Apple Watch的存储来说集成realm造成的空间占用还是可以接受的）。</p><h4 id="说说使用realm的几点感受"><a href="#说说使用realm的几点感受" class="headerlink" title="说说使用realm的几点感受:"></a>说说使用realm的几点感受:</h4><ul><li><p>用起来确实很爽，很容易上手，基本就是在操作对象，用过coredata的同学应该很习惯这种方式。</p></li><li><p>数据库版本迁移这块仔细一点也很容易搞定。</p></li><li><p>因为要同时集成iOS跟watchOS两个版本的realm所以不要将他们放在同一个项目文件夹下，分别创建文件夹添加引用。</p></li><li><p>官方的提供的run script：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash "$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;FRAMEWORKS_FOLDER_PATH&#125;/Realm.framework/strip-frameworks.sh"</span><br></pre></td></tr></table></figure><p>需要在iOS和watch extension的Build Phases中都要进行添加调用。（我就是因为没有在extension中添加调用导致模拟器真机运行正常，上传App Store却总是验证报错…）</p></li><li><p>对于添加了realm的watchOS项目建议打开bitcode，也是为了优化watch APP的体积。</p></li></ul><h3 id="4-“新”产品上线"><a href="#4-“新”产品上线" class="headerlink" title="4. “新”产品上线"></a>4. “新”产品上线</h3><p>好久没有完整的操作一遍应用的上线流程了，体会有几点：</p><ul><li>Xcode8.1的自动管理签名还是挺好用的，尚未发现问题。使用该配置后，记得Build Settings中Code Signing Identity的子选项都要配置为iOS Developer。</li><li>发现Certificate中添加了专门用于生成服务器推送证书的功能。（估计早就更新了，之前没在意）</li><li>新的itunes connect功能真的挺好用，相较原来的版本慢慢的幸福感。</li><li>慨叹下目前Apple的审核速度，真实快啊，上传到上架one day。</li></ul><h2 id="可利用的资源"><a href="#可利用的资源" class="headerlink" title="可利用的资源"></a>可利用的资源</h2><ul><li><a href="https://developer.apple.com/watchos/resources/" target="_blank" rel="external">watchOS官方资源（包括Human Interface Guidelines、App Programming Guide for watchOS 等)</a></li><li><a href="https://developer.apple.com/swift/resources/" target="_blank" rel="external">swift官方资源</a></li><li><a href="https://www.raywenderlich.com/" target="_blank" rel="external">Raywenderlich</a></li><li><a href="https://onevcat.com/2015/08/watchos2/" target="_blank" rel="external">猫神相关文章(虽然是watchOS 2的，但是很受用)</a></li><li>图形素材：<a href="http://www.dribbble.com/" target="_blank" rel="external">dribbble(寻找创意)</a>、<a href="http://www.easyicon.net/" target="_blank" rel="external">easyicon(图标)</a>、<a href="http://makeappicon.com/" target="_blank" rel="external">MakeAppIcon(iPhone App图标与watch App图标生成)</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Focus会持续更新，目前主要解决了我自己的一些痛点，希望她也能够帮助到你。如果有什么好的建议欢迎留言讨论。Watch中的App种类确实很有限，不像iOS的这么丰富，有好的产品创意也欢迎一起讨论。watchOS 3.0的更新让Apple Watch焕发了新的生机，有了不少新的可能，让我们一起把我们的Apple Watch丰富起来吧^_^。</p><p>最后附上50个促销代码，感兴趣的同学可以下载使用。</p><p><a href="http://of71dfqgz.bkt.clouddn.com/Focus%E5%85%8D%E8%B4%B9%E7%A0%81.txt" target="_blank" rel="external">促销码传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Focus一次探索watchOS的实践。再次慨叹下Apple的审核速度，just one day…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Focus-有些事情需要这份执着&quot;&gt;&lt;a href=&quot;#Focus-有些事情需要这份执着&quot; cl
      
    
    </summary>
    
      <category term="个人作品" scheme="/categories/%E4%B8%AA%E4%BA%BA%E4%BD%9C%E5%93%81/"/>
    
    
  </entry>
  
  <entry>
    <title>next、空白与404</title>
    <link href="/2016/11/14/next%E4%B8%8E404/"/>
    <id>/2016/11/14/next与404/</id>
    <published>2016-11-14T08:24:13.000Z</published>
    <updated>2017-11-10T01:18:12.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有没有发现最近github pages访问特别慢，是不是发现自己挂在github pages上的东东变成一片空白啦，那么这篇文章也许能帮助到你。</p></blockquote><h2 id="Github-pages访问速度慢"><a href="#Github-pages访问速度慢" class="headerlink" title="Github pages访问速度慢"></a>Github pages访问速度慢</h2><p>也不知道是不是美国大选的原因（胡诌模式），最近自己挂在github pages上面的博客访问速度特别慢。解决方案大致搜了下，还是选择一个国内的pages服务靠谱一些，毕竟不是自己的服务器，可以控制的东西确实有限。</p><p>那么国内提供这种服务的自然就想到了coding。</p><p>至于coding里面如何搭建pages服务就不再冗述了，网上的文章一大把，只在这里标记几个特别点的小坑：</p><ul><li>建pages的项目名一定要跟coding用户名同名。</li><li>开始部署pages服务时，项目分支一定要写对（额。。默认的跟填充的名字竟然不是主分支。。。）。</li></ul><p>剩下的呢，基本就是对于域名的处理了，对于同一个CNAME分别创建默认线路跟海外线路两条解析，默认的对应到coding的pages服务地址，海外的对应github的pages服务地址即可。</p><h2 id="页面好白好白"><a href="#页面好白好白" class="headerlink" title="页面好白好白"></a>页面好白好白</h2><p>突然间自己的博客变成了一大片空白，赶紧打开开发者工具看了下，发现有好多vender下面的js、css都加载不出来了。。。</p><p>稍微研究了一下，原来是github pages的jekyll新版本会忽略掉vender目录。然后看了下next的更新，其实新版的next（5.1.0）已经对于这种情况进行了处理，将原有vender目录下的东东迁移到了lib目录。那么按说问题应该解决了，于是赶紧下载了next最新的主题源码，将原有配置迁移好了之后，发布测试一看还是白花花的一片。WTF …</p><p>那么记录下这里的坑:</p><ul><li><p>新版本的next虽然修复了这个问题，但是主题配置文件里面的vender默认路径依然没有指向lib，于是果断修改，问题解决。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">vendors:</span></span><br><span class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></span><br><span class="line">  <span class="symbol">_internal:</span> lib</span><br></pre></td></tr></table></figure></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经此一役，问题就应该都解决了，继续码字吧，骚年们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有没有发现最近github pages访问特别慢，是不是发现自己挂在github pages上的东东变成一片空白啦，那么这篇文章也许能帮助到你。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Github-pages访问速度慢&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="疑难杂症" scheme="/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
  </entry>
  
  <entry>
    <title>小试设计</title>
    <link href="/2016/10/17/%E5%B0%8F%E8%AF%95%E8%AE%BE%E8%AE%A1/"/>
    <id>/2016/10/17/小试设计/</id>
    <published>2016-10-17T13:34:27.000Z</published>
    <updated>2017-11-10T01:18:12.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>公司的产品兄弟走了，有需求，只能自己操刀了。</p><p>Sketch的综合体验还是很不错的，功能发现自然流畅，没有看过教程，也能无阻碍的进行设计。</p></blockquote><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><img src="http://of71dfqgz.bkt.clouddn.com/1111small.png" alt="双十一"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>大致划分展示区域：上部为纯数据点展示；下部为图形图表。</li><li>背景高斯模糊用于进行模块划分。</li><li>对于基础色的选择，以及字号的梳理，让页面不会显得特别凌乱。</li><li>PC端、移动端的风格统一化。</li><li>内容导向，拒绝杂乱的背景。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;公司的产品兄弟走了，有需求，只能自己操刀了。&lt;/p&gt;
&lt;p&gt;Sketch的综合体验还是很不错的，功能发现自然流畅，没有看过教程，也能无阻碍的进行设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;成果&quot;&gt;&lt;a href=&quot;#成果&quot; clas
      
    
    </summary>
    
      <category term="sketch" scheme="/categories/sketch/"/>
    
    
  </entry>
  
  <entry>
    <title>学做父亲</title>
    <link href="/2016/10/16/%E5%AD%A6%E5%81%9A%E7%88%B6%E4%BA%B2/"/>
    <id>/2016/10/16/学做父亲/</id>
    <published>2016-10-16T14:05:51.000Z</published>
    <updated>2017-11-10T01:18:12.436Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近看了本书，孙云晓的《好好做父亲》，书中的几个原则比较有指导意义，罗列出来，各位爸爸学徒们一起努力吧^_^</p></blockquote><h3 id="重要原则"><a href="#重要原则" class="headerlink" title="重要原则"></a>重要原则</h3><p>在家庭关系中，不宜把亲子关系放在第一位，而应该是夫妻关系第一，亲子关系第二。因为，夫妻关系的稳定最有利于孩子健康成长。</p><h3 id="好父亲的8种品质"><a href="#好父亲的8种品质" class="headerlink" title="好父亲的8种品质"></a>好父亲的8种品质</h3><ol><li>认真负责</li><li>意志坚定</li><li>勇敢独立</li><li>目光远大，影响孩子作出积极的人生选择</li><li>是非分明</li><li>胸怀宽广，富有包容精神</li><li>勤劳自律</li><li>爱好运动，父亲是孩子最好的教练</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近看了本书，孙云晓的《好好做父亲》，书中的几个原则比较有指导意义，罗列出来，各位爸爸学徒们一起努力吧^_^&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;重要原则&quot;&gt;&lt;a href=&quot;#重要原则&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="鸡汤乱炖" scheme="/categories/%E9%B8%A1%E6%B1%A4%E4%B9%B1%E7%82%96/"/>
    
    
  </entry>
  
  <entry>
    <title>AFNetworking源码拾遗</title>
    <link href="/2016/09/12/AFNetworking%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/"/>
    <id>/2016/09/12/AFNetworking源码拾遗/</id>
    <published>2016-09-12T01:47:29.000Z</published>
    <updated>2017-11-10T01:18:12.432Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一句话简介：最著名的OC开源网络库。</p><p>Github: <a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="external">传送门</a></p><p>PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p></blockquote><h3 id="1-import和modulemap"><a href="#1-import和modulemap" class="headerlink" title="1. @import和modulemap"></a>1. @import和modulemap</h3><p>首先OC中的@import以及Swift中的import其实都是基于modulemap实现的。</p><ul><li>@import的使用可以参考：<a href="http://stackoverflow.com/questions/18947516/import-vs-import-ios-7" target="_blank" rel="external">@import vs #import</a></li><li>关于modulemap相关的内容可以参考：<a href="http://nsomar.com/modular-framework-creating-and-using-them/" target="_blank" rel="external">Modular framework, creating and using them</a></li></ul><h3 id="2-各种标记"><a href="#2-各种标记" class="headerlink" title="2. 各种标记"></a>2. 各种标记</h3><ul><li>__unused: 避免因变量声明未使用造成的警告。</li><li>ARC相关（如__autoreleasing）参考: <a href="http://www.cnblogs.com/flyFreeZn/p/4264220.html" target="_blank" rel="external">iOS开发ARC内存管理技术要点</a></li><li>NS_DESIGNATED_INITIALIZER 声明了designated初始化方法后，其余初始化方法如果没有调用designated初始化会有警告提示，具体可以参考: <a href="http://useyourloaf.com/blog/xcode-6-objective-c-modernization/" target="_blank" rel="external">Xcode 6 Objective-C Modernization</a> </li><li>DEPRECATED_ATTRIBUTE（过期）、NS_SWIFT_NOTHROW（一些便于OC迁移Swift的标记）等</li></ul><h3 id="3-宏"><a href="#3-宏" class="headerlink" title="3. 宏"></a>3. 宏</h3><ul><li>FOUNDATION_EXPORT: 对于extern的兼容性封装，根据不同的平台，转化为对应的extern形式。</li><li>NS_ASSUME_NONNULL_BEGIN、NS_ASSUME_NONNULL_END: 在宏范围内的变量、参数、返回值等都默认添加nonnull。</li></ul><h3 id="4-queryString转换的经典代码"><a href="#4-queryString转换的经典代码" class="headerlink" title="4. queryString转换的经典代码"></a>4. queryString转换的经典代码</h3><p>经常被摘出来放到自己项目中使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> Returns a percent-escaped string following RFC 3986 for a query string key or value.</span><br><span class="line"> RFC 3986 states that the following characters are &quot;reserved&quot; characters.</span><br><span class="line">    - General Delimiters: &quot;:&quot;, &quot;#&quot;, &quot;[&quot;, &quot;]&quot;, &quot;@&quot;, &quot;?&quot;, &quot;/&quot;</span><br><span class="line">    - Sub-Delimiters: &quot;!&quot;, &quot;$&quot;, &quot;&amp;&quot;, &quot;&apos;&quot;, &quot;(&quot;, &quot;)&quot;, &quot;*&quot;, &quot;+&quot;, &quot;,&quot;, &quot;;&quot;, &quot;=&quot;</span><br><span class="line"></span><br><span class="line"> In RFC 3986 - Section 3.4, it states that the &quot;?&quot; and &quot;/&quot; characters should not be escaped to allow</span><br><span class="line"> query strings to include a URL. Therefore, all &quot;reserved&quot; characters with the exception of &quot;?&quot; and &quot;/&quot;</span><br><span class="line"> should be percent-escaped in the query string.</span><br><span class="line">    - parameter string: The string to be percent-escaped.</span><br><span class="line">    - returns: The percent-escaped string.</span><br><span class="line"> */</span><br><span class="line">NSString * AFPercentEscapedStringFromString(NSString *string) &#123;</span><br><span class="line">    static NSString * const kAFCharactersGeneralDelimitersToEncode = @&quot;:#[]@&quot;; // does not include &quot;?&quot; or &quot;/&quot; due to RFC 3986 - Section 3.4</span><br><span class="line">    static NSString * const kAFCharactersSubDelimitersToEncode = @&quot;!$&amp;&apos;()*+,;=&quot;;</span><br><span class="line"></span><br><span class="line">    NSMutableCharacterSet * allowedCharacterSet = [[NSCharacterSet URLQueryAllowedCharacterSet] mutableCopy];</span><br><span class="line">    [allowedCharacterSet removeCharactersInString:[kAFCharactersGeneralDelimitersToEncode stringByAppendingString:kAFCharactersSubDelimitersToEncode]];</span><br><span class="line"></span><br><span class="line">// FIXME: https://github.com/AFNetworking/AFNetworking/pull/3028</span><br><span class="line">    // return [string stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</span><br><span class="line">    // 以下为针对非单字节字符的处理</span><br><span class="line">  </span><br><span class="line">    static NSUInteger const batchSize = 50;</span><br><span class="line"></span><br><span class="line">    NSUInteger index = 0;</span><br><span class="line">    NSMutableString *escaped = @&quot;&quot;.mutableCopy;</span><br><span class="line"></span><br><span class="line">    while (index &lt; string.length) &#123;</span><br><span class="line">        NSUInteger length = MIN(string.length - index, batchSize);</span><br><span class="line">        NSRange range = NSMakeRange(index, length);</span><br><span class="line"></span><br><span class="line">        // To avoid breaking up character sequences such as 👴🏻👮🏽</span><br><span class="line">        range = [string rangeOfComposedCharacterSequencesForRange:range];</span><br><span class="line"></span><br><span class="line">        NSString *substring = [string substringWithRange:range];</span><br><span class="line">        NSString *encoded = [substring stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</span><br><span class="line">        [escaped appendString:encoded];</span><br><span class="line"></span><br><span class="line">        index += range.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">return escaped;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-架构简图"><a href="#5-架构简图" class="headerlink" title="5. 架构简图"></a>5. 架构简图</h3><p><img src="http://alithink.com/img/7afnetworking/afnetworking.png" alt="AFNetworking.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一句话简介：最著名的OC开源网络库。&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&quot;https://github.com/AFNetworking/AFNetworking&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;
      
    
    </summary>
    
      <category term="读过的源码" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>CTNetworking源码拾遗</title>
    <link href="/2016/09/05/CTNetworking%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/"/>
    <id>/2016/09/05/CTNetworking源码拾遗/</id>
    <published>2016-09-05T06:17:07.000Z</published>
    <updated>2017-11-10T01:18:12.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 一句话简介：CTNetworking为casa大神针对iOS网络层方案的一个架构实例。</p><p> 架构详解: <a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html" target="_blank" rel="external">传送门</a></p><p> Github: <a href="https://github.com/casatwy/RTNetworking" target="_blank" rel="external">传送门</a></p><p> PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p></blockquote><h3 id="1-宏相关"><a href="#1-宏相关" class="headerlink" title="1. 宏相关"></a>1. 宏相关</h3><ul><li><p>预防重复引入导致的重定义问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CTNetworking_CTNetworkingConfiguration_h</span><br><span class="line">#define CTNetworking_CTNetworkingConfiguration_h</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, CTAppType) &#123;</span><br><span class="line">    CTAppTypexxx</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">static NSString *CTKeychainServiceName = @&quot;xxxxx&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">extern NSString * const kCTServiceGDMapV3;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>CTNetworking_CTNetworkingConfiguration_h这块的命名没有什么特别的规范，往往是将点替换为下划线，开头添加一条下划线。（casa这里是在最前面又加了工程名，AFNetworking则是省略了扩展名）</p></li><li><p>巧妙的宏替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#define AXCallAPI(REQUEST_METHOD, REQUEST_ID)\</span><br><span class="line">&#123;\</span><br><span class="line">    __weak typeof(self) weakSelf = self;\</span><br><span class="line">    REQUEST_ID = [[CTApiProxy sharedInstance] call##REQUEST_METHOD##WithParams:apiParams serviceIdentifier:self.child.serviceType methodName:self.child.methodName success:^(CTURLResponse *response) &#123;\</span><br><span class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;\</span><br><span class="line">        [strongSelf successedOnCallingAPI:response];\</span><br><span class="line">    &#125; fail:^(CTURLResponse *response) &#123;\</span><br><span class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;\</span><br><span class="line">        [strongSelf failedOnCallingAPI:response withErrorType:CTAPIManagerErrorTypeDefault]; \</span><br><span class="line">    &#125;];\</span><br><span class="line">    [self.requestIdList addObject:@(REQUEST_ID)];\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过##REQUEST_METHOD##包裹的变量将进行宏替换，进而达到根据约定区分方法调用的目的</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-UDID"><a href="#2-UDID" class="headerlink" title="2. UDID"></a>2. UDID</h3><p>常规的UUID+keychain的策略：</p><ul><li><p>创建</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)CT_createUUID</span><br><span class="line">&#123;</span><br><span class="line">    CFUUIDRef uuid = CFUUIDCreate(NULL);</span><br><span class="line">    CFStringRef string = CFUUIDCreateString(NULL, uuid);</span><br><span class="line">    CFRelease(uuid);</span><br><span class="line">    return (__bridge_transfer NSString *)string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>保存读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)saveUDID:(NSString *)udid</span><br><span class="line">&#123;</span><br><span class="line">    BOOL saveOk = NO;</span><br><span class="line">    NSData *udidData = [self searchKeychainCopyMatching:CTUDIDName];</span><br><span class="line">    if (udidData == nil) &#123;</span><br><span class="line">        saveOk = [self createKeychainValue:udid forIdentifier:CTUDIDName];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        saveOk = [self updateKeychainValue:udid forIdentifier:CTUDIDName];</span><br><span class="line">    &#125;</span><br><span class="line">    if (!saveOk) &#123;</span><br><span class="line">        [self createPasteBoradValue:udid forIdentifier:CTUDIDName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)UDID</span><br><span class="line">&#123;</span><br><span class="line">    NSData *udidData = [self searchKeychainCopyMatching:CTUDIDName];</span><br><span class="line">    NSString *udid = nil;</span><br><span class="line">    if (udidData != nil) &#123;</span><br><span class="line">        NSString *temp = [[NSString alloc] initWithData:udidData encoding:NSUTF8StringEncoding];</span><br><span class="line">        udid = [NSString stringWithFormat:@&quot;%@&quot;, temp];</span><br><span class="line">    &#125;</span><br><span class="line">    if (udid.length == 0) &#123;</span><br><span class="line">        udid = [self readPasteBoradforIdentifier:CTUDIDName];</span><br><span class="line">    &#125;</span><br><span class="line">    return udid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-内存管理权转移标记"><a href="#3-内存管理权转移标记" class="headerlink" title="3. 内存管理权转移标记"></a>3. 内存管理权转移标记</h3><ul><li>__bridge: 不涉及管理所有权的转移。</li><li>__bridge_transfer: CF对象转成OC对象时，顺便交出内存管理权。（ARC）</li><li>__bridge_retained: OC对象转成CF对象时，顺便交出内存管理权。（CFRelease(xxx)）</li></ul><h3 id="4-DECORATOR-PATTERN小解"><a href="#4-DECORATOR-PATTERN小解" class="headerlink" title="4. DECORATOR PATTERN小解"></a>4. DECORATOR PATTERN小解</h3><p><img src="http://alithink.com/img/6ctnetworking/decorator.jpg" alt="decorator.png"></p><p>适用场景：</p><ul><li><p>在不影响其他对象的情况下,以动态、透明的方式给单个对象添加职责。</p></li><li><p>处理那些可以撤消的职责。</p></li><li><p>当不能采用生成子类的方法进行扩充时。一种情况是,可能有大量独立的扩展,为支持每一种组合将产生大量的子类,使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏,或类定义不能用于生成子类。            </p><blockquote><p> 一个专门讲解OC设计模式的开源库—<a href="https://github.com/huang303513/Design-Pattern-For-iOS" target="_blank" rel="external">传送门</a>        </p></blockquote></li></ul><h3 id="5-闭包的三元操作"><a href="#5-闭包的三元操作" class="headerlink" title="5. 闭包的三元操作"></a>5. 闭包的三元操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fail?fail(CTResponse):nil</span><br></pre></td></tr></table></figure><h3 id="6-封装一个统一的空值处理"><a href="#6-封装一个统一的空值处理" class="headerlink" title="6. 封装一个统一的空值处理"></a>6. 封装一个统一的空值处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;NSObject+AXNetworkingMethods.h&quot;</span><br><span class="line">@implementation NSObject (AXNetworkingMethods)</span><br><span class="line"></span><br><span class="line">- (id)CT_defaultValue:(id)defaultData</span><br><span class="line">&#123;</span><br><span class="line">    if (![defaultData isKindOfClass:[self class]]) &#123;</span><br><span class="line">        return defaultData;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self CT_isEmptyObject]) &#123;</span><br><span class="line">        return defaultData;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)CT_isEmptyObject</span><br><span class="line">&#123;</span><br><span class="line">    if ([self isEqual:[NSNull null]]) &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">        if ([(NSString *)self length] == 0) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">        if ([(NSArray *)self count] == 0) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">        if ([(NSDictionary *)self count] == 0) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>如果要是Swift的话其实就不用这么搞啦^_^</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optionalVarA ?? <span class="string">"为空的时候我就派上用场啦"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 一句话简介：CTNetworking为casa大神针对iOS网络层方案的一个架构实例。&lt;/p&gt;
&lt;p&gt; 架构详解: &lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-cen
      
    
    </summary>
    
      <category term="读过的源码" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>CTMediator源码拾遗</title>
    <link href="/2016/09/01/CTMediator%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/"/>
    <id>/2016/09/01/CTMediator源码拾遗/</id>
    <published>2016-09-01T02:13:59.000Z</published>
    <updated>2017-11-10T01:18:12.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一句话简介：CTMediator为casa大神针对iOS组件化方案的一个架构实例。</p><p>架构详解: <a href="http://casatwy.com/iOS-Modulization.html" target="_blank" rel="external">传送门</a></p><p>Github: <a href="https://github.com/casatwy/CTMediator" target="_blank" rel="external">传送门</a></p><p>PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p></blockquote><h3 id="1-UIViewController常用分段"><a href="#1-UIViewController常用分段" class="headerlink" title="1. UIViewController常用分段"></a>1. UIViewController常用分段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - life cycle</span><br><span class="line">#pragma mark - UITableViewDelegate</span><br><span class="line">#pragma mark - CustomDelegate</span><br><span class="line">#pragma mark - event response</span><br><span class="line">#pragma mark - private methods</span><br><span class="line">#pragma mark - getters and setters</span><br></pre></td></tr></table></figure><p>这里有个争论就是关于是不是应该将属性实例的初始化放在getter中，这里个人倾向于casa的做法（放在getter中），所以贴一下相关的解释：</p><blockquote><p>我比较习惯一个对象的”私有”属性写在extension里面，然后这些属性的初始化全部放在getter里面做，在init和dealloc之外，是不会出现任何类似<code>_property</code>这样的写法的。</p><p>唐巧说他喜欢的做法是用<code>_property</code>这种，然后关于<code>_property</code>的初始化通过<code>[self setupProperty]</code>这种做法去做。从刚才上面的代码来看，就是要在viewDidLoad里面多调用一个setup方法而已，然后我推荐的方法就是不用多调一个setup方法，直接走getter。</p><p>嗯，怎么说呢，其实两种做法都能完成需求。但是从另一个角度看，苹果之所以选择让<code>[self getProperty]</code>和<code>self.property</code>可以互相通用，这种做法已经很明显地表达了苹果的倾向：<code>希望每个property都是通过getter方法来获得</code>。</p><p>早在2003年，Allen Holub就发了篇文章《<a href="http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html" target="_blank" rel="external">Why getter and setter methods are evil</a>》，自此之后，业界就对此产生了各种争议，虽然是从Java开始说的，但是发展到后面各种语言也参与了进来。然后虽然现在关于这个问题讨论得少了，但是依旧属于没有定论的状态。setter的情况比较复杂，也不是我这一节的重点，我这边还是主要说getter。我们从objc的设计来看，苹果的设计者更加倾向于<code>getter is not evil</code>。</p><p>认为<code>getter is evil</code>的原因有非常之多，或大或小，随着争论的进行，大家慢慢就聚焦到这样的一个原因：<code>Getter和Setter提供了一个能让外部修改对象内部数据的方式，这是evil的，正常情况下，一个对象自己私有的变量应该是只有自己关心</code>。</p><p>然后我们回到iOS领域来，objc也同样面临了这样的问题，甚至更加严重：<code>objc并没有像Java那么严格的私有概念</code>。但在实际工作中，我们不太会去操作头文件里面没有的变量，这是从规范上就被禁止的。</p><p>认为<code>getter is not evil</code>的原因也可以聚焦到一个：<code>高度的封装性</code>。getter事实上是工厂方法，有了getter之后，业务逻辑可以更加专注于调用，而不必担心当前变量是否可用。我们可以想一下，假设一个ViewController有20个subview要加入view中，这20个subview的初始化代码是肯定逃不掉的，放在哪里比较好？放在哪里都比放在addsubview的地方好，我个人认为最好的地方还是放在getter里面，结合单例模式之后，代码会非常整齐，生产的地方和使用的地方得到了很好的区分。</p><p>所以放到iOS来说，我还是觉得使用getter会比较好，因为evil的地方在iOS这边基本都避免了，not evil的地方都能享受到，还是不错的。</p></blockquote><h3 id="2-应该在哪里配置View的位置？（-继续引用casa的原文）"><a href="#2-应该在哪里配置View的位置？（-继续引用casa的原文）" class="headerlink" title="2. 应该在哪里配置View的位置？（^_^继续引用casa的原文）"></a>2. 应该在哪里配置View的位置？（^_^继续引用casa的原文）</h3><ul><li><p>关于在哪儿写Constraints?</p><p>苹果在文档中指出，<code>updateViewConstraints</code>是用来做add constraints的地方。</p><p>但是在<a href="http://stackoverflow.com/questions/17497002/when-will-or-wont-updateviewconstraints-be-called-on-my-view-controller-for-m" target="_blank" rel="external">这里</a>有一个回答者说<code>updateViewConstraints</code>并不适合做添加Constraints的事情。</p><p>综合我自己和评论区各位关心这个问题的兄弟们的各种测试和各种文档，我现在觉得还是在<code>viewDidLoad</code>里面开一个layoutPageSubviews的方法，然后在这个里面创建Constraints并添加，会比较好。就是像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.firstView];</span><br><span class="line">    [self.view addSubview:self.secondView];</span><br><span class="line">    [self.view addSubview:self.thirdView];</span><br><span class="line"></span><br><span class="line">    [self layoutPageSubviews];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)layoutPageSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [self.view addConstraints:xxxConstraints];</span><br><span class="line">    [self.view addConstraints:yyyConstraints];</span><br><span class="line">    [self.view addConstraints:zzzConstraints];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生命周期方法选择</p><p>其实在viewWillAppear这里改变UI元素不是很可靠，Autolayout发生在viewWillAppear之后，严格来说这里通常不做视图位置的修改，而用来更新Form数据。改变位置可以放在viewWilllayoutSubview或者didLayoutSubview里，而且在viewDidLayoutSubview确定UI位置关系之后设置autoLayout比较稳妥。另外，viewWillAppear在每次页面即将显示都会调用，viewWillLayoutSubviews虽然在lifeCycle里调用顺序在viewWillAppear之后，但是只有在页面元素需要调整时才会调用，避免了Constraints的重复添加。</p></li></ul><h3 id="3-TableView-didSelect习惯"><a href="#3-TableView-didSelect习惯" class="headerlink" title="3. TableView didSelect习惯"></a>3. TableView didSelect习惯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 选择的开始先取消选择状态</span><br><span class="line">[tableView deselectRowAtIndexPath:indexPath animated:YES]</span><br></pre></td></tr></table></figure><h4 id="4-URL相关api"><a href="#4-URL相关api" class="headerlink" title="4. URL相关api"></a>4. URL相关api</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">NSMutableDictionary *params = [[NSMutableDictionary alloc] init];</span><br><span class="line"></span><br><span class="line">// 1. query: key1=value1&amp;key2=value2</span><br><span class="line">NSString *urlString = [url query];</span><br><span class="line"></span><br><span class="line">// 2. 解析参数</span><br><span class="line">for (NSString *param in [urlString componentsSeparatedByString:@&quot;&amp;&quot;]) &#123;</span><br><span class="line">    NSArray *elts = [param componentsSeparatedByString:@&quot;=&quot;];</span><br><span class="line">    if([elts count] &lt; 2) continue;</span><br><span class="line">    [params setObject:[elts lastObject] forKey:[elts firstObject]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3. path: /index.html</span><br><span class="line">NSString *actionName = [url.path stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;&quot;];</span><br><span class="line">if ([actionName hasPrefix:@&quot;native&quot;]) &#123;</span><br><span class="line">    return @(NO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-忽略不必要的警告⚠️"><a href="#5-忽略不必要的警告⚠️" class="headerlink" title="5. 忽略不必要的警告⚠️"></a>5. 忽略不必要的警告⚠️</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">        return [target performSelector:action withObject:params];</span><br><span class="line">#pragma clang diagnostic pop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一句话简介：CTMediator为casa大神针对iOS组件化方案的一个架构实例。&lt;/p&gt;
&lt;p&gt;架构详解: &lt;a href=&quot;http://casatwy.com/iOS-Modulization.html&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="读过的源码" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E6%BA%90%E7%A0%81/"/>
    
    
  </entry>
  
  <entry>
    <title>《函数式Swift》读书拾遗</title>
    <link href="/2016/08/16/%E3%80%8A%E5%87%BD%E6%95%B0%E5%BC%8FSwift%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8B%BE%E9%81%97/"/>
    <id>/2016/08/16/《函数式Swift》读书拾遗/</id>
    <published>2016-08-16T03:18:26.000Z</published>
    <updated>2017-11-10T01:18:12.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计良好的Swift函数式程序应该具有的一些特质：</p><ul><li>模块化</li><li>对可变状态的谨慎处理</li><li>类型</li></ul><blockquote><p>避免使用程序状态和可变对象，是降低程序复杂度的有效方式之一，而这也正是函数式编程的精髓。</p></blockquote><h3 id="函数式思想"><a href="#函数式思想" class="headerlink" title="函数式思想"></a>函数式思想</h3><h4 id="1-常规的重构思路"><a href="#1-常规的重构思路" class="headerlink" title="1. 常规的重构思路"></a>1. 常规的重构思路</h4><p>抽象实体，扩展方法，逻辑复杂之后抽象出辅助方法</p><h4 id="2-函数式"><a href="#2-函数式" class="headerlink" title="2. 函数式"></a>2. 函数式</h4><blockquote><p>函数式编程的核心理念就是函数是值。（因此函数的typealias的命名规则应与类、结构体相同）</p></blockquote><p>实例代码链式版本：</p><blockquote><p>这个例子是你在编写战舰类游戏时可能需要实现的一个核心函数。我们把将要看到的问题归结为,判断一个给定的点是否在射程范围内,并且距离友方船舶和我们自身都不太近。</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Distance</span> = <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minus</span><span class="params">(p: Position)</span></span> -&gt; <span class="type">Position</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Position</span>(x: x - p.x, y: y - p.y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> length: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(x * x + y * y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ship</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position: <span class="type">Position</span></span><br><span class="line">    <span class="keyword">var</span> firingRange: <span class="type">Distance</span></span><br><span class="line">    <span class="keyword">var</span> unsafeRange: <span class="type">Distance</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Region</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lookup: <span class="type">Position</span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Region</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">circle</span><span class="params">(redius: Distance)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> point.length &lt;= redius &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shift</span><span class="params">(offset: Position)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point.minus(offset)) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">invert</span><span class="params">()</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> !<span class="keyword">self</span>.lookup(point) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(region: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point) &amp;&amp; region.lookup(point) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">union</span><span class="params">(region: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point) || region.lookup(point) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">difference</span><span class="params">(minus: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.intersection(minus.invert())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Ship</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canSafelyEngageShip</span><span class="params">(target: Ship, friendly: Ship)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> unsafeRegion = <span class="type">Region</span>.circle(<span class="keyword">self</span>.unsafeRange)</span><br><span class="line">        <span class="keyword">let</span> maxfireRegion = <span class="type">Region</span>.circle(<span class="keyword">self</span>.firingRange)</span><br><span class="line">        <span class="keyword">let</span> rangeRegion = maxfireRegion.difference(unsafeRegion)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> firingRegion = rangeRegion.shift(position)</span><br><span class="line">        <span class="keyword">let</span> friendlyRegion = unsafeRegion.shift(friendly.position)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> resultRegion = firingRegion.difference(friendlyRegion)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resultRegion.lookup(target.position)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">2</span>, y: <span class="number">2</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> enemyShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">5</span>, y: -<span class="number">7</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> friendShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">5</span>, y: -<span class="number">5</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">myShip.canSafelyEngageShip(enemyShip, friendly: friendShip)</span><br></pre></td></tr></table></figure><h3 id="类型驱动开发"><a href="#类型驱动开发" class="headerlink" title="类型驱动开发"></a>类型驱动开发</h3><blockquote><p>函数生成器，生成预设参数的专用函数。</p></blockquote><p>一些优势：</p><ul><li>安全</li><li>模块化</li><li>清晰易懂</li></ul><p>柯里化带来的一些好处（重点在于统一类型）：</p><blockquote><p>按照柯里化⻛格来定义滤镜,我们可以很容易地使用 &gt;&gt;&gt; 运算符将它们进行组合。假如我们用这些函数未柯里化的版本来构建滤镜的话,虽然依然可以写出相同的滤镜,但是这些滤镜的类型将根据它们所接受的参数不同而略有不同。这样一来,想要为这些不同类型的滤镜定义一个统一的组合运算符就要比现在困难得多了。</p></blockquote><p>自己的感受就是利于统一类型，将额外的参数都包装在生成的函数中，只保留源作为参数，加工之后的结果作为输出，方便对于函数类型的抽象。</p><h3 id="Map、Filter和Reduce"><a href="#Map、Filter和Reduce" class="headerlink" title="Map、Filter和Reduce"></a>Map、Filter和Reduce</h3><blockquote><p>接受其它函数作为参数的函数有时被称为<em>高阶函数</em>。</p></blockquote><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">T</span>] = [] </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            result.append(transform(x))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由顶层函数转为了协议扩展，这样做的优点是自动补全更完善，暧昧的命名更少，以及（通常）代码结构更清晰。</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">Element</span>] = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> <span class="keyword">where</span> includeElement(x) &#123;</span><br><span class="line">            result.append(x) </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;T&gt;<span class="params">(initial: T, combine: <span class="params">(T, Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> result = initial <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            result = combine(result, x) </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用reduce实现map跟filter的版本</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapUsingReduce</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> result + [transform(x)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterUsingReduce</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> includeElement(x) ? result + [x] : result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型和Any类型"><a href="#泛型和Any类型" class="headerlink" title="泛型和Any类型"></a>泛型和Any类型</h4><blockquote><p>Any类型和泛型两者都能用于定义接受两个不同类型参数的函数。然而，理解两者之间的区别至关重要：泛型可以用于定义灵活的函数，类型检查仍然由编译器负责；而Any类型则可以避开Swift的类型系统（所以应该尽可能避免使用）。</p></blockquote><p>使用泛型允许你无需牺牲类型安全就能够在编译器的帮助下写出灵活的函数；如果使用Any类型，那你就真的孤立无援了。</p><h3 id="可选值"><a href="#可选值" class="headerlink" title="可选值"></a>可选值</h3><h4 id="？？操作符"><a href="#？？操作符" class="headerlink" title="？？操作符"></a>？？操作符</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> x <span class="keyword">operator</span>??</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: T)</span></span> -&gt; <span class="type">T</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">optional</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了避免defaultValue的无效求值</span></span><br><span class="line"><span class="keyword">in</span> x <span class="keyword">operator</span> ?? &#123; <span class="keyword">associativity</span> <span class="keyword">right</span> <span class="keyword">precedence</span> <span class="number">110</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, @autoclosure defaultValue: <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">optional</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分支上的可选值"><a href="#分支上的可选值" class="headerlink" title="分支上的可选值"></a>分支上的可选值</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//switch中的使用</span></span><br><span class="line"><span class="keyword">switch</span> madridPopulation &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>?: <span class="built_in">print</span>(<span class="string">"Nobody in Madrid"</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">1</span>..&lt;<span class="number">1000</span>)?: <span class="built_in">print</span>(<span class="string">"Less than a million in Madrid"</span>) </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">let</span> x): <span class="built_in">print</span>(<span class="string">"<span class="subst">\(x)</span> people in Madrid"</span>)</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">None</span>: <span class="built_in">print</span>(<span class="string">"We don't know about Madrid"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//guard中的使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">populationDescriptionForCity</span><span class="params">(city: String)</span></span> -&gt; <span class="type">String</span>? &#123; </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> population = cities[city] <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"The population of Madrid is <span class="subst">\(population * <span class="number">1000</span>)</span>"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选映射"><a href="#可选映射" class="headerlink" title="可选映射"></a>可选映射</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(transform: Wrapped -&gt; U)</span></span> -&gt; <span class="type">U</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> x = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> transform(x) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(f: Wrapped -&gt; U?)</span></span> -&gt; <span class="type">U</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> x = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> f(x) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="为什么使用可选值？"><a href="#为什么使用可选值？" class="headerlink" title="为什么使用可选值？"></a>为什么使用可选值？</h4><p>避免参数不合法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSParameterAssert(param);</span><br></pre></td></tr></table></figure><p>可选类型标识了失败的可能性，类型系统将有助于你捕捉难以察觉的错误。其中一些错误很容易在开发过程中被发现，但是其余的可能会一直留存到生产代码中去。坚持使用可选值能够从根本上杜绝这类错误。</p><h3 id="QuickCheck"><a href="#QuickCheck" class="headerlink" title="QuickCheck"></a>QuickCheck</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;设计良好的Swift函数式程序应该具有的一些特质：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;对可变状态的谨慎处理&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="读过的书" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS屏幕旋转那些事</title>
    <link href="/2016/08/01/iOS%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>/2016/08/01/iOS屏幕旋转那些事/</id>
    <published>2016-08-01T13:10:55.000Z</published>
    <updated>2017-11-10T01:18:12.434Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文屏幕旋转方案仅限于兼容iOS8+</p></blockquote><h3 id="1-从APP层次谈起"><a href="#1-从APP层次谈起" class="headerlink" title="1. 从APP层次谈起"></a>1. 从APP层次谈起</h3><p>APP常见的布局层次如下图所示：<br><img src="http://alithink.com/img/5rotate/app layer.png" alt="app layer.png"><br>当工程目标开启了多个屏幕方向之后，具体类中有关屏幕旋转的配置其实只与当前屏幕展示模块的最外层VC容器有关。<br>但由于往往存在容器中某些VC针对屏幕旋转的个性化配置，所以需要进行从里层VC到外层容器的旋转状态传递。例如： </p><ul><li>里层UIViewController的配置</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义UINavigationController的配置</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.shouldAutorotate() ?? <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.supportedInterfaceOrientations() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.preferredInterfaceOrientationForPresentation() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义UITabBarController的配置</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.shouldAutorotate() ?? <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.supportedInterfaceOrientations() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.preferredInterfaceOrientationForPresentation() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-AppDelegate配置"><a href="#2-AppDelegate配置" class="headerlink" title="2. AppDelegate配置"></a>2. AppDelegate配置</h3><p>按照上面的方法配置好后，就可以自由的控制转屏了，但在某些情况下会存在问题，举个例子：假如A页面屏幕锁定为竖屏，点击A页面的一个按钮跳转到了B页面（方式存在push跟present两种），B页面是可以进行横竖屏旋转的，当B页面旋转至横屏，这时候点击返回，会发现A页面也变成横屏展示了，而且无法通过屏幕旋转恢复到竖屏展示。这时候下面这个代理方法就排上用场了：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, supportedInterfaceOrientationsForWindow window: UIWindow?)</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;    </span><br><span class="line">    <span class="comment">// 限定所有present的模态视图只能竖屏</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.window?.rootViewController?.presentedViewController != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 限定容器中当前展示的为RotateDetailViewController的实例时可以旋屏，其余页面只能竖屏</span></span><br><span class="line">    <span class="keyword">let</span> baseTabBarController = <span class="keyword">self</span>.window?.rootViewController <span class="keyword">as</span>? <span class="type">BaseTabBarController</span></span><br><span class="line">    <span class="keyword">if</span> ((baseTabBarController?.selectedViewController <span class="keyword">as</span>? <span class="type">BaseNavigationController</span>)?.topViewController <span class="keyword">is</span> <span class="type">RotateDetailViewController</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">AllButUpsideDown</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-强制旋屏"><a href="#3-强制旋屏" class="headerlink" title="3. 强制旋屏"></a>3. 强制旋屏</h3><blockquote><p>前提条件：该VC允许旋转</p></blockquote><ul><li>强制竖屏</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forcePortrait</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> width = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line">    <span class="keyword">let</span> height = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isLandscape = width &gt; height</span><br><span class="line">    <span class="keyword">if</span> isLandscape &#123;</span><br><span class="line">        <span class="keyword">let</span> device = <span class="type">UIDevice</span>.currentDevice()</span><br><span class="line">        <span class="keyword">let</span> number = <span class="type">NSNumber</span>(integer: <span class="type">UIInterfaceOrientation</span>.<span class="type">Portrait</span>.rawValue)</span><br><span class="line">        device.setValue(number, forKey: <span class="string">"orientation"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>强制横屏</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forceLandScape</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> width = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line">    <span class="keyword">let</span> height = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isLandscape = width &lt; height</span><br><span class="line">    <span class="keyword">if</span> isLandscape &#123;</span><br><span class="line">        <span class="keyword">let</span> device = <span class="type">UIDevice</span>.currentDevice()</span><br><span class="line">        <span class="keyword">let</span> number = <span class="type">NSNumber</span>(integer: <span class="type">UIInterfaceOrientation</span>.<span class="type">LandscapeRight</span>.rawValue)</span><br><span class="line">        device.setValue(number, forKey: <span class="string">"orientation"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上方案基本可以搞定大部分的屏幕旋转场景了。如果APP的产品需求中主体为固定方向，只要求对弹出(present)模态视图进行旋转的话，可以参考下面这篇文章：<br><a href="http://swiftiostutorials.com/ios-orientations-landscape-orientation-one-view-controller/" target="_blank" rel="external">iOS Orientations: Landscape orientation for only one View Controller</a><br>这么做会更加方便一些，但问题是这种方案对于push模式的场景并不适用，需要结合以上方案综合解决。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文屏幕旋转方案仅限于兼容iOS8+&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-从APP层次谈起&quot;&gt;&lt;a href=&quot;#1-从APP层次谈起&quot; class=&quot;headerlink&quot; title=&quot;1. 从APP层次谈起&quot;&gt;&lt;/a&gt;1.
      
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Charts诊疗日志</title>
    <link href="/2016/07/25/Charts%E8%AF%8A%E7%96%97%E6%97%A5%E5%BF%97/"/>
    <id>/2016/07/25/Charts诊疗日志/</id>
    <published>2016-07-25T07:41:16.000Z</published>
    <updated>2017-11-10T01:18:12.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用Charts有一段时间了，期间遇到了一些现有版本存在的问题，特作此记录。<br><a href="https://github.com/danielgindi/Charts" target="_blank" rel="external">Charts传送门</a></p></blockquote><h2 id="病症1-组合图-CombinedChartView-弹出MarkerView位置不对"><a href="#病症1-组合图-CombinedChartView-弹出MarkerView位置不对" class="headerlink" title="病症1.组合图(CombinedChartView)弹出MarkerView位置不对"></a>病症1.组合图(CombinedChartView)弹出MarkerView位置不对</h2><h3 id="病症表象如下图："><a href="#病症表象如下图：" class="headerlink" title="病症表象如下图："></a>病症表象如下图：</h3><p><img src="http://alithink.com/img/4charts/combine.png" alt="combine.png"></p><p>截图为想要的结果（修复后的效果），实际情况为弹出的Marker没有显示在对应折线图的数据点上。</p><h3 id="患病位置如下图："><a href="#患病位置如下图：" class="headerlink" title="患病位置如下图："></a>患病位置如下图：</h3><p><img src="http://alithink.com/img/4charts/chart_marker.png" alt="chart_marker.png"></p><h3 id="治疗方案："><a href="#治疗方案：" class="headerlink" title="治疗方案："></a>治疗方案：</h3><p>BarLineChartViewBase -&gt; getMarkerPosition  </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pt = <span class="type">CGPoint</span>(x: xPos, y: yPos * _animator.phaseY)</span><br></pre></td></tr></table></figure><p>在pt初始化之后添加如下分支：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">self</span> <span class="keyword">is</span> <span class="type">CombinedChartView</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> combinedChartView = <span class="keyword">self</span> <span class="keyword">as</span>! <span class="type">CombinedChartView</span></span><br><span class="line">    <span class="keyword">let</span> combinedChartData = _data <span class="keyword">as</span>! <span class="type">CombinedChartData</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> highlight.dataIndex &gt;= <span class="number">0</span> &amp;&amp; highlight.dataIndex &lt; combinedChartView.drawOrder.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> chartType =  <span class="type">CombinedChartView</span>.<span class="type">DrawOrder</span>(rawValue: combinedChartView.drawOrder.<span class="built_in">reverse</span>()[highlight.dataIndex])!</span><br><span class="line">        <span class="keyword">var</span> axisDependency = <span class="type">ChartYAxis</span>.<span class="type">AxisDependency</span>.<span class="type">Left</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">switch</span> chartType &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Bar</span>:</span><br><span class="line">            axisDependency = combinedChartData.barData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Line</span>:</span><br><span class="line">            axisDependency = combinedChartData.lineData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Bubble</span>:</span><br><span class="line">            axisDependency = combinedChartData.bubbleData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Candle</span>:</span><br><span class="line">            axisDependency = combinedChartData.candleData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Scatter</span>:</span><br><span class="line">            axisDependency = combinedChartData.scatterData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        &#125;</span><br><span class="line">        getTransformer(axisDependency).pointValueToPixel(&amp;pt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getTransformer(data.getDataSetByIndex(dataSetIndex)!.axisDependency).pointValueToPixel(&amp;pt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处drawOrder.reverse()要做reverse的原因是highlight里面记录的dataIndex的顺序正好与drawOrder数组的顺序相反，例如drawOrder为[Bar, Line],那么对应的Bar的dataIndex为1，Line的dataIndex为0。</p></blockquote><h3 id="总结分析"><a href="#总结分析" class="headerlink" title="总结分析"></a>总结分析</h3><p>CombinedChartView中包含的各类图形的数据会保存在独立的data属性中，例如柱状图的barData,折线图的lineData。因此原有的从统一data属性取得dataSet对应参考轴的操作就会返回错误的结果，以致因为选错了参考轴计算出了错误的Marker绘制位置。</p><h2 id="病症2-堆积图弹出MarkerView数值不对"><a href="#病症2-堆积图弹出MarkerView数值不对" class="headerlink" title="病症2.堆积图弹出MarkerView数值不对"></a>病症2.堆积图弹出MarkerView数值不对</h2><h3 id="病症表象如下图：-1"><a href="#病症表象如下图：-1" class="headerlink" title="病症表象如下图："></a>病症表象如下图：</h3><p><img src="http://alithink.com/img/4charts/stack.png" alt="stack.png"></p><p>截图为想要的结果（修复后的效果），实际情况为弹出的Marker总是显示所有柱子的叠加值。</p><h3 id="治疗方案：-1"><a href="#治疗方案：-1" class="headerlink" title="治疗方案："></a>治疗方案：</h3><p>BalloonMarker -&gt; refreshContent</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> entry <span class="keyword">is</span> <span class="type">BarChartDataEntry</span> &amp;&amp; highlight.stackIndex != -<span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> chartEntry = entry <span class="keyword">as</span>! <span class="type">BarChartDataEntry</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> values = chartEntry.values &#123;</span><br><span class="line">        configLabelns(entry, value: values[highlight.stackIndex])</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    configLabelns(entry)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先目前只有柱状图支持堆积展现，并且进行堆积展示的BarChartDataEntry有一个values属性用于存放该列的所有堆积值；stackIndex用于标示当前点击的柱子从下往上的序列，例如最下面的柱子为0，之上一个为1，依次递增。</p></blockquote><h3 id="总结分析-1"><a href="#总结分析-1" class="headerlink" title="总结分析"></a>总结分析</h3><p>默认的Marker处理值展示的时候，没有考虑到堆积图的特殊性，统一从entry的value属性进行取值，导致最终展现的数值不是我们想要的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;用Charts有一段时间了，期间遇到了一些现有版本存在的问题，特作此记录。&lt;br&gt;&lt;a href=&quot;https://github.com/danielgindi/Charts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Char
      
    
    </summary>
    
      <category term="iOS" scheme="/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>《世界简史》略读</title>
    <link href="/2016/07/20/%E3%80%8A%E4%B8%96%E7%95%8C%E7%AE%80%E5%8F%B2%E3%80%8B%E7%95%A5%E8%AF%BB/"/>
    <id>/2016/07/20/《世界简史》略读/</id>
    <published>2016-07-20T12:50:49.000Z</published>
    <updated>2017-11-10T01:18:12.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生命的起源"><a href="#生命的起源" class="headerlink" title="生命的起源"></a>生命的起源</h3><ul><li>沉积岩（岩石记录）大致可以了解到16亿年前的生命形态。</li><li>包含着生命迹象的最初的岩石称为原生岩。</li></ul><blockquote><p>古生代早期：比较低等的生物遗迹如水生贝类的贝壳、植物状动物的花状头、海藻、沙蚕类的甲壳类生物足迹和骨骼化石。<br>三叶虫：最早出生的生物，跟蚜虫十分相似，他们能像蚜虫那样把身体卷成球状。<br>海蝎：过了几百万年出现，比之前的生物更灵活有力</p></blockquote><h3 id="鱼类时期"><a href="#鱼类时期" class="headerlink" title="鱼类时期"></a>鱼类时期</h3><h4 id="生物区别于非生命体的两个特征："><a href="#生物区别于非生命体的两个特征：" class="headerlink" title="生物区别于非生命体的两个特征："></a>生物区别于非生命体的两个特征：</h4><ul><li>能够通化其他物质，使其成为自身的一部分（吃东西）。</li><li>可以再造自己（繁衍后代）。</li></ul><blockquote><p>鱼类时期（泥盆季）：大约在5亿年以前，已知的最早的脊椎动物。他们起初的样子跟现在的鲨鱼、鲟鱼有些相似。</p></blockquote><h3 id="石炭纪沼泽期"><a href="#石炭纪沼泽期" class="headerlink" title="石炭纪沼泽期"></a>石炭纪沼泽期</h3><p>植物先于动物移居到陆地上。</p><blockquote><p>植物：大型湿地木质植物，如木质苔藓、木质蕨类、巨型木贼等。<br>动物：蜈蚣、马路、原生昆虫（体型较大，如巨型蜻蜓）、蜘蛛蝎子的祖先，随后脊椎动物登陆。<br>肺的进化。<br>末期温度剧烈变化，沼泽地植物完全消失，煤炭层的形成基础。</p></blockquote><h3 id="爬行动物时期"><a href="#爬行动物时期" class="headerlink" title="爬行动物时期"></a>爬行动物时期</h3><ul><li>卵生，在孵化完成前就已经接近发育的成熟阶段。</li><li>出现了结籽植物。</li></ul><blockquote><p>爬行动物时期（中生代）：持续到距今大约8000万年以前，之前称为古生代和无生代（共14亿年）。中生代大约持续了两亿年以上。之后称为新生代。<br>动物：各种恐龙以及其他爬行动物。</p></blockquote><h3 id="哺乳动物时期"><a href="#哺乳动物时期" class="headerlink" title="哺乳动物时期"></a>哺乳动物时期</h3><p>此时的地图版图和现在的世界地图看起来有些大致相似了。<br>新生代与中生代生物的最根本区别，在于它们的精神生活不同。这种差别就其本质来说，主要是来源于母体和后代之间不同程度的接触。爬行动物和后代几乎没有接触。除个别特例之外，爬行动物在产卵之后就会自行离开，任其自生自灭。新生代以哺育和抚养后代为特点。</p><blockquote><p>灵长目：狐猿、猿、类人猿和人（解刨学上的相似性）<br>一共四次冰河时期。第一次距今60万年，最后一次距今约5万年。最后一次冰河时期，类人猿开始出现。<br>新石器时代：大约在10000到12000年以前。</p></blockquote><h3 id="文明雏形"><a href="#文明雏形" class="headerlink" title="文明雏形"></a>文明雏形</h3><p>大约公元前6000年</p><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ul><li>字母文字<ul><li>苏美尔：楔形文字</li><li>埃及：象形文字</li></ul></li><li>中国：象形文字</li></ul><h4 id="汉谟拉比法典"><a href="#汉谟拉比法典" class="headerlink" title="汉谟拉比法典"></a>汉谟拉比法典</h4><p>公元前2100年巴比伦帝国</p><h3 id="犹太人"><a href="#犹太人" class="headerlink" title="犹太人"></a>犹太人</h3><ul><li>希伯来人-闪米特系的民族。</li><li>公元前1000年之前，就定居在犹地亚，首都一直是耶路撒冷。</li><li>《旧约》（希伯来圣经），公元前4世纪或5世纪。</li></ul><h3 id="希腊文明"><a href="#希腊文明" class="headerlink" title="希腊文明"></a>希腊文明</h3><p>促使希腊各个城邦形成一个整体的原因： </p><ul><li>史诗</li><li>每四年在奥林匹亚举行一次奥运会</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;生命的起源&quot;&gt;&lt;a href=&quot;#生命的起源&quot; class=&quot;headerlink&quot; title=&quot;生命的起源&quot;&gt;&lt;/a&gt;生命的起源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;沉积岩（岩石记录）大致可以了解到16亿年前的生命形态。&lt;/li&gt;
&lt;li&gt;包含着生命迹象的最初的岩石称为
      
    
    </summary>
    
      <category term="读过的书" scheme="/categories/%E8%AF%BB%E8%BF%87%E7%9A%84%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>联通旧事</title>
    <link href="/2016/07/08/%E8%81%94%E9%80%9A%E6%97%A7%E4%BA%8B/"/>
    <id>/2016/07/08/联通旧事/</id>
    <published>2016-07-08T12:37:56.000Z</published>
    <updated>2017-11-10T01:18:12.437Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时间：2011.3~2013.6</p></blockquote><h3 id="初来乍到"><a href="#初来乍到" class="headerlink" title="初来乍到"></a>初来乍到</h3><blockquote><p>出场人物代号简介：<br>我：初出茅庐的Java小菜鸟</p></blockquote><p>　　那是一个属于Java的年代（^_^其实现在依然如此）。但造化弄人一直没有长时间从事相关工作。在浪潮实习的时候用了C#，在另一个伤心之地（实在不想提。。唉。。）用了一盏茶的J2EE和PB，而后我来到了联通。<br>　　面试时问的问题都是J2EE相关的，于是顺利的加入了经分数据组😂（跟J2EE几乎没半毛钱关系，这就是命吧，不过现在回想，还是要感谢一下命运之神）。时间太久，忘记当时的心情了，只依稀记得当时坐到工位上，时而会慨叹：“也许我就要跟数据库、etl和shell搞一辈子了吧”。</p><h3 id="误打误撞"><a href="#误打误撞" class="headerlink" title="误打误撞"></a>误打误撞</h3><blockquote><p>出场人物代号简介:<br>川哥：掌分项目的发起者<br>老孟：掌分项目组长以及同甘共苦过的兄弟</p></blockquote><p>　　同事领导都挺好，身边也有不少同学，所以日子过得还算温馨舒适。然后突然有一天命运的轨迹就发生了改变，在集团常驻的川哥发起了掌上经分项目（仅限iOS端）。  </p><blockquote><p>回想当时iOS生态圈的境况为：<br>目标设备：iPhone3G、3GS、iPad1<br>iOS版本: iOS4.x<br>开发设备：iMac、黑苹果(t410黑)<br>开发环境：那是一个Xcode与Interface builder分离的时代</p></blockquote><p>　　迷迷瞪瞪的就跟老孟被安排进了掌分项目组，当时对于OSX（现在应该叫macOS啦）和iOS一无所知，唯一的学习资料是一本iPhone开发书籍（名字忘掉了，这本书其中之一的作者以外包团队领头人的身份加入了项目）。项目的第一个版本主要由外包团队负责研发，但是我跟老孟需要尽快的融入进来，借助项目快速上手iOS开发，然后将项目接手过来（最大限度的节省外包费用，😂据说最后也没有把外包团队的费用完全结清）。</p><h3 id="小有所成"><a href="#小有所成" class="headerlink" title="小有所成"></a>小有所成</h3><blockquote><p>军军：外包团队主力开发<br>苟工：外包团队领头人</p></blockquote><p>　　那是一个几乎没有轮子的时代，或者说当时都还没有使用过github的我没有具备找轮子的能力。所以几乎所有的东西都是从零做起，走过的坑不少，但是收获也很大，很快就可以上手一些简单模块的开发了。说起成长的喜悦，记得兄弟们一起加班时的免费餐补报销，加班九点之后的打车报销以及写出bug后大家开玩笑的声讨书（那超大字号的白底黑字，打开屏幕吓出一身冷汗来）。<br>　　这里要感谢下苟工当时对于delegate的悉心讲解，感谢军军同志对于我冒出的各种问题的耐心解答。　　</p><h3 id="北京你好"><a href="#北京你好" class="headerlink" title="北京你好"></a>北京你好</h3><blockquote><p>博士：名副其实的博士，会议室加班常客，只因为大家都叫他博士，导致往往有些人都不记得他叫什么名字了，但是我记得，因为他跟托塔李天王重名^_^<br>文哥：目前公司的领导</p></blockquote><p>　　当领导让你出差，但是又不明确说多少天的时候，你就应该明白我可能一时半会回不来了😂。就这样，北京，我来了。<br>　　在项目的初版汇报通过之后，我们来到了北京金融街21号-联通集团总部，开始了现场开发支持工作。想象过一个人提着iMac盒子出差的感受吗，回想起来，好心酸，胳膊也好酸。。。<br>　　常驻联通会议室之后，发现一个真相，原来工作之后需要掌握的一项重要技能就是做PPT。逐级的汇报，不停的过片子，修改字眼与内容的组织是博士经常加班到很晚的原因。记得我们晚上从集团运动区打完球回来，还能经常享受到博士亲切地问候。<br>　　博士给我留下了很深刻的印象，跟现在的文哥有一拼，为人温文尔雅，专业知识过硬，处事细致全面，知识面很广，仿佛所有的东西都有所涉猎并且见解独特。（这里声明下，绝无拍马屁之嫌）<br>　　集团的食堂也给我留下了不少美味的回忆，超值的早餐、便宜好吃的肉龙等等，现在想想当时没有胖起来真是个奇迹。（然而在我的不懈努力下，现在终于还是胖起来了）　　</p><h3 id="重新来过"><a href="#重新来过" class="headerlink" title="重新来过"></a>重新来过</h3><p>　　终于热更新这个问题被提出来了，Native开发的最大不足其实就是这里了。当时没有如今大行其道的JSPatch、风风火火的React Native，于是开发一时进入了瓶颈。想过不少方案都没有很好的解决这个问题，于是川哥决定借助现有的成熟平台换一个架构重新来过。<br>　　经过几轮讨论之后，确定了MicroStrategy的方案，至今跟厂商的几个伙伴还保持着联系，毕竟国内懂得定制化改造MSTR SDK的iOS开发者估计不算多，当时一起讨论了不少问题，还乔装成他们的技术人员去帮他们紧急搞定了一个项目^_^。<br>　　实体、事实、度量、选择器、报表、文档、智能立方体、缓存、权限。。。接触了不少商业智能常见的概念与功能。起初是比较排斥的，因为借助第三方平台就基本失去了实际编写功能代码的机会了（因为涉及二次开发，针对MSTR SDK套壳的部分还是需要编写的）。但转念一想既然改变的势头已无法扭转，那只有硬着头皮顺流而行了。因为处女座的特质，让我在很短的时间内就掌握了MSTR的基本功能，有疑惑的地方就联系厂商技术支持，所以很快MSTR版本的掌分就搞出来了。</p><blockquote><p>心里话：<br>不知道现在掌分的状况如何了，个人一直觉得中途换成MSTR的方案并不是一个明智的选择，原因如下：  </p><ol><li>APP其实往往不需要彻底的动态性，内容的动态性往往可以通过产品向的方案进行解决。  </li><li>MSTR的权限以及缓存模型是基于用户的，而用户又涉及到license的费用计算，一旦涉及到费用就会衍生出不少扯皮的事情；反观自主开发的APP这部分配置就非常灵活。  </li><li>这点我觉得最重要，那就是APP存在的重要意义之一其实就是她极致的用户体验，如果在动态性与极致用户体验之一做个权衡的话，会毫不犹豫的以保证后者为先。（尤其在企业应用的范畴内，省掉了App Store的审核成本，版本的迭代速度可以非常快，版本的更新提示反而可以算作是对于用户的一种引导）</li></ol></blockquote><h3 id="北京再见"><a href="#北京再见" class="headerlink" title="北京再见"></a>北京再见</h3><blockquote><p>朋友们：东儿、芳芳*2、小杜、传奇、夺儿等（排名不分先后）</p></blockquote><p>　　来到北京最开心的回忆就是跟一起出差的朋友们几乎游遍了京城所有可玩的地方。故宫、天坛、长城、颐和园、南锣鼓巷、后海、雍和宫、国家博物馆、国家图书馆、鸟巢、水立方、清华北大、前门、王府井、西单、三里屯（优衣库试衣间）等。借老孟跟东儿的单反留下了不少记忆的片段，现在还经常看一下当时的照片，回味当初那份单纯的快乐，这份快乐只属于那段日子，那个年纪。（着重提一下，菜市口附近教子胡同里面的一个麻辣烫小店，里面的辣椒太tm过瘾了。。。）<br>　　唯一不变的就是变化，突然因为项目成本的原因（还有一些其他原因）研发团队就回到了济南。模式变为了济南团队研发结束提交变更，留守在集团的老孟负责向领导进行汇报安装。  </p><blockquote><p>说说这段日子的收获：  </p><ol><li>扩展视野、吃喝玩乐、结交朋友算是一方面😜。  </li><li>中途也参加了一些iOS精通类以及用户体验类的培训，总算是给我这个自学党补了补漏。  </li><li>接触MSTR，熟悉了主流报表平台的常用概念以及构建流程；通过对SDK的二次开发，为了实现一些奇葩需求，了解了不少iOS相关的黑魔法（swizzling、runtime等）</li></ol></blockquote><h3 id="联通再见"><a href="#联通再见" class="headerlink" title="联通再见"></a>联通再见</h3><p>　　人忙起来往往没时间去想太多其他事情，可一旦闲下来，然后再有不爽的任务压过来时，就往往会思考权衡下自己将来要走的路了。当掌分的工作暂时告一段落，领导打算安排去做其他数据加工审核相关工作的时候，心里总是有种排斥感。那段时间心里总是有个声音在问自己，将来到底想做什么。联通的生活确实很安逸舒适，但自己内心坚持移动端研发方向，所以最后还是选择了离开。    </p><blockquote><p>后记：<br>在联通工作的这段日子，结识了伙伴，扩展了视野，最重要的是确定了自己下一步该走的路。<br>感谢那段时光，感谢那段日子有你们相伴。年轻万岁，青春无悔。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;时间：2011.3~2013.6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;初来乍到&quot;&gt;&lt;a href=&quot;#初来乍到&quot; class=&quot;headerlink&quot; title=&quot;初来乍到&quot;&gt;&lt;/a&gt;初来乍到&lt;/h3&gt;&lt;blockquote&gt;
&lt;
      
    
    </summary>
    
      <category term="回忆录" scheme="/categories/%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
    
  </entry>
  
</feed>

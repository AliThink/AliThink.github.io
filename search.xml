<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[机器学习从业者们的那些事儿]]></title>
      <url>/2019/01/31/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%BB%8E%E4%B8%9A%E8%80%85%E4%BB%AC%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<p><strong>明确工作问题</strong>、收集并清洗数据、搭建模型、得出结果并<strong>监测变化</strong>，这些过程通常会以不同形式相互连接，很难单独拿出来作为研究对象。</p>
<h2 id="当机器学习项目失败时"><a href="#当机器学习项目失败时" class="headerlink" title="当机器学习项目失败时"></a>当机器学习项目失败时</h2><p>机器学习项目失败的情况有以下这么几种：</p>
<ul>
<li>当数据科学团队搭建了一个从未用过的工具。但是公司的其他部门并不知道他们做了什么，有些数据科学家也并不清楚这些成果能否用于实际生产中。</li>
<li>当数据科学家们创造模型的速度快于将其投入生产的速度，就会产生积压。</li>
<li>数据基础架构工程师和数据科学家是分开的。通道中没有数据时，数据科学家会要求数据基础架构工程师获取。</li>
<li>当公司最终确定产品X的功能后，他们需要数据科学家收集支持这项决策的数据。数据科学家认为产品经理会忽略那些与决定相反的数据，而产品经理会认为数据科学家忽略商业逻辑。</li>
<li>数据科学团队面试了一位数学建模、工程技术能力都很好的候选人。确定录用后加入到垂直应用产品团队，并需要简单的商业分析。数据科学家感到很无聊，所学技能根本用不上。</li>
</ul>
<p>问题在于数据产品之间缺少沟通并且没有目标。单独割裂的职位划分与工作协同，将影响目标的推进。</p>
<blockquote>
<p>将来会不会诞生一个职业：数据全栈工程师 =&gt; 数据产品思维 + 机器学习技能 + 大数据工程化技能 + 数据前端可视化技能</p>
</blockquote>
<h2 id="要做些什么"><a href="#要做些什么" class="headerlink" title="要做些什么"></a>要做些什么</h2><h3 id="理解语境"><a href="#理解语境" class="headerlink" title="理解语境"></a>理解语境</h3><ul>
<li>找准能从机器学习中受益的区域</li>
<li>与其他相关人员讨论机器学习能做什么、不能做什么</li>
<li>让每个人都了解商业策略、风险和目标</li>
<li>明确目前公司有什么类型的数据</li>
<li>对任务制定合适的框架</li>
<li>了解操作限制</li>
<li>提前确定可能的道德风险，例如你的成果有可能被滥用、或被用于宣传</li>
<li>确定潜在的偏见和潜在的负面反馈</li>
</ul>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul>
<li>制作能收集更多不同数据的计划</li>
<li>将不同来源的数据汇总</li>
<li>处理缺失的或被污染的数据</li>
<li>数据可视化</li>
<li>建立合适的训练集、验证集和测试集</li>
</ul>
<h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><ul>
<li>选择使用哪个模型</li>
<li>将资源模型纳入约束条件（即最终模型需要在顶尖设备运行，内存少、延长时间长等等）</li>
<li>选择超参数（包括架构、损失函数、优化器）</li>
<li>训练模型，并进行debug。其中包括调参、查看损失函数、训练错误、验证错误是否有改变、监测模型数据、确定错误来源、改变数据清洗和处理的方式、改变数据增强方式、添加更多数据、尝试不同模型、是否过度拟合。</li>
</ul>
<h3 id="模型生成"><a href="#模型生成" class="headerlink" title="模型生成"></a>模型生成</h3><ul>
<li>创建一个API或网页app</li>
<li>将模型输出成想要的格式</li>
<li>计划模型多久需要重新训练一次并更新数据</li>
</ul>
<h3 id="监测"><a href="#监测" class="headerlink" title="监测"></a>监测</h3><ul>
<li>追踪模型性能</li>
<li>监测输入数据，确定数据是否会随时间使得模型失效</li>
<li>与其他人员交流结果</li>
<li>制定计划，如何监测和应对意外结果</li>
</ul>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><h3 id="处理数据格式、不兼容和报错"><a href="#处理数据格式、不兼容和报错" class="headerlink" title="处理数据格式、不兼容和报错"></a>处理数据格式、不兼容和报错</h3><p>处理数据的不一致和报错经常是混乱费力的过程。人们有时会将机器学习和数据科学分开，因为对机器学习来说，有时会直接用清洗过的数据进行训练。然而在我的经验中，数据集清洗和训练模型是相关的：我经常会在训练模型的时候发现问题，只能改变输入数据的预处理方法。</p>
<p>### </p>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[试爱neo4j]]></title>
      <url>/2019/01/31/%E8%AF%95%E7%88%B1neo4j/</url>
      <content type="html"><![CDATA[<h2 id="1-导入demo数据"><a href="#1-导入demo数据" class="headerlink" title="1. 导入demo数据"></a>1. 导入demo数据</h2><h3 id="load-csv方式（适合热更新，无需停服务）"><a href="#load-csv方式（适合热更新，无需停服务）" class="headerlink" title="load csv方式（适合热更新，无需停服务）"></a>load csv方式（适合热更新，无需停服务）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// demo数据的导入例子</span><br><span class="line"></span><br><span class="line"><span class="keyword">LOAD</span> CSV <span class="keyword">WITH</span> HEADERS <span class="keyword">FROM</span> <span class="string">"file:///RetailRecommendationsDemoDataProduct.csv"</span> <span class="keyword">AS</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">MERGE</span> (parent_category:<span class="keyword">Category</span> &#123;<span class="keyword">name</span>: row.parent_category&#125;)</span><br><span class="line"><span class="keyword">MERGE</span> (<span class="keyword">category</span>:<span class="keyword">Category</span> &#123;<span class="keyword">name</span>: row.category&#125;)</span><br><span class="line"><span class="keyword">MERGE</span> (<span class="keyword">category</span>)-[:PARENT_CATEGORY]-&gt;(parent_category)</span><br><span class="line"><span class="keyword">MERGE</span> (p:Product &#123;sku: toString(row.sku)&#125;)</span><br><span class="line"><span class="keyword">SET</span> p.name  = row.name,</span><br><span class="line">    p.price = toFloat(row.price)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:IN_CATEGORY]-&gt;(<span class="keyword">category</span>)</span><br><span class="line"><span class="keyword">MERGE</span> (d:Designer &#123;<span class="keyword">name</span>: row.designer&#125;)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:DESIGNED_BY]-(d)</span><br><span class="line"><span class="keyword">RETURN</span> *;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 智子推荐增量数据导入例子</span><br><span class="line"></span><br><span class="line"><span class="keyword">LOAD</span> CSV <span class="keyword">WITH</span> HEADERS <span class="keyword">FROM</span> <span class="string">"file:///sales_xxxxxxxx.csv"</span> <span class="keyword">AS</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">MERGE</span> (buyer:<span class="keyword">User</span> &#123;buyer_nick: row.buyer_nick&#125;)</span><br><span class="line"><span class="keyword">MERGE</span> (plat:Platform &#123;platform_code: row.platform_code&#125;)</span><br><span class="line"><span class="keyword">SET</span> plat.platform_name = row.platform_name</span><br><span class="line"><span class="keyword">MERGE</span> (brand:Brand &#123;brand_id: row.brand_id&#125;)</span><br><span class="line"><span class="keyword">SET</span> brand.brand_name = row.brand_name</span><br><span class="line"><span class="keyword">MERGE</span> (<span class="keyword">store</span>:<span class="keyword">Store</span> &#123;store_id: row.store_id&#125;)</span><br><span class="line"><span class="keyword">SET</span> store.store_name = row.store_name</span><br><span class="line"><span class="keyword">MERGE</span> (c:<span class="keyword">Category</span> &#123;category_code: row.category_code&#125;)</span><br><span class="line"><span class="keyword">SET</span> c.category_code = row.category_code</span><br><span class="line"><span class="keyword">MERGE</span> (s:Season &#123;season: row.season&#125;)</span><br><span class="line"><span class="keyword">SET</span> s.season_name = row.season_name</span><br><span class="line"><span class="keyword">MERGE</span> (p:Product &#123;platform_code: row.platform_code&#125;)</span><br><span class="line"><span class="keyword">SET</span> p.product_name = row.product_name</span><br><span class="line"></span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:IN_CATEGORY]-&gt;(c)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:IN_SEASON]-&gt;(s)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:IN_BRAND]-(brand)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:IN_PLATFORM]-&gt;(plat)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:IN_STORE]-(<span class="keyword">store</span>)</span><br><span class="line"><span class="keyword">MERGE</span> (buyer)-[:BUY]-(p)</span><br><span class="line"><span class="keyword">MERGE</span> (p)-[:BE_BOUGHT]-(buyer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> *;</span><br></pre></td></tr></table></figure>
<p>几个值得注意的地方：</p>
<ol>
<li>load csv的本地path是相对于import路径的（当然也可以传入网络文件路径），所以需要把数据文件复制到对应目录中，例如目录（macOS）：<code>/Users/alithink/Library/Application\ Support/Neo4j\ Desktop/Application/neo4jDatabases/database-4a70fe04-c5a9-41f4-9b8e-5e5c52e283dd/installation-3.5.0/import</code></li>
<li>load csv的速度还是太慢了，不适合较大存量数据的导入场景。但优势在于导入无需停服务，无需重置数据库，适合增量数据的更新导入场景。</li>
</ol>
<h3 id="neo4j-import方式（需要停服务，重建数据库，速度快如闪电）"><a href="#neo4j-import方式（需要停服务，重建数据库，速度快如闪电）" class="headerlink" title="neo4j-import方式（需要停服务，重建数据库，速度快如闪电）"></a>neo4j-import方式（需要停服务，重建数据库，速度快如闪电）</h3><blockquote>
<p>智子neo4j数据整理: 在内网环境构建了数据预处理程序。</p>
</blockquote>
<h4 id="首先将数据处理为import可以接受的数据格式"><a href="#首先将数据处理为import可以接受的数据格式" class="headerlink" title="首先将数据处理为import可以接受的数据格式"></a>首先将数据处理为import可以接受的数据格式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node数据整理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选数据维度</span></span><br><span class="line">season_df = sale_df[[<span class="string">"season"</span>, <span class="string">"season_name"</span>]]</span><br><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">season_df[<span class="string">':LABEL'</span>] = <span class="string">'Season'</span></span><br><span class="line"><span class="comment"># 避免id出现冲突（neo4j id命名空间不许存在重复项）</span></span><br><span class="line">season_df[<span class="string">"season"</span>] =[ <span class="string">'season_%i'</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> season_df[<span class="string">"season"</span>]]</span><br><span class="line"><span class="comment"># 指定id列名</span></span><br><span class="line">season_df = season_df.rename(columns=&#123;<span class="string">"season"</span>: <span class="string">"season:ID"</span>&#125;)</span><br><span class="line"><span class="comment"># 去重</span></span><br><span class="line">season_df = season_df.drop_duplicates()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># relation数据整理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选数据维度</span></span><br><span class="line">product_user_df = sale_df[[<span class="string">'product_code'</span>,<span class="string">'buyer_nick'</span>, <span class="string">'quantity'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除空格（异常数据处理，neo4j会对空格默认忽略）</span></span><br><span class="line">product_user_df[<span class="string">'buyer_nick'</span>] = product_user_df[<span class="string">'buyer_nick'</span>].map(str.strip)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 聚合数据</span></span><br><span class="line">product_user_df = product_user_df.groupby([<span class="string">'product_code'</span>, <span class="string">'buyer_nick'</span>]) \</span><br><span class="line">    .agg(&#123;</span><br><span class="line">        <span class="string">'quantity'</span>: <span class="string">'sum'</span></span><br><span class="line">    &#125;) \</span><br><span class="line">    .reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">product_user_df[<span class="string">':TYPE'</span>] = <span class="string">'BE_BOUGHT'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定start end 以及releation属性</span></span><br><span class="line">product_user_df = product_user_df.rename(columns=&#123;</span><br><span class="line">    <span class="string">"product_code"</span>: <span class="string">":START_ID"</span>,</span><br><span class="line">    <span class="string">"quantity"</span>: <span class="string">"buy_num"</span>,</span><br><span class="line">    <span class="string">"buyer_nick"</span>: <span class="string">":END_ID"</span></span><br><span class="line">                                                         &#125;)</span><br><span class="line"></span><br><span class="line">product_user_df = product_user_df[[<span class="string">':START_ID'</span>,<span class="string">'buy_num'</span>, <span class="string">':END_ID'</span>, <span class="string">':TYPE'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除空数据</span></span><br><span class="line">product_user_df = product_user_df.dropna()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据导出</span></span><br><span class="line">season_df.to_csv(<span class="string">'neo4j/season.csv'</span>,index=<span class="keyword">False</span>)</span><br><span class="line">user_product_df.to_csv(<span class="string">'neo4j/user_product.csv'</span>,index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure>
<h4 id="import导入操作"><a href="#import导入操作" class="headerlink" title="import导入操作"></a>import导入操作</h4><p>检查项：</p>
<ul>
<li>首先将数据文件cp到neo4j主目录下的import文件夹下</li>
<li>确认neo4j服务已停止</li>
<li>删除neo4j主目录data/databases/graph.db</li>
</ul>
<p>执行如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/neo4j-admin import --nodes import/brand.csv --nodes import/buyer.csv --nodes import/category.csv --nodes import/platform.csv --nodes import/product.csv --nodes import/season.csv --nodes import/store.csv --relationships import/product_brand.csv --relationships import/product_category.csv --relationships import/product_platform.csv --relationships import/product_season.csv --relationships import/product_store.csv --relationships import/user_product.csv --relationships import/product_user.csv --delimiter <span class="string">","</span> --array-delimiter <span class="string">"|"</span> --quote <span class="string">"'"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="几种导入方式的对比"><a href="#几种导入方式的对比" class="headerlink" title="几种导入方式的对比"></a>几种导入方式的对比</h3><p><img src="https://i.loli.net/2019/01/31/5c5252a9d550f.jpg" alt=""></p>
<h4 id="load-csv速度参考"><a href="#load-csv速度参考" class="headerlink" title="load csv速度参考"></a>load csv速度参考</h4><p><img src="https://i.loli.net/2019/01/31/5c5252a9a7162.jpg" alt=""></p>
<h4 id="neo4j-import速度参考"><a href="#neo4j-import速度参考" class="headerlink" title="neo4j-import速度参考"></a>neo4j-import速度参考</h4><p><img src="https://i.loli.net/2019/01/31/5c5252a9a6e7f.jpg" alt=""></p>
<h2 id="2-查看数据"><a href="#2-查看数据" class="headerlink" title="2. 查看数据"></a>2. 查看数据</h2><h3 id="启动neo4j服务"><a href="#启动neo4j服务" class="headerlink" title="启动neo4j服务"></a>启动neo4j服务</h3><p><code>$NEO4J_HOME/bin/neo4j console</code></p>
<p>几个值得注意的地方：</p>
<ul>
<li>外网访问(conf/neo4j.conf)：<code>dbms.connector.http.listen_address=0.0.0.0:7474</code></li>
<li>query日志需要单独配置打开。</li>
<li>默认用户名密码neo4j/neo4j(产出db文件不会重置用户名密码)</li>
</ul>
<h3 id="查看数据结构"><a href="#查看数据结构" class="headerlink" title="查看数据结构"></a>查看数据结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> db.schema()</span><br></pre></td></tr></table></figure>
<p>demo结果如下：<br><img src="https://i.loli.net/2019/01/31/5c5252a9aa4bb.png" alt="屏幕快照 2019-01-24 上午11.23.41"></p>
<p>智子推荐db结果如下（不知道为啥有的球中间的文字没显示，感觉neo4j的前端还是有bug）：<br><img src="https://i.loli.net/2019/01/31/5c5252a9ac7f5.png" alt="屏幕快照 2019-01-26 下午12.14.44"></p>
<h2 id="推荐尝鲜"><a href="#推荐尝鲜" class="headerlink" title="推荐尝鲜"></a>推荐尝鲜</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 智子关联规则推荐</span><br><span class="line"></span><br><span class="line">match (s_product:Product &#123;product_code: "IG6431"&#125;)-[:BE_BOUGHT]-&gt;(s_user:User)&lt;-[:BE_BOUGHT]-(rec:Product)</span><br><span class="line">return rec.product_code, count(s_user) as `Score` </span><br><span class="line">order by count(s_user) desc limit 1000</span><br></pre></td></tr></table></figure>
<p>结果如下：<br><img src="https://i.loli.net/2019/01/31/5c5252a9caa21.png" alt="屏幕快照 2019-01-26 下午12.18.51"></p>
<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li>换行输入shift+回车</li>
<li>切换到换行模式，command+回车执行语句</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU0NzAxNTYyMQ==&amp;mid=2247483826&amp;idx=1&amp;sn=0b7fb426830c4b8dd63cd8ce29bf3d14&amp;chksm=fb559f18cc22160ea95cb0b9e3007c0c3570c2da606685c05353f66d90059efe2fd7d014d0d4&amp;token=1799051627&amp;lang=zh_CN#rd" target="_blank" rel="noopener">知识图谱 | 基于neo4j的即时推荐引擎</a></li>
<li><a href="https://www.linkedin.com/pulse/simplifying-market-basket-analysis-using-graph-neo4j-achal-shantharam" target="_blank" rel="noopener">Simplifying Market Basket Analysis using a Graph Database (Neo4j)</a></li>
<li><a href="https://blog.csdn.net/xingxiupaioxue/article/details/71747284" target="_blank" rel="noopener">如何将大规模数据导入Neo4j</a></li>
<li><a href="https://neo4j.com/docs/operations-manual/current/tutorial/import-tool/" target="_blank" rel="noopener">官方导入实例</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[正确使用交叉验证]]></title>
      <url>/2018/12/25/%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>引子：在封装cell预测模块的交叉验证功能时想到，到底是应该直接把交叉验证中效果较好的模型持久化下来用于预测？还是像现在这样子，用全部数据集重新训练一个模型用于后期的预测？</p>
</blockquote>
<h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><p>You do cross-validation when you want to do any of these two things:</p>
<ul>
<li>Model Selection</li>
<li>Error Estimation of a Model</li>
</ul>
<p>Model selection can come in different scenarios:</p>
<p>Selecting one algorithm vs others for a particular problem/dataset<br>Selecting hyper-parameters of a particular algorithm for a particular problem/dataset<br>(please notice that if you are both selecting an algorithm - better to call it model - and also doing hyper-parameters search, you need to do Nested Cross Validation . Is Nested-CV really necessary?)</p>
<p>Cross-validation ensures up to some degree that the error estimate is the closest possible as generalization error for that model (although this is very hard to approximate). When observing the average error among folds you can have a good projection of the expected error for a model built on the full dataset. Also is importance to observe the variance of the prediction, this is, how much the error varies from fold to fold. If the variation is too high (considerably different values) then the model will tend to be unstable. Bootstrapping is the other method providing good approximation in this sense. I suggest to read carefully the section 7 on “Elements of Statistical Learning” Book, freely available at: <a href="https://web.stanford.edu/~hastie/ElemStatLearn//printings/ESLII_print12.pdf" target="_blank" rel="noopener">ELS-Standford</a></p>
<p>As it has been mentioned before you must not take the built model in none of the folds. Instead, you have to rebuild the model with the full dataset (the one that was split into folds). If you have a separated test set, you can use it to try this final model, obtaining a similar (and must surely higher) error than the one obtained by CV. You should, however, rely on the estimated error given by the CV procedure.</p>
<p>After performing CV with different models (algorithm combination, etc) chose the one that performed better regarding error and its variance among folds. You will need to rebuild the model with the whole dataset. Here comes a common confusion in terms: we commongly refer to model selection, thinking that the model is the ready-to-predict model built on data, but in this case it refers to the combination of algorithm+preprocesing procedures you apply. So, to obtain the actual model you need for making predictions/classification you need to build it using the winner combination on the whole dataset.</p>
<p>Last thing to note is that if you are applying any kind of preprocessing the uses the class information (feature selection, LDA dimensionality reduction, etc) this must be performed in every fold, and not previously on data. This is a critical aspect. Should do the same thing if you are applying preprocessing methods that involve direct information of data (PCA, normalization, standardization, etc). You can, however, apply preprocessing that is not depend from data (deleting a variable following expert opinion, but this is kinda obvious). This video can help you in that direction: <a href="https://www.youtube.com/watch?v=S06JpVoNaA0" target="_blank" rel="noopener">CV the right and the wrong way</a></p>
<p>Here, a final nice explanation regarding the subject: <a href="https://stats.stackexchange.com/questions/2306/feature-selection-for-final-model-when-performing-cross-validation-in-machine" target="_blank" rel="noopener">CV and model selection</a></p>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><ol>
<li>在什么时候需要使用交叉验证：<ul>
<li>做模型选择的时候</li>
<li>需要评估模型误差的时候</li>
</ul>
</li>
<li>做模型选择又分两种：<ul>
<li>算法选择 - 普通cv</li>
<li>算法超参选择 - 格搜索等针对超参优化</li>
</ul>
</li>
<li>交叉验证能看出什么：<ul>
<li>较为接近的衡量一个模型的误差表现</li>
<li>观察方差，判断模型的稳定性</li>
</ul>
</li>
</ol>
<p><strong>重点来了：不要将交叉验证中效果最好的模型直接作最终预测使用，而应该用全部数据集重新训练一个模型。</strong>（看来没用错，这也是探索这一波的起因 =。=）</p>
<h2 id="意外收获：重大附加发现"><a href="#意外收获：重大附加发现" class="headerlink" title="意外收获：重大附加发现"></a>意外收获：重大附加发现</h2><p>如果数据集需要进行下来动作，请在交叉验证切分完数据集后进行：</p>
<ul>
<li>标准化、MinMax等结合数据规模的数据预处理手段。</li>
<li>特征选择、LDA等结合类标的相关处理。</li>
</ul>
<p>但是cross_val_score如何对切分后的数据集做处理呢？<br>官方文档给出了答案：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> make_pipeline</span><br><span class="line">clf = make_pipeline(preprocessing.StandardScaler(), svm.SVC(C=<span class="number">1</span>))</span><br><span class="line">cross_val_score(clf, iris.data, iris.target, cv=cv)</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Gratitude]]></title>
      <url>/2018/12/21/Gratitude/</url>
      <content type="html"><![CDATA[<blockquote>
<p>写这篇文章的时候，正饱受牙痛之苦。。<br>珍惜你的牙齿，守住她们就是守住你未来的幸福。</p>
</blockquote>
<p><img src="https://i.loli.net/2018/12/26/5c22f9166ee33.png" alt="Gratitude"></p>
<h2 id="一、引子"><a href="#一、引子" class="headerlink" title="一、引子"></a>一、引子</h2><p>我们来到这个世上，到底追求什么才是最重要的？Tal坚定地认为：幸福感是衡量人生的唯一标准，是所有目标的最终目标。（Tal博士被誉为”最受欢迎讲师”和”人生导师”）。</p>
<p>多年前的一段心灵迷茫期，让我偶遇了Tal这位人生导师以及他的哈佛幸福课（给个背影吧，正面会不会侵犯肖像权）。<br><img src="https://i.loli.net/2018/12/21/5c1cb92e67d9c.jpg" alt="111"></p>
<p>视频传送门：<a href="http://open.163.com/special/positivepsychology/" target="_blank" rel="noopener">http://open.163.com/special/positivepsychology/</a></p>
<p>自从听了Tal的课，就有将其中的「感恩练习」做个App的打算。但惊慌怪兽迟迟没有醒来，此事也一拖再拖。直到今年的感恩节前夕，她终于突然跳了出来，提醒我「您有一个kpi尚未完成，请立刻行动起来，deadline不远了」。于是经过一段时间的折腾与回忆（毕竟已经离开iOS圈子有段时间了），这个App就这么诞生了。撒花ing</p>
<h2 id="二、应用简介"><a href="#二、应用简介" class="headerlink" title="二、应用简介"></a>二、应用简介</h2><p>应用传送门（iOS safari打开）：<a href="http://tinyurl.com/y7zw4bns" target="_blank" rel="noopener">http://tinyurl.com/y7zw4bns</a></p>
<p><img src="https://i.loli.net/2018/12/21/5c1cba5940f19.jpg" alt="gratitude"></p>
<h3 id="产品逻辑"><a href="#产品逻辑" class="headerlink" title="产品逻辑"></a>产品逻辑</h3><p>只要带上感恩的眼镜去观察生活，将生活中已经习惯的「理所当然」重新思考，就会发现生活中其实充满着值得感恩的事情。美味的食物、父母与妻子对家庭的付出、孩子的点滴成长、朋友同事间的帮助支持等等都值得去感恩。就像Tal课程中举例说明的那样，持久幸福的模型其实是螺旋上升的形态，是由一个个的小幸福累积而成。偶然的惊喜，幸福感消退的也会特别快。</p>
<p>「Gratitude」每日希望我们记录下三件值得感恩的小事。起初发现三件值得感恩的事可能会觉得有点难，但坚持下来经过一段时间的练习，它会潜移默化地改变一个人观察事物的视角。慢慢地，随着一点点小幸福的积累，它将帮助我们进入螺旋上升的幸福模型中。</p>
<p>同时「Gratitude」增加了分享功能，对于那些并不那么隐私的感恩话题，完全可以分享出来（有些事情用文字来表达，可能比当面开口更容易一些）。将自己整理的内容分享给对方，对方接收到你的感恩，其实也是某种意义上幸福的传递，彼此之间的情感也在升华。</p>
<h3 id="产品功能"><a href="#产品功能" class="headerlink" title="产品功能"></a>产品功能</h3><ul>
<li>主页面：每日三次感恩记录模块，保存后可随时更新分享。</li>
<li>历史感恩列表：点击✉️进入历史感恩列表模块，在这里可以回顾你留下的所有感恩记录。</li>
<li>感恩编辑页：在这里可以对已生成的感恩记录进行编辑修改，与主页面功能类似。在历史感恩列表中点击任意感恩记录即可进入。</li>
<li>分享页：分享页专门制作了两个主题，也是为了鼓励大胆分享出我们的感恩记录，让幸福传递。（白色主题，借鉴了我最喜欢的移动端文字编辑类APP锤子标签，希望大家喜欢~，并希望罗老师能坚持下去）</li>
</ul>
<h2 id="三、得到"><a href="#三、得到" class="headerlink" title="三、得到"></a>三、得到</h2><p>每年一个App的小flag，逼自己挤出些时间回顾下移动端开发的相关知识，虽然已经转战ML，但移动端的skill也不能落下哈。（希望能把这个flag继续坚持下去吧💪）</p>
<p>最后也希望这个小小的App能够帮助到大家，Enjoy it🎉</p>
<p><strong>ps:应用限免至2019年1月9日，喜欢的老铁，好评走一波哈~</strong></p>
]]></content>
      
        <categories>
            
            <category> 个人作品 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《人工智能转型手册》读后感]]></title>
      <url>/2018/12/17/%E3%80%8A%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E8%BD%AC%E5%9E%8B%E6%89%8B%E5%86%8C%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>传送门：<a href="https://landing.ai/ai-transformation-playbook/" target="_blank" rel="noopener">原文链接</a> <a href="https://mp.weixin.qq.com/s/WRgh7KRFYEzehK3zkzTWeA" target="_blank" rel="noopener">中文翻译</a></p>
</blockquote>
<h2 id="看完记住了什么"><a href="#看完记住了什么" class="headerlink" title="看完记住了什么"></a>看完记住了什么</h2><ul>
<li>企业进行AI赋能，更高效的策略是要先行动起来，用小范围的实践碰撞出AI的落地点。</li>
<li>在初期AI实践项目的选择上，要选择那些好衡量、好落地、容易出效果的点。<ul>
<li>用初期实践项目取得的成果，作为AI赋能至更多业务场景的背书。</li>
<li>增加进一步结合实践的信心。</li>
</ul>
</li>
<li>企业做AI要结合自身业务行业背景，结合自身业务经验知识储备优势，发展出适合自身所处行业背景下的「特色应用」，而非通用AI应用场景（这部分交由Google等大公司来搞吧，自己来做，投入产出比过低）。</li>
<li>识别内外团队能力边界，更好的利用外部团队的研究成果，加速企业内部AI项目的落地。</li>
<li>自上而下的认知，企业不同层级对AI赋能边界的认知，避开不适合AI来做的点，聚焦在更适合来探索实践的方向。</li>
<li>储备更有意义的数据。AI团队的更早加入，随着数据模型探索的开展，将有利于公司数据团队发掘储备更多利于未来业务开展的核心数据维度。而基于AI的特点，数据储备的越早，AI模型的价值就利于更早的发挥出来，更快的落地，正向循环，以致建立商业优势的护城河。</li>
<li>有更多的企业实践成功案例，也为业务AI团队的招聘建立优势。</li>
</ul>
<h2 id="韩都这边的实践"><a href="#韩都这边的实践" class="headerlink" title="韩都这边的实践"></a>韩都这边的实践</h2><ul>
<li>初期结合贯穿电商运营的核心节拍器销量预测进行了一波数据探索，根据数据模型探索结果，最终确定以大活动销量预测作为初期实践项目。<ul>
<li>电商以平台活动脉动的运营节奏，使得活动销量预测对电商运营来说意义颇重。</li>
<li>企业自身也会进行业务专家的活动销量预测，有了人工预测结果，便于模型预测效果的业务衡量。初期模型目标定为达到业务专家的预测水平。</li>
<li>目前实践的结果，基本与业务专家预测效果持平，持续优化中。</li>
</ul>
</li>
<li>其它方向的应用：<ul>
<li>封装了AI接口平台「矩阵」，向各业务系统输出AI能力。</li>
<li>商品推荐：结合商品销售数据与商品元素属性，进行关联规则、协同过滤以及货品相似性推荐。结合企业内部的BI系统进行发布落地。</li>
<li>水滴相关性探索平台：将AI探索过程中发掘的数据规律进行集中展示的地方，给运营人员提供业务分析的新视角。</li>
</ul>
</li>
<li>与外部团队的合作：<ul>
<li>结合阿里nlp的评价分析应用。</li>
<li>结合百度识图的图片相似度应用，货品图片查重，相似竞品查找等。</li>
</ul>
</li>
<li>数据储备：<ul>
<li>韩都核心内部系统全部自研，内部系统数据打通汇流于HBI（韩都商业智能系统）。AI模型所需数据基本可从HBI一点获取，数据获取成本低，数据质量高。</li>
<li>在早期的模型探索中，也发掘反哺出一些有意义的数据特征维度，在HBI中进行沉淀，蓄势待发。</li>
</ul>
</li>
<li>人员招聘。。说多了都是泪。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[智子airflow配置指南]]></title>
      <url>/2018/09/21/%E6%99%BA%E5%AD%90airflow%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h2 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h2><blockquote>
<p><a href="https://www.yuzhi100.com/tutorial/centos/centos-anzhuang-python36" target="_blank" rel="noopener">https://www.yuzhi100.com/tutorial/centos/centos-anzhuang-python36</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#安装EPEL依赖</span><br><span class="line">sudo yum install epel-release</span><br><span class="line"></span><br><span class="line">#安装IUS软件源</span><br><span class="line">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm</span><br><span class="line"></span><br><span class="line">sudo yum install python36u</span><br><span class="line">sudo ln -s /bin/python3.6 /bin/python3</span><br><span class="line"></span><br><span class="line">sudo yum install python36u-pip</span><br><span class="line">sudo ln -s /bin/pip3.6 /bin/pip3</span><br></pre></td></tr></table></figure>
<h2 id="安装airflow"><a href="#安装airflow" class="headerlink" title="安装airflow"></a>安装airflow</h2><h3 id="1-添加环境变量"><a href="#1-添加环境变量" class="headerlink" title="1. 添加环境变量"></a>1. 添加环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export SLUGIFY_USES_TEXT_UNIDECODE=yes</span><br></pre></td></tr></table></figure>
<h3 id="2-环境安装"><a href="#2-环境安装" class="headerlink" title="2. 环境安装"></a>2. 环境安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install python36u-devel.x86_64</span><br><span class="line"></span><br><span class="line">sudo yum install mysql-community-devel.x86_64</span><br><span class="line"></span><br><span class="line"># sasl/sasl.h: No such file or directory</span><br><span class="line">yum install gcc-c++ cyrus-sasl-devel.x86_64</span><br></pre></td></tr></table></figure>
<h3 id="3-元数据库配置（mysql）"><a href="#3-元数据库配置（mysql）" class="headerlink" title="3. 元数据库配置（mysql）"></a>3. 元数据库配置（mysql）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- xxxx</span><br><span class="line"></span><br><span class="line">CREATE DATABASE airflow;</span><br><span class="line"></span><br><span class="line">GRANT all privileges on airflow.* TO &apos;root&apos;@&apos;localhost&apos;  IDENTIFIED BY &apos;xxxx&apos;;</span><br><span class="line"></span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;xxxx&apos; PASSWORD EXPIRE NEVER;</span><br><span class="line"></span><br><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;xxxx&apos;;</span><br></pre></td></tr></table></figure>
<h3 id="4-AIRFLOW-HOME-airflow-cfg文件配置"><a href="#4-AIRFLOW-HOME-airflow-cfg文件配置" class="headerlink" title="4. \$AIRFLOW_HOME/airflow.cfg文件配置"></a>4. \$AIRFLOW_HOME/airflow.cfg文件配置</h3><blockquote>
<p>将AIRFLOW_HOME加入环境变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sql_alchemy_conn = mysql://root:xxxx@localhost:3306/airflow</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from cryptography.fernet import Fernet</span><br><span class="line"></span><br><span class="line">fernet_key= Fernet.generate_key()</span><br><span class="line">print(fernet_key) # your fernet_key, keep it in secured place!</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装加密模块</span><br><span class="line">pip install flask-bcrypt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>暴露端口5001</p>
</blockquote>
<h3 id="5-配置用户"><a href="#5-配置用户" class="headerlink" title="5. 配置用户"></a>5. 配置用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import airflow</span><br><span class="line">from airflow import models, settings</span><br><span class="line">from airflow.contrib.auth.backends.password_auth import PasswordUser</span><br><span class="line"></span><br><span class="line">user = PasswordUser(models.User())</span><br><span class="line">user.username = &apos;alithink&apos;</span><br><span class="line">user.email = &apos;xxxx&apos;</span><br><span class="line">user.password = &apos;xxxx&apos;</span><br><span class="line">session = settings.Session()</span><br><span class="line">session.add(user)</span><br><span class="line">session.commit()</span><br><span class="line">session.close()</span><br><span class="line">exit()</span><br></pre></td></tr></table></figure>
<h2 id="启动airflow"><a href="#启动airflow" class="headerlink" title="启动airflow"></a>启动airflow</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nohup airflow webserver -p 5001 &amp;</span><br><span class="line"></span><br><span class="line"># 每次resetdb后scheduler要重启</span><br><span class="line">nohup airflow scheduler &amp;</span><br></pre></td></tr></table></figure>
<h2 id="airflow-tips"><a href="#airflow-tips" class="headerlink" title="airflow tips"></a>airflow tips</h2><ul>
<li>cfg配置改变后要进行重启</li>
<li>默认utc时间，建议在dag配置的时候进行时区的考量（web ui只支持utc…）</li>
<li>dag开关置为on之后，如果scheduler已启动，start-date到目前每个执行计划节点的任务都会依次执行。</li>
<li>可以点击立刻执行，进行手动dag执行。</li>
<li>每个节点的日志，可以点击对应task，然后查看task instance log</li>
<li>UTC时间，需要在原本打算设置的时间减8小时</li>
<li>catch_up: 如果指定的开始时间早于当前时间且catch_up设置为true，那么airflow会把过去‘遗漏’的调度执行一遍</li>
</ul>
]]></content>
      
        <categories>
            
            <category> airflow </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[智子模型评估与输出]]></title>
      <url>/2018/07/12/%E6%99%BA%E5%AD%90%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E4%B8%8E%E8%BE%93%E5%87%BA/</url>
      <content type="html"><![CDATA[<p><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.001.jpeg" alt="智子模型评估与输出.001.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.002.jpeg" alt="智子模型评估与输出.002.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.003.jpeg" alt="智子模型评估与输出.003.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.004.jpeg" alt="智子模型评估与输出.004.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.005.jpeg" alt="智子模型评估与输出.005.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.006.jpeg" alt="智子模型评估与输出.006.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.007.jpeg" alt="智子模型评估与输出.007.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.008.jpeg" alt="智子模型评估与输出.008.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.009.jpeg" alt="智子模型评估与输出.009.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.010.jpeg" alt="智子模型评估与输出.010.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.011.jpeg" alt="智子模型评估与输出.011.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.012.jpeg" alt="智子模型评估与输出.012.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.013.jpeg" alt="智子模型评估与输出.013.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.014.jpeg" alt="智子模型评估与输出.014.jpeg"><br><img src="http://alithink.com/img/sophon/estimate/智子模型评估与输出.015.jpeg" alt="智子模型评估与输出.015.jpeg"></p>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[智子数据探索]]></title>
      <url>/2018/06/11/%E6%99%BA%E5%AD%90%E6%95%B0%E6%8D%AE%E6%8E%A2%E7%B4%A2/</url>
      <content type="html"><![CDATA[<p><img src="http://alithink.com/img/sophon/explorer/智子数据探索.001.jpeg" alt="智子数据探索.001.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.002.jpeg" alt="智子数据探索.002.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.003.jpeg" alt="智子数据探索.003.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.004.jpeg" alt="智子数据探索.004.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.005.jpeg" alt="智子数据探索.005.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.006.jpeg" alt="智子数据探索.006.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.007.jpeg" alt="智子数据探索.007.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.008.jpeg" alt="智子数据探索.008.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.009.jpeg" alt="智子数据探索.009.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.010.jpeg" alt="智子数据探索.010.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.011.jpeg" alt="智子数据探索.011.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.012.jpeg" alt="智子数据探索.012.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.013.jpeg" alt="智子数据探索.013.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.014.jpeg" alt="智子数据探索.014.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.015.jpeg" alt="智子数据探索.015.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.016.jpeg" alt="智子数据探索.016.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.017.jpeg" alt="智子数据探索.017.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.018.jpeg" alt="智子数据探索.018.jpeg | left | 747x420"><br><img src="http://alithink.com/img/sophon/explorer/智子数据探索.020.jpeg" alt="智子数据探索.020.jpeg | left | 747x420"></p>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[智子环境搭建历程]]></title>
      <url>/2018/02/24/%E6%99%BA%E5%AD%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8E%86%E7%A8%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>智子 - 韩都衣舍机器学习平台代号😋</p>
</blockquote>
<h1 id="一、spark流派"><a href="#一、spark流派" class="headerlink" title="一、spark流派"></a>一、spark流派</h1><h2 id="1-1-hadoop"><a href="#1-1-hadoop" class="headerlink" title="1.1 hadoop"></a>1.1 hadoop</h2><blockquote>
<p>起初选择使用CDH安装（原因：老环境就用的这个，据说比较稳定），然而在双节点情况下总是出现莫名问题。磕磕绊绊安装好了，实际用起来还是有不少问题（集成环境问题定位好麻烦。。），在尝试几波之后最终选择放弃（期间还麻烦运维妹子重做了系统😂）。想到实际需要的功能并不太多，果断转为人工安装部署。<br>CDH的安装部署过程作为番外放在最后面吧。。。</p>
</blockquote>
<h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>虽然没有安装CDH，还是选用了CDH版的hadoop2.6。（据说体质较好，比较稳健）</p>
<h3 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="https://www.jianshu.com/p/1448d1550c8b" target="_blank" rel="noopener">CentOS 7 集群部署 Hadoop 2.7.3</a></p>
<h3 id="坑位介绍"><a href="#坑位介绍" class="headerlink" title="坑位介绍"></a>坑位介绍</h3><blockquote>
<p>主要记录自己部署时遇到的主要问题，详细步骤可以参考上面的文章</p>
</blockquote>
<h4 id="💩-jps发现竟然木有DataNode"><a href="#💩-jps发现竟然木有DataNode" class="headerlink" title="💩 jps发现竟然木有DataNode"></a>💩 jps发现竟然木有DataNode</h4><blockquote>
<p>之前用CDH安装过一遍hadoop导致部分目录有内容残留</p>
</blockquote>
<ul>
<li>查看$HADOOP_HOME/etc/hadoop/hdfs-site.xml<ul>
<li>namenode路径</li>
<li>datanode路径</li>
<li>删除对应目录下的所有文件</li>
</ul>
</li>
<li>重新执行namenode -format</li>
<li>重启hadoop start-all.sh</li>
</ul>
<h4 id="💩-各种Permission-denied"><a href="#💩-各种Permission-denied" class="headerlink" title="💩 各种Permission denied"></a>💩 各种Permission denied</h4><ul>
<li>先查看各路径是否正确赋权给了hadoop用户<ul>
<li>没有的chown -R hadoop:hadoop 对应路径</li>
</ul>
</li>
<li>当前用户是否已经切换成hadoop用户再执行相关启动命令</li>
</ul>
<h4 id="💩-没有SecondaryNode了"><a href="#💩-没有SecondaryNode了" class="headerlink" title="💩 没有SecondaryNode了"></a>💩 没有SecondaryNode了</h4><ul>
<li>配置$HADOOP_HOME/etc/hadoop/hdfs-site.xml<ul>
<li>name: dfs.namenode.secondary.http-address</li>
<li>value: 0.0.0.0:50090</li>
</ul>
</li>
</ul>
<h2 id="1-2-hive"><a href="#1-2-hive" class="headerlink" title="1.2 hive"></a>1.2 hive</h2><h3 id="版本选择-1"><a href="#版本选择-1" class="headerlink" title="版本选择"></a>版本选择</h3><p>目前最新版：apache-hive-2.3.2-bin</p>
<h3 id="文章参考-1"><a href="#文章参考-1" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="http://blog.csdn.net/u014591781/article/details/52895176" target="_blank" rel="noopener">Hadoop2.6下安装Hive</a></p>
<h3 id="坑位介绍-1"><a href="#坑位介绍-1" class="headerlink" title="坑位介绍"></a>坑位介绍</h3><h4 id="💩-启动时各种缺表"><a href="#💩-启动时各种缺表" class="headerlink" title="💩 启动时各种缺表"></a>💩 启动时各种缺表</h4><ul>
<li>查看$HIVE_HOME/scripts/metastore/upgrade/mysql/hive-schema-2.3.0.mysql.sql</li>
<li>用root用户登录至mysql</li>
<li>创建对应的用户并授权用户（别忘记flush privileges）</li>
<li>然后执行这个初始化sql</li>
</ul>
<h4 id="💩-如何重启hive-metastore"><a href="#💩-如何重启hive-metastore" class="headerlink" title="💩 如何重启hive metastore"></a>💩 如何重启hive metastore</h4><ul>
<li>ps -ef |grep HiveMetaStore</li>
<li>kill -TERM pid</li>
<li>hive –service hiveserver &amp;</li>
</ul>
<h2 id="1-3-sqoop"><a href="#1-3-sqoop" class="headerlink" title="1.3 sqoop"></a>1.3 sqoop</h2><h3 id="版本选择-2"><a href="#版本选择-2" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote>
<p>官网说了诸多sqoop2的好处，最后建议说生产环境不要使用2…</p>
</blockquote>
<p>sqoop1最新版：sqoop-1.4.7.bin__hadoop-2.6.0</p>
<h3 id="文章参考-2"><a href="#文章参考-2" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="https://www.jianshu.com/p/99301eeedd91" target="_blank" rel="noopener">如何将mysql数据导入Hadoop之Sqoop安装</a></p>
<h3 id="坑位介绍-2"><a href="#坑位介绍-2" class="headerlink" title="坑位介绍"></a>坑位介绍</h3><h4 id="💩-发现总是Connection-Failure"><a href="#💩-发现总是Connection-Failure" class="headerlink" title="💩 发现总是Connection Failure"></a>💩 发现总是Connection Failure</h4><blockquote>
<p>mysql场景</p>
</blockquote>
<ul>
<li>检查hadoop集群每台机器与mysql数据源的连通性<ul>
<li>telnet xx.xx.xx.xx 3306</li>
<li>不同的话，申请开通权限即可</li>
</ul>
</li>
</ul>
<h4 id="💩-报出jackson-databind缺少某某方法"><a href="#💩-报出jackson-databind缺少某某方法" class="headerlink" title="💩 报出jackson databind缺少某某方法"></a>💩 报出jackson databind缺少某某方法</h4><ul>
<li>统一hadoop、hive、sqoop各自lib中jackson的版本</li>
<li>选择三者中的最高版本即可</li>
</ul>
<h4 id="💩-报出hive-version与metastore-version不一致"><a href="#💩-报出hive-version与metastore-version不一致" class="headerlink" title="💩 报出hive version与metastore version不一致"></a>💩 报出hive version与metastore version不一致</h4><ul>
<li>如果报出hive版本低于metastore版本（跟我一样）<ul>
<li>关闭版本检查即可</li>
<li>name: hive.metastore.schema.verification</li>
<li>value: false</li>
</ul>
</li>
<li>如果报出hive版本高于metastore版本：<ul>
<li>将元数据库mysql中的对应hive库删除</li>
<li>用对应版本的script重新初始化元数据表</li>
<li>同样禁用掉版本检查吧。。</li>
</ul>
</li>
</ul>
<h4 id="💩-导入hive报错HIVE-CONF-DIR"><a href="#💩-导入hive报错HIVE-CONF-DIR" class="headerlink" title="💩 导入hive报错HIVE_CONF_DIR"></a>💩 导入hive报错HIVE_CONF_DIR</h4><ul>
<li>.bashrc添加<ul>
<li>export HADOOP_CLASSPATH=$HADOOP_CLASSPATH:$HIVE_HOME/lib/*</li>
</ul>
</li>
<li>source .bashrc</li>
</ul>
<h2 id="1-4-spark"><a href="#1-4-spark" class="headerlink" title="1.4 spark"></a>1.4 spark</h2><h3 id="版本选择-3"><a href="#版本选择-3" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote>
<p>从官网下载的时候，记得选择对应的hadoop版本</p>
</blockquote>
<p>spark-2.2.1-bin-hadoop2.6</p>
<h3 id="文章参考-3"><a href="#文章参考-3" class="headerlink" title="文章参考"></a>文章参考</h3><blockquote>
<p>过于简单其实也没有参考什么文章。。</p>
</blockquote>
<p><a href="http://blog.csdn.net/leon_founder/article/details/78715831" target="_blank" rel="noopener">CentOS 7上安装Spark 2.2单机</a></p>
<h2 id="1-5-zeppelin"><a href="#1-5-zeppelin" class="headerlink" title="1.5 zeppelin"></a>1.5 zeppelin</h2><h3 id="版本选择-4"><a href="#版本选择-4" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote>
<p>这里选择了附带所有interpreter的版本</p>
</blockquote>
<p>zeppelin最新版：zeppelin-0.7.3-bin-all</p>
<h3 id="文章参考-4"><a href="#文章参考-4" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="http://blog.csdn.net/u013013024/article/details/79082503" target="_blank" rel="noopener">CDH安装配置zeppelin-0.7.3以及配置spark查询hive表</a></p>
<h3 id="坑位介绍-3"><a href="#坑位介绍-3" class="headerlink" title="坑位介绍"></a>坑位介绍</h3><h4 id="💩-报出jackson版本问题"><a href="#💩-报出jackson版本问题" class="headerlink" title="💩 报出jackson版本问题"></a>💩 报出jackson版本问题</h4><ul>
<li>与之前的问题类似，立刻想到将包统一即可。</li>
</ul>
<h4 id="💩-无法初始化SessionHiveMetaStoreClient"><a href="#💩-无法初始化SessionHiveMetaStoreClient" class="headerlink" title="💩 无法初始化SessionHiveMetaStoreClient"></a>💩 无法初始化SessionHiveMetaStoreClient</h4><blockquote>
<p>由于配置hive之后，需要将hive-site.xml复制HADOOP_CONF_DIR一份，由于zeppelin（支持hive）也需要加载HADOOP_CONF_DIR目录，所以导致无法加载hive元数据，导致异常，此时启动hive的元数据服务在启动zeppelin即可。</p>
</blockquote>
<ul>
<li>拷贝hive-site.xml到$HADOOP_HOME/etc/hadoop</li>
</ul>
<h1 id="二、sklearn流派"><a href="#二、sklearn流派" class="headerlink" title="二、sklearn流派"></a>二、sklearn流派</h1><h2 id="2-1-anaconda与jupyter-猪币特"><a href="#2-1-anaconda与jupyter-猪币特" class="headerlink" title="2.1 anaconda与jupyter(猪币特)"></a>2.1 anaconda与jupyter(猪币特)</h2><h3 id="版本选择-5"><a href="#版本选择-5" class="headerlink" title="版本选择"></a>版本选择</h3><p>python3版本：Anaconda3-5.0.1-Linux-x86_64</p>
<h3 id="文章参考-5"><a href="#文章参考-5" class="headerlink" title="文章参考"></a>文章参考</h3><p><a href="http://blog.csdn.net/c13669463387/article/details/78436691" target="_blank" rel="noopener">在centos7服务器上安装anaconda和jupyter notebook</a></p>
<p><a href="http://blog.csdn.net/u010694764/article/details/76862854" target="_blank" rel="noopener">远程访问</a></p>
<h3 id="坑位介绍-4"><a href="#坑位介绍-4" class="headerlink" title="坑位介绍"></a>坑位介绍</h3><blockquote>
<p>此处应该有掌声，配置太简单了，与spark流派形成鲜明的对比。<br>没啥特别的坑位需要备忘，一切都水到渠成。</p>
</blockquote>
<h1 id="三、数据同步策略"><a href="#三、数据同步策略" class="headerlink" title="三、数据同步策略"></a>三、数据同步策略</h1><h2 id="3-1-sqoop同步策略"><a href="#3-1-sqoop同步策略" class="headerlink" title="3.1 sqoop同步策略"></a>3.1 sqoop同步策略</h2><p><img src="https://i.loli.net/2018/12/21/5c1caba11079c.jpg" alt="15194416883439"></p>
<h3 id="具体sqoop同步示例"><a href="#具体sqoop同步示例" class="headerlink" title="具体sqoop同步示例"></a>具体sqoop同步示例</h3><blockquote>
<p>sqoop import -Dorg.apache.sqoop.splitter.allow_text_splitter=true –connect jdbc:mysql://xx.xx.xx.xx/数据库名?characterEncoding=utf-8 –username 数据库用户名 –password 数据库密码 –num-mappers 4 –table 源表名 –hive-import –hive-overwrite –hive-table hive表名 –split-by 切分字段（如果有主键默认使用主键）</p>
</blockquote>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul>
<li>同步速度真心快。（为什么会这么快呢？3000多万的表15分钟左右）</li>
<li>hive源数据放置在磁盘中，无需全部加载入内存再进行筛选处理。</li>
<li>似乎对于源数据库压力不大。</li>
<li>最终选定该方案。</li>
</ul>
<h2 id="3-2-mysql直接拉取csv"><a href="#3-2-mysql直接拉取csv" class="headerlink" title="3.2 mysql直接拉取csv"></a>3.2 mysql直接拉取csv</h2><blockquote>
<p>在sqoop环境起初搭建不顺利的背景下提出的备选方案。</p>
</blockquote>
<h3 id="同步示例"><a href="#同步示例" class="headerlink" title="同步示例"></a>同步示例</h3><blockquote>
<p>mysql -u数据库用户名 -p数据库密码 -hxx.xx.xx.xx 数据库名 -B -e “select * from `表名`;” | sed ‘s/\t/“,”/g;s/^/“/;s/$/“/;s/\n//g’ &gt; 导出的csv名</p>
</blockquote>
<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><ul>
<li>同步速度较sqoop慢一些。（3000多万的表半个小时左右）</li>
<li>配置简单，只要网络通即可。</li>
<li>csv文件较大，直接用pandas读取的话，内存占用会暴涨。<ul>
<li>不过pandas的大数据集处理速度还是挺快的。</li>
</ul>
</li>
<li>小数据集场景灵活使用。</li>
</ul>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><blockquote>
<p>经此一役，收获颇多，除了获取知识之外，也总结了几则六字真言，与君共勉。</p>
</blockquote>
<ul>
<li>多备份，少吃亏</li>
<li>多联想，勤记录</li>
<li>多虚拟，后物理</li>
<li>多尝试，不放弃</li>
</ul>
<h1 id="五、番外"><a href="#五、番外" class="headerlink" title="五、番外"></a>五、番外</h1><h2 id="CDH篇"><a href="#CDH篇" class="headerlink" title="CDH篇"></a>CDH篇</h2><ul>
<li>修改hostname hostnamectl set-hostname</li>
<li>配置hosts</li>
<li>创建用户hadoop adduser</li>
<li>passwd</li>
<li>配置visudo</li>
<li>reboot</li>
<li>切换至hadoop用户：<ul>
<li>ssh免密配置<ul>
<li>ssh-keygen -t rsa -P “”</li>
<li>cat id_rsa.pub &gt;&gt; authorized_keys</li>
<li>多服务器配置同步到master<ul>
<li>scp id_rsa.pub sophonmaster:/home/hadoop/.ssh/id_rsa.pub.s1</li>
<li>cat id_rsa.pub.s1 &gt;&gt; authorized_keys</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>root用户密码未知，新创建hadoop用户，配置对应密码<ul>
<li>visudo<ul>
<li>hadoop ALL=(root)NOPASSWD:ALL</li>
<li>wheel nopasswd放开</li>
</ul>
</li>
</ul>
</li>
<li>消除警告：<ul>
<li><img src="https://i.loli.net/2018/12/21/5c1caba0b8bb0.jpg" alt="15180588854980"></li>
<li>echo 0 &gt; /proc/sys/vm/swappiness</li>
<li>echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</li>
<li>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</li>
</ul>
</li>
<li>关闭防火墙<ul>
<li>systemctl stop firewalld</li>
<li>systemctl disable firewalld</li>
<li>systemctl status firewalld</li>
</ul>
</li>
<li>关闭SELinux(centos7 默认关闭)<ul>
<li>/etc/selinux/config</li>
</ul>
</li>
<li>常规CDH安装方式：<ul>
<li>将cloudera-manager.repo文件拷贝到所有节点的/etc/yum.repos.d/文件夹下</li>
<li>验证repo文件是否起效<ul>
<li>yum list|grep cloudera</li>
<li>如果列出的不是你安装的版本，执行下面命令重试</li>
<li>yum clean all</li>
<li>yum list | grep cloudera</li>
</ul>
</li>
<li>将之前下载的rpms文件拷贝到所有节点下（任意目录）<ul>
<li>切换到rpms目录下，执行</li>
<li>yum -y install *.rpm</li>
</ul>
</li>
<li>将之前下载的Parcel那3个文件拷贝到/opt/cloudera/parcel-repo目录下（如果没有该目录，请自行创建）<ul>
<li>至此，/opt/cloudera/parcel-repo下面有三个文件： CDH-5.2.0-1.cdh5.2.0.p0.36-el6.parcel,mainfest.json,CDH-5.2.0-1.cdh5.2.0.p0.36-el6.parcel.sha</li>
</ul>
</li>
<li>主节点启动manager安装：<ul>
<li>sudo chmod +x ./cloudera-manager-installer.bin</li>
<li>./cloudera-manager-installer.bin</li>
</ul>
</li>
<li>删除已经存在的db.properties<ul>
<li>mv /etc/cloudera-scm-server/db.properties /etc/cloudera-scm-server/db.properties.bak</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《兜兜睡前故事》-- 杰克]]></title>
      <url>/2018/02/02/%E5%85%9C%E5%85%9C%E6%BB%91%E6%9D%BF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天兜兜突然说：“爸爸，我想听一个滑板车的故事”。<br>于是就有了这么个故事。</p>
<p>通过故事打算让她懂得什么？</p>
<p>勇于尝试、不惧失败、坚持、勤学善问<br>那么故事开始吧 ^_^</p>
</blockquote>
<p><img src="https://i.loli.net/2018/12/21/5c1caba0d6f67.jpg" alt="兜兜滑板"></p>
<p>曾经有一个小男孩，他的名字叫杰克。</p>
<p>今天是杰克的3岁生日，作为生日礼物呢，他的爸爸送给他了一个滑板车。这个特别的“滑板车”跟兜兜有的这个不太一样。这个滑板车没有可以手抓的扶手，只有一个板子以及板子下面的四个轮子，它还有一个更贴切的名字叫做“滑板”。</p>
<p>杰克也是第一次见到这个神奇的滑板车，他之前呢，跟兜兜一样，也只会玩带扶手的滑板车。<br>他很好奇，这个滑板该如何玩呢？他一支脚丫小心翼翼的踏了上去，当打算把另一支脚丫也挪上去的时候，滑板往前一滑，杰克摔了一个屁股蹲。</p>
<p>杰克大声的哭了起来，屁股也在火辣辣的痛，一边哭着一边喊：“这个滑板不好，再也不玩它了。。唔。。”。</p>
<p>在一旁的爸爸走过来，扶起了杰克，对他说：“杰克，你也摔跤了呀，看来跟我小时候一样呀。你知道吗，杰克，爸爸小时候玩滑板的时候，摔的可惨了”。爸爸摸了摸自己的屁股，若有所思的说：“啊~我想当初估计屁股肯定已经被摔成四半儿了吧”。</p>
<p>杰克哈哈笑了起来，问爸爸：“真的呀，爸爸你小时候玩这个也摔跤了呀~”</p>
<p>爸爸认真的说：“是呀，当时摔的好惨呀，不过我后来还是学会玩滑板啦，杰克你想知道爸爸是怎么学滑板的吗？”。杰克说：“嗯嗯嗯，我要听”。</p>
<p>爸爸点了点头说：“好吧，那我就来讲讲我学滑板的故事吧~”。</p>
<p>“刚开始，我也跟杰克一样，摔了好多屁股蹲，咳咳，具体多少次我都记不清楚了。。”</p>
<p>“但是我并没有因为疼就放弃了，因为那时候玩具少，有这么个玩具就很不容易啦。我于是在一次次摔跤、一次次失败中总结经验。一个星期后，我竟然神奇的学会了玩滑板，好吧，只是不会那么频繁摔跤啦。”</p>
<p>“一个月过去啦，我的滑板技术越来越好啦，甚至可以滑着滑板去学校。然后我竟然教会了我的一些同学们玩滑板，我是不是很厉害呀？😎”</p>
<p>“杰克，要不要爸爸也教教你呀，爸爸相信你一定能学会玩滑板哒~”</p>
<p>杰克摸了摸头说：“好吧，我再试试看，爸爸你教教我吧”。</p>
<p>杰克爸爸于是给杰克仔细讲了讲玩滑板的一些方法窍门。杰克虽然听得很认真，不过还是摔了好几跤。但是杰克想像爸爸那样学会玩滑板，而且爸爸也一直在身边鼓励教导着他，他于是坚持了下来。两天之后，杰克已经可以在滑板上比较稳的前进啦。一个星期后，杰克学会了玩滑板。感受到滑板的乐趣后，他已经完全忘记了之前学习滑板时摔过的屁股蹲了。</p>
<p>刚开始学做一件事情，起初往往都不会那么顺利，就像学滑板这样，总要摔那么几个屁股蹲。但是如果想要真正学会它，感受学会它后所能收获的快乐，就需要坚持与勇敢尝试了。相信自己的力量，多向身边的人请教，比如有不懂的地方，可以问问爸爸妈妈或者奶奶，有了这些帮助呢，就会让做这件事情，变得稍稍容易一些。</p>
<p>好了，今天的故事讲完啦，睡吧，晚安，爸爸会陪在你身边，伴你成长。</p>
]]></content>
      
        <categories>
            
            <category> 兜兜 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《兜兜睡前故事》-- 安妮]]></title>
      <url>/2018/01/31/%E5%85%9C%E5%85%9C%E7%9D%A1%E5%89%8D%E6%95%85%E4%BA%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>兜兜快三岁了，渐渐进入了第二个叛逆期，该如何告诉她一些事情呢，既然每晚都要讲睡前故事，索性原创一个故事吧。</p>
<p>通过故事打算让她懂得什么？</p>
<p>珍惜身边的东西（食物、玩具等）、学会整理自己的东西、发现美好不抱怨、体会独立与坚持、感恩之心。<br>那么故事开始吧 ^_^</p>
</blockquote>
<p>很久很久以前，在离城堡不远的地方有一个小村庄。</p>
<p>村庄里面有一个小女孩，她的名字叫作安妮。安妮多大呢，大约就跟兜兜这么大吧，也是一个漂亮的小姑娘。</p>
<p>安妮家并不那么富裕，甚至说有一些贫穷。安妮家里有爸爸、妈妈还有奶奶。每天爸爸妈妈都要早出晚归，出去工作，努力赚钱。因为只有赚到钱，才能去买面包、馒头这些吃的东西，才能勉强维持一家人的生计。因为家里吃的东西都来之不易，都是爸爸妈妈辛苦工作换来的，所以安妮从小就养成了珍惜食物的好习惯。每到吃饭的时候，安妮都主动坐到自己的小板凳上，自己吃饭。每次都把自己的那份食物吃的干干净净，从不挑食，因为她知道只有好好吃饭，吃各种食物才能让自己的身体棒棒哒，快快成长~</p>
<p>安妮只有一个布娃娃，并不像兜兜这样有那么多的玩具。安妮的这个娃娃虽然是奶奶用旧衣服缝制而成的，但却非常的漂亮，安妮也非常喜欢它，娃娃身上总带着奶奶般暖暖的味道。安妮非常的爱护自己的娃娃，就跟爱护她其它的东西一样。每次玩完娃娃，就把它放到一个干净的小盒子中。自己平时画画用的纸笔用完之后，也都好好地整理整齐。因为她知道这些东西都来之不易，要好好珍惜，才能陪伴她更长的时间。</p>
<p>安妮生日，家里并没有钱去买好吃的奶油蛋糕。安妮并没有吵吵着像其他小朋友那样要吃蛋糕，因为她觉得只要一家人聚在一起陪她过生日就很开心了。爸爸妈妈那天早早的就下班回家。一家四口坐在饭桌前，桌子上点着一支蜡烛，安妮高兴的闭上眼睛许下一个生日愿望，然后睁开眼睛一口气吹灭蜡烛，祈祷自己的愿望能够实现。她把愿望悄悄的告诉我了，兜兜你想知道她许的什么愿望吗？她想快快长大，好好学习，学好多本领，好好工作，用自己的劳动赚好多的钱，让家里的生活变得更好一些。</p>
<p>安妮渐渐长大了，就像她许的那个愿望那样，好好学习，学到了好多本领。她从小学会了独立与坚持。记得她学跳舞的时候，起初跳得很不好，然而她并没有放弃，而是多加练习，最后出色的完成了一场舞蹈表演。安妮渐渐养成的这些性格习惯，让她出色的完成了很多工作任务。付出的多，回报的也就多。有的时候呢，是金钱上的回报；有的时候呢，可能是能力上的提升，做这些事情以后就更加得心应手啦。</p>
<p>安妮长大了，爸爸妈妈尤其是奶奶也都渐渐变老了。安妮知道家人们为照顾小时候的她付出了很多，现在她长大了，她要去好好地照顾自己的家人们。她经常回家，跟家人们聊天，彼此倾诉这段日子的生活。像安妮小时候那样，一家人经常在一起吃饭，虽然生活并不那么富裕，但他们都感受到了那最简单的幸福。</p>
<p>兜兜喜欢安妮吗？是不是有些地方可以向安妮小朋友学习呢？<br>好了，今天的故事讲完啦，睡吧，晚安，爸爸会陪在你身边，伴你成长。</p>
]]></content>
      
        <categories>
            
            <category> 兜兜 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[岁月 - 共度余下的时光]]></title>
      <url>/2018/01/21/%E5%B2%81%E6%9C%88/</url>
      <content type="html"><![CDATA[<h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><p><a href="https://itunes.apple.com/cn/app/%E5%B2%81%E6%9C%88-%E5%85%B1%E5%BA%A6%E4%BD%99%E4%B8%8B%E7%9A%84%E6%97%B6%E5%85%89/id1334705330?mt=8" target="_blank" rel="noopener">App Store下载地址</a><br><img src="https://i.loli.net/2018/12/21/5c1caba0be7e5.png" alt="qrcode"></p>
<h2 id="先立Flag😇"><a href="#先立Flag😇" class="headerlink" title="先立Flag😇"></a>先立Flag😇</h2><p>无论是否继续从事移动端方向，每年都会抽时间独立设计研发一枚App。并不那么看重实际收入，在乎的是从产品设计、UED到研发与运营的综合磨砺~</p>
<blockquote>
<p>番外：这个app已经拖延了有半年之久，这一晃快过年了，赶紧趁周末集中收了收尾。。。<br>App都是全球市场哒，顺便锻炼了下我蹩脚的英文=。=</p>
</blockquote>
<h2 id="一、产品向"><a href="#一、产品向" class="headerlink" title="一、产品向"></a>一、产品向</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>某日刷头条，刷到了类似“人生A4纸”的实验视频（具体视频已经找不到了。。）。实验对当时的自己触动很大，可能跟那时自己的生活也有关系吧。于是就决定利用自己的能力做一个App去帮助我们不要留下遗憾。</p>
<blockquote>
<p>这里搜到几个相似的视频，列在这里吧。<br><a href="http://v.youku.com/v_show/id_XOTMyNjI5NzMy.html?spm=a2h0k.8191407.0.0&amp;from=s1.8-1-1.2&amp;f=27605031" target="_blank" rel="noopener">人生A4纸解释</a><br><a href="https://v.qq.com/x/page/e01933oenij.html" target="_blank" rel="noopener">人生A4纸社会实验</a></p>
</blockquote>
<h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>岁月流逝，流出一缕清泉，流出一阵芳香；齿月年轮，只剩下苍白的脸，无奈的守候；回忆流沙，谁都看不到他的身影，谁都听不到他的脚步，一切都在流逝中进行，在流逝中生长。</p>
<p>我们尚还年轻，但亲人们却已渐渐老去，对他们来说剩余可支配的岁月已不如我们一般充裕。</p>
<p>人这一辈子，以百年计量，最后十年，身体行动已不灵便。父母们为我们辛苦了大半辈子，退休之后，实则乐年岁月已无多。珍惜与至亲在一起的每一年，忙碌的生活，也总能拿出几日专心的陪伴他们。不要做让自己的后悔的事情。</p>
<p>如果有一天，你发现父母老是咳个不停；如果有一天，你发现父母过马路反应慢了；如果有一天，你发现父母不再爱出门；如果有一天，你发现父母脸上多了皱纹；如果有这么一天，说明父母真的老了…… 树欲静而风不止、子欲养而亲不在，你留意过自己的父母吗？</p>
<h3 id="“岁月”能帮到什么"><a href="#“岁月”能帮到什么" class="headerlink" title="“岁月”能帮到什么"></a>“岁月”能帮到什么</h3><p>“岁月”帮您生成自己与亲人朋友们的岁月卡片，会默认刨去生命最后的十年，真实显露出你们可共度岁月的珍贵。</p>
<p>“岁月”帮您生成从现在到他们生命尽头每一年的计划卡片，每一年计划为他们做一些事情，珍视在一起的每一年。</p>
<h2 id="二、UED"><a href="#二、UED" class="headerlink" title="二、UED"></a>二、UED</h2><h3 id="“岁月”模样"><a href="#“岁月”模样" class="headerlink" title="“岁月”模样"></a>“岁月”模样</h3><p><img src="https://i.loli.net/2018/12/21/5c1cabba61943.png" alt="OneLifeGloba"></p>
<h3 id="设计要素"><a href="#设计要素" class="headerlink" title="设计要素"></a>设计要素</h3><ul>
<li>卡片式统一风格</li>
<li>字幕式引导(初始化 + 卡片生成)：<ul>
<li>增加仪式感与冥想间隙</li>
<li>沉浸式体感</li>
</ul>
</li>
<li>动效<ul>
<li>卡片进度重放动画</li>
<li>剩余岁月数字倒计时</li>
<li>controller切换动画逻辑划分</li>
</ul>
</li>
<li>配色（一段艰辛的尝试）<ul>
<li>sip爬取了多个dribbble相关配色方案</li>
<li>不断尝试调整</li>
<li>男式配色与女士配色的区分</li>
</ul>
</li>
</ul>
<h2 id="三、研发"><a href="#三、研发" class="headerlink" title="三、研发"></a>三、研发</h2><blockquote>
<p>额。。真正用于研发的时间其实并不多。。</p>
</blockquote>
<h3 id="用到了什么"><a href="#用到了什么" class="headerlink" title="用到了什么"></a>用到了什么</h3><ul>
<li>Swift4: 顺道熟悉了一遍语法知识。猫神的书第一时间推送了更新，赞一个哈。</li>
<li>WCDB: 微信开源的数据库封装，实践整体效果不错。</li>
<li>RazzleDazzle: 借助该库封装了一个字幕式动画组件。</li>
<li>Xcode9: 整体好评，有些bug也是醉了。。。（新模拟器截商店展示图好痛苦😂）</li>
<li>。。。</li>
</ul>
<h3 id="学到了什么"><a href="#学到了什么" class="headerlink" title="学到了什么"></a>学到了什么</h3><blockquote>
<p>以温故知识为主，毕竟目前已经转战ML，并未采用较为突进的架构设计。</p>
</blockquote>
<ul>
<li>iPhoneX相关适配原则。</li>
<li>Swift4迭代学习。</li>
<li>Xcode9构建上传应用的流程体验。</li>
<li>。。。</li>
</ul>
<h2 id="四、运营"><a href="#四、运营" class="headerlink" title="四、运营"></a>四、运营</h2><blockquote>
<p>大大的短板，不过身边有好哥们PD(The One)这块比较擅长，今后可以多多请教。</p>
</blockquote>
<p>因为应用为全球市场，除中国大陆外，准备重点尝试下Apple Search Ads的效果。<br>（国内为啥迟迟没有开放。。擦）</p>
<h2 id="Next"><a href="#Next" class="headerlink" title="Next"></a>Next</h2><ul>
<li>加入更多的卡片扩展（比如3张生命卡片的链接）。Link more life.</li>
<li>规划部分的维度细化。</li>
<li>。。。</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>“时光匆匆”<br>“是否忘记了某个人”<br>“某位很重要的人”<br>“可能你还年轻”<br>“他们却已悄悄老去”<br>“可共度的岁月已不多”<br>“一起为他们做些什么吧”</p>
<blockquote>
<p>2018年1月31日前应用限免，感兴趣的同学多多给予反馈建议哈</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 个人作品 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[iOSer's 跨界之路]]></title>
      <url>/2017/11/10/iOSer's%E8%B7%A8%E7%95%8C%E4%B9%8B%E8%B7%AF/</url>
      <content type="html"><![CDATA[<blockquote>
<p>又到一年双十一，做一下从阿里回家这段日子的思想汇报吧~</p>
</blockquote>
<h2 id="Part-One-在阿里这段日子的收获"><a href="#Part-One-在阿里这段日子的收获" class="headerlink" title="Part One 在阿里这段日子的收获"></a>Part One 在阿里这段日子的收获</h2><blockquote>
<p>呜谢这段日子阿里小伙伴们的帮助与陪伴（人太多，就不一一感谢啦😙）。</p>
</blockquote>
<h3 id="一、技能"><a href="#一、技能" class="headerlink" title="一、技能"></a>一、技能</h3><h4 id="Develop"><a href="#Develop" class="headerlink" title="Develop"></a>Develop</h4><blockquote>
<p>很多东西都是相通的，许多知识都可以互相反哺。<br>回忆几个印象深刻的侧影吧（排名不分先后）。</p>
</blockquote>
<ul>
<li>跟着土土哥反编译源码探究一个诡异问题的内在原因。</li>
<li>和老谭一起讨论一个问题的最佳实现策略。（代码生成器。。超越手淘的金钟罩）</li>
<li>毒姐号称要超越YY的缓存库。</li>
<li>晓明哥惊世骇俗的服务中间层SP。</li>
<li>平哥的数据驱动型UI组件库。（以及对胸部的了解。。。）</li>
<li>宪华的只要两行代码~（强调对于代码的封装与精简极致）</li>
<li>茶哥、远哥对于组件化的规划与推进。</li>
<li>贤哥RTL的完美方案。</li>
<li>东伟网络库与混合容器（包含weex）的整合优化。</li>
<li>仁哥：“多思考总结，做每件事情最后能让你得到些什么”（偶尔看到仁哥代码的喜悦）。😇</li>
</ul>
<h4 id="PM"><a href="#PM" class="headerlink" title="PM"></a>PM</h4><blockquote>
<p>免责声明，粗略一写，纯个人体会😆</p>
</blockquote>
<p><img src="https://i.loli.net/2018/12/21/5c1cabc077e8b.png" alt="阿里项目流程"></p>
<h3 id="二、思想"><a href="#二、思想" class="headerlink" title="二、思想"></a>二、思想</h3><blockquote>
<p>其实感觉来阿里的这段日子，思想上的转变可能更重要一些。</p>
</blockquote>
<h4 id="产品Owner意识"><a href="#产品Owner意识" class="headerlink" title="产品Owner意识"></a>产品Owner意识</h4><blockquote>
<p>体会颇深。</p>
</blockquote>
<p>程序猿们通过对于产品的思考，形成一个可行的初步规划（先跟自己的主管交流一下）。然后去跟产品交流这个规划的可行性，从不同角度达成共识后，技术发起的产品需求便会跟随迭代推进下去。</p>
<p>程序猿对于产品演进的方向会有自己的思考，结合技术视野，往往能与产品碰撞出不少可行的方案。对于程序猿产出的产品目标是可以写进自己KPI中的，那么也就会以需求Owner的角色负责将方案完善，整合资源，推进产品目标的达成。</p>
<p>对于业务产品的深度理解、思考与实践，作为一个产品的“Owner”去打磨她，她也会用最好的数据表现来回报Owner们–人人都是产品经理。</p>
<h4 id="善于总结"><a href="#善于总结" class="headerlink" title="善于总结"></a>善于总结</h4><blockquote>
<p>说到总结，也是因为之前总结了一篇博文，才被宪华推荐的。</p>
</blockquote>
<h4 id="1-知识"><a href="#1-知识" class="headerlink" title="1. 知识"></a>1. 知识</h4><p>小伙伴们都很善于总结，有的画导图，有的写ppt，团队云雀上的分享也干货满满（于是回来后，赶紧自己也用gitbook自建了一个团队的知识库😎）。</p>
<blockquote>
<p>带来的好处很多，比如知识结构化、系统化、知识的传承等。</p>
</blockquote>
<p>关注每次努力后自己的成长。有些功能可能上线不久就废弃了，不用伤心，因为宝贵的知识、经验与感悟已经留在我们的身上。</p>
<h4 id="2-数据"><a href="#2-数据" class="headerlink" title="2.数据"></a>2.数据</h4><p>对自己负责模块的数据表现应该做到了如指掌。数据表现背后的意义是什么；如何埋点才能完善数据路径，进而准确推算用户行动链。有了完善的数据行为反馈，对于引导未来的产品方向具有重要意义。</p>
<blockquote>
<p>回来的这段日子，自己的职业方向跟数据更亲密了，接下来总结下这段时间搞得一些东东（想到哪写到哪，不苛求逻辑性。。。）。</p>
</blockquote>
<h2 id="Part-Two-为什么回来"><a href="#Part-Two-为什么回来" class="headerlink" title="Part Two 为什么回来"></a>Part Two 为什么回来</h2><blockquote>
<p>感谢文哥、剑哥、亮哥等韩都老朋友的收留。😋</p>
</blockquote>
<ul>
<li><p>横向发展的思考：</p>
<ul>
<li>对于移动端大环境的思考。</li>
<li>横向扩展：<ul>
<li>对于AI方向的思考尝试。</li>
<li>大前端跟潮。</li>
<li>后端知识弥补。</li>
<li>项目管理尝试。</li>
<li>。。。</li>
</ul>
</li>
</ul>
</li>
<li><p>家庭生活因素的综合考量：</p>
<ul>
<li>家人关怀。</li>
<li>房价。。。</li>
<li>上学。。。</li>
<li>。。。</li>
</ul>
</li>
</ul>
<h2 id="Part-Three-折腾了什么"><a href="#Part-Three-折腾了什么" class="headerlink" title="Part Three 折腾了什么"></a>Part Three 折腾了什么</h2><blockquote>
<p>一晃回来快3个月了。</p>
</blockquote>
<h3 id="一、对自己的几点要求"><a href="#一、对自己的几点要求" class="headerlink" title="一、对自己的几点要求"></a>一、对自己的几点要求</h3><ul>
<li>既然是跨界，开始往往会比较痛苦，坚持不退缩。</li>
<li>不为自己设限。</li>
<li>多总结多沉淀。</li>
<li>保持产品思维。</li>
</ul>
<h3 id="二、技术栈"><a href="#二、技术栈" class="headerlink" title="二、技术栈"></a>二、技术栈</h3><blockquote>
<p>全是一波新东西，受益匪浅。</p>
</blockquote>
<h4 id="1-机器学习"><a href="#1-机器学习" class="headerlink" title="1. 机器学习"></a>1. 机器学习</h4><blockquote>
<p>感谢文哥的悉心教导😘</p>
</blockquote>
<h4 id="搞出来的一些东东"><a href="#搞出来的一些东东" class="headerlink" title="搞出来的一些东东"></a>搞出来的一些东东</h4><ul>
<li>spark mllib流派：<a href="http://alithink.com/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E6%A1%88%E4%BE%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">销售预测案例源码分析</a></li>
<li>sklearn流派：<a href="http://alithink.com/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E7%88%86%E6%97%BA%EF%BC%88scikit-learn%E7%89%88%E6%9C%AC%EF%BC%89/" target="_blank" rel="noopener">销售预测爆旺（scikit-learn版本）</a></li>
</ul>
<h4 id="几点体会"><a href="#几点体会" class="headerlink" title="几点体会"></a>几点体会</h4><ul>
<li>记得路上听得到音频时也讲过，做AI或者ML方向，坚实的理论基础以及对于业务的深刻理解是非常重要的。而这块也是目前我最最最欠缺的（当然其它方面也欠缺😆）。将来要猛补这方面知识。<ul>
<li>推荐几本入门的好书：<ul>
<li>spark方向： 《spark机器学习》（PACKT）</li>
<li>sklearn方向（推荐这个方向，解决方案更丰富一些）：《白话大数据与机器学习》<ul>
<li>这本书估计高手们都不屑一顾吧，不过感觉很适合我。从最基础的理论开始讲起，对于已经把高数，概率论已经忘干净的人士来说，太有帮助了。。（部分笔记分享一下）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2018/12/21/5c1cabc0cdd3c.png" alt="白话大数据与机器学习"></p>
<ul>
<li>良好的数据基础是必要条件。良好的周期性数据积累，对于各数据变动节点相关数据的完备与丰富，会为ML分析打下坚实的基础。</li>
<li>数据探索是个体力活。不断对比相关度，探索特征相关性。发现一条规律弥足珍贵。</li>
<li>传统的专家模式，在维度较少的情况下，还能看的过来；维度数量上来了，机器的优势就上来了。</li>
<li>各种算法都是浮云，先做LR再说。。（高手绕行）</li>
<li>结果的可解释性。。。</li>
</ul>
<h4 id="2-前后端"><a href="#2-前后端" class="headerlink" title="2. 前后端"></a>2. 前后端</h4><blockquote>
<p>我其实是vue党。。</p>
</blockquote>
<h4 id="智子（Flask-Bootstrap）"><a href="#智子（Flask-Bootstrap）" class="headerlink" title="智子（Flask + Bootstrap）"></a>智子（Flask + Bootstrap）</h4><p><img src="https://i.loli.net/2018/12/21/5c1caba0f169d.jpg" alt="智子效果"></p>
<blockquote>
<p>使用Flask的原因: 算法模型使用sklearn搞得，同是python好基友，于是就直接上手了。</p>
</blockquote>
<ul>
<li>Flask真的很轻，搭建起来异常轻松愉快，推荐一本书《Flask Web开发：基于Python的Web应用开发实战》。<ul>
<li>单文件也能搞定，但工程拆分之后逻辑就更清楚了（虽然麻烦不少）。</li>
<li>建议用python virtual环境来搞，可以类比为npm package, cocoapods podfile。</li>
<li>千万不要virtual clear，太恐怖了，程序一下就没有了，真的啥都不剩了。。。</li>
</ul>
</li>
<li>小应用配合WTForms，前后端表单开发效率神器。</li>
<li>python写出来的代码看起来还是很德味的，对python的好感度大为提升。</li>
<li>bootstrap程序猿UI神器。（至少看起来不会那么丑了。。）</li>
</ul>
<h4 id="有趣的双十一（实时Dashboard-angular-nebular-Elasticsearch）"><a href="#有趣的双十一（实时Dashboard-angular-nebular-Elasticsearch）" class="headerlink" title="有趣的双十一（实时Dashboard angular + nebular + Elasticsearch）"></a>有趣的双十一（实时Dashboard angular + nebular + Elasticsearch）</h4><blockquote>
<p>vue党为什么用angular: 因为想用nebular的这套主题。。。</p>
</blockquote>
<p><img src="https://i.loli.net/2018/12/21/5c1cabbaaa82b.png" alt="interesting"></p>
<ul>
<li>直接看Angular官方文档吧，更新速度实在太快了。。<ul>
<li>官方的英雄实例很赞，适合入门上手。</li>
<li>typescript用起来还是很爽的。</li>
<li>整体还是略重，cli很完备，如果没有cli配个工程估计比较痛苦了。</li>
<li>先查看自身逻辑再怀疑库逻辑。。（一个ngfor绑定的问题，定位半天发现是自己逻辑写错了。。）</li>
</ul>
</li>
<li>es压秒级查询速度：<ul>
<li>结合Angular的数据绑定，实时更新效果不错。</li>
<li>es的查询逻辑可以封装一波，利于复用。</li>
<li>小白查询编写技巧：<ul>
<li>书籍推荐：《Elasticsearch服务器开发》（PACKT）</li>
<li>先用Elasticsearch sql生成一个基本的模板（往往是无法直接拿来用的。。），再进行调整修改。</li>
<li>查询一定要用keyword…</li>
</ul>
</li>
<li>之前试过es的morelikethis 指定匹配字段，相似度神器哈</li>
</ul>
</li>
</ul>
<h4 id="3-UED"><a href="#3-UED" class="headerlink" title="3. UED"></a>3. UED</h4><blockquote>
<p>零星接了点这方面的货，还蛮有意思的哈</p>
</blockquote>
<h4 id="培训视频"><a href="#培训视频" class="headerlink" title="培训视频"></a>培训视频</h4><p><img src="https://i.loli.net/2018/12/21/5c1cabba6503a.png" alt="培训"></p>
<h4 id="双十一H5直播间设计"><a href="#双十一H5直播间设计" class="headerlink" title="双十一H5直播间设计"></a>双十一H5直播间设计</h4><p><img src="https://i.loli.net/2018/12/21/5c1caba118340.png" alt="直播间"></p>
<h4 id="双十一数据海报"><a href="#双十一数据海报" class="headerlink" title="双十一数据海报"></a>双十一数据海报</h4><p><img src="https://i.loli.net/2018/12/21/5c1cabba5d5a8.png" alt="report"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>持续学习，共同成长。</p>
<p>最后预祝今晚双十一：“大吉大利，晚上吃鸡~”🐥🐥🐥🐥🐥🐥</p>
]]></content>
      
        <categories>
            
            <category> 回忆录 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[xgboost填坑]]></title>
      <url>/2017/11/09/xgboost%E5%A1%AB%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><h3 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h3><ul>
<li><code>git clone --recursive https://github.com/dmlc/xgboost</code></li>
<li>gcc6 install<ul>
<li>gcc7支持有问题</li>
<li>降级版本安装<code>brew install gcc@6 --without-multilib</code></li>
</ul>
</li>
<li>配置与编译</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd xgboost; cp make/minimum.mk ./config.mk; make -j4</span><br><span class="line">    </span><br><span class="line">// config.mk中需要指定gcc版本  gcc-6/g++-6</span><br><span class="line">cd xgboost; cp make/config.mk ./config.mk; make -j4</span><br></pre></td></tr></table></figure>
<ul>
<li><p>【可选】清楚之前的编译内容</p>
<ul>
<li>make clean</li>
<li>make distclean</li>
</ul>
</li>
<li><p>终极情况。。。</p>
<ul>
<li><p>清理系统版本gcc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/bin/</span><br><span class="line">rm cc gcc c++ g++</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>* 配置6系列的gcc，注意看一下自己gcc的版本号

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/Cellar/gcc\@6/6.4.0/bin/gcc-6 cc</span><br><span class="line">ln -s /usr/local/Cellar/gcc\@6/6.4.0/bin/gcc-6 gcc</span><br><span class="line">ln -s /usr/local/bin/c++-6 c++</span><br><span class="line">ln -s /usr/local/bin/g++-6 g++</span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li>如何安装到anaconda<ul>
<li><code>sudo /Users/alithink/anaconda/bin/ipython3 setup.py install</code></li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[销售预测爆旺（scikit-learn版本）]]></title>
      <url>/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E7%88%86%E6%97%BA%EF%BC%88scikit-learn%E7%89%88%E6%9C%AC%EF%BC%89/</url>
      <content type="html"><![CDATA[<blockquote>
<p>悼念一下回归模型的悲剧，先尝试一下分类模型，稍后再整他</p>
</blockquote>
<h2 id="1-数据探索"><a href="#1-数据探索" class="headerlink" title="1 数据探索"></a>1 数据探索</h2><blockquote>
<p>sparkSQL支持用sql对数据集进行分析，数据探索工作仍然大部分放在spark中来完成</p>
</blockquote>
<h3 id="1-1-🔑发现的一些相关性"><a href="#1-1-🔑发现的一些相关性" class="headerlink" title="1.1 🔑发现的一些相关性"></a>1.1 🔑发现的一些相关性</h3><blockquote>
<p>对应的数值越接近1表示正相关性越大，越接近-1表示负相关性越大，越接近0表示相关性越小</p>
</blockquote>
<ul>
<li>销售额的相关度往往好于销量<ul>
<li>毛利率、销量以及库存周转率的权衡在销售额上综合体现了？</li>
<li>销售任务的导向作用?</li>
</ul>
</li>
<li><p>排除极low款与爆款的前提下</p>
<ul>
<li>新货前30天预测后30天相关性较大</li>
<li><p>新货前30天预测整个商品季相关性较大</p>
<ul>
<li>放开爆款，反而销量的相关度上去了</li>
<li>销售额的相关度有所下降</li>
</ul>
<ul>
<li><img src="https://i.loli.net/2018/12/21/5c1cabba1faf7.jpg" alt="15060597682343"></li>
<li><img src="https://i.loli.net/2018/12/21/5c1caba091d02.jpg" alt="15060602769621"></li>
<li><img src="https://i.loli.net/2018/12/21/5c1caba09e791.jpg" alt="15060632132189"></li>
</ul>
</li>
</ul>
</li>
<li>冬装数据太奇葩了，基本依托于两个大活动走货<ul>
<li>考虑要把冬装单独拆分出模型来搞</li>
<li>其它季节货品使用一个预测模型</li>
<li>只保留冬季的情况<br><img src="https://i.loli.net/2018/12/21/5c1cabba244a6.jpg" alt="15063072795952"></li>
</ul>
</li>
</ul>
<h3 id="1-2-决定尝试分offset构建模型"><a href="#1-2-决定尝试分offset构建模型" class="headerlink" title="1.2 决定尝试分offset构建模型"></a>1.2 决定尝试分offset构建模型</h3><h4 id="1-2-1-预测商品级销量分类段划分：offset-total-quantity"><a href="#1-2-1-预测商品级销量分类段划分：offset-total-quantity" class="headerlink" title="1.2.1 预测商品级销量分类段划分：offset_total_quantity"></a>1.2.1 预测商品级销量分类段划分：offset_total_quantity</h4><table>
<thead>
<tr>
<th>Offset（销量）</th>
<th>正分类（大于offset）</th>
<th>负分类(小于offset)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000</td>
<td>1477</td>
<td>4471</td>
</tr>
<tr>
<td>1600</td>
<td>1016</td>
<td>4932</td>
</tr>
<tr>
<td>10000</td>
<td>204</td>
<td>5744</td>
</tr>
<tr>
<td>50000</td>
<td>16</td>
<td>5932</td>
</tr>
</tbody>
</table>
<h4 id="1-2-2-参考周期划分："><a href="#1-2-2-参考周期划分：" class="headerlink" title="1.2.2 参考周期划分："></a>1.2.2 参考周期划分：</h4><blockquote>
<p>重点调优放在前三个档，因为参考周期太长，预测的意义也就小了</p>
</blockquote>
<ul>
<li>前3天：offset3_quantity</li>
<li>前7天：offset7_quantity</li>
<li>前15天：offset15_quantity</li>
<li>前30天：offset30_quantity </li>
</ul>
<h2 id="2-开撸"><a href="#2-开撸" class="headerlink" title="2 开撸"></a>2 开撸</h2><blockquote>
<p>代码的注释基本都用的英文，不是为了装逼，是怕有字符集兼容问题。。。</p>
</blockquote>
<h3 id="2-1-包引入"><a href="#2-1-包引入" class="headerlink" title="2.1 包引入"></a>2.1 包引入</h3><blockquote>
<p>大致分为三类: 数据操作类、sklearn相关、可视化相关。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package import</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> log</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> preprocessing</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score,f1_score</span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> plotly.offline <span class="keyword">import</span> download_plotlyjs, init_notebook_mode, plot, iplot</span><br><span class="line"><span class="keyword">import</span> plotly.plotly <span class="keyword">as</span> py</span><br><span class="line"><span class="keyword">import</span> plotly.graph_objs <span class="keyword">as</span> go</span><br></pre></td></tr></table></figure>
<h4 id="核心包简介"><a href="#核心包简介" class="headerlink" title="核心包简介"></a>核心包简介</h4><ul>
<li>pandas: 数据集读取操作查询转换输出库。</li>
<li>sklearn: scikit-learn提供的ML相关方法实现库。<ul>
<li>preprocessing: 特征预处理相关。</li>
<li>model_selection: model所需的数据集选取生成。</li>
<li>metrics: 模型效果评估相关方法。</li>
<li>externals: 模型持久化相关。</li>
</ul>
</li>
<li>plotly: 发现的一个第三方可视化库，比matplotlib操作起来简单，生成图形可以交互分享，但是间歇性被墙。。😂</li>
</ul>
<h2 id="2-辅助函数声明"><a href="#2-辅助函数声明" class="headerlink" title="2. 辅助函数声明"></a>2. 辅助函数声明</h2><h3 id="2-1-生成对应offset的类标"><a href="#2-1-生成对应offset的类标" class="headerlink" title="2.1 生成对应offset的类标"></a>2.1 生成对应offset的类标</h3><blockquote>
<p>类标生成辅助方法，方法会塞入到pandas dataframe的apply方法中，默认会传入row</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_hot_product_label</span><span class="params">(row, offset, column_index)</span>:</span></span><br><span class="line">    <span class="string">"""Classification label generator.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        row: pandas dataframe row.</span></span><br><span class="line"><span class="string">        offset: Classification offset, such as 1000, 1600, 10000, 50000.</span></span><br><span class="line"><span class="string">        column_index: Dataframe row[column_index], such as row[12].</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Return:</span></span><br><span class="line"><span class="string">        Result of row_column value above offset. For example:</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        1: row_column &gt;= offset.</span></span><br><span class="line"><span class="string">        0: row_column &lt; offset.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> (row[column_index] &gt;= offset):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-特征变换"><a href="#2-2-特征变换" class="headerlink" title="2.2 特征变换"></a>2.2 特征变换</h3><blockquote>
<p>减少特征之间或者特征与类标之间取值差距，blablabla</p>
</blockquote>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><blockquote>
<p>log辅助方法</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_quantity</span><span class="params">(row, column_index)</span>:</span></span><br><span class="line">    <span class="string">"""Log the value."""</span></span><br><span class="line">    <span class="keyword">return</span> log(row[column_index])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>标准化转换</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">standardScalerTransform</span><span class="params">(X_train, X_test)</span>:</span></span><br><span class="line">    <span class="string">"""StandardScaler transform."""</span></span><br><span class="line">    sc = StandardScaler()</span><br><span class="line">    sc.fit(X_train)</span><br><span class="line">    <span class="keyword">return</span> (sc.transform(X_train), sc.transform(X_test))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>min-Max转换</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minMaxTransform</span><span class="params">(X_train, X_test)</span>:</span></span><br><span class="line">    <span class="string">"""MinMaxScaler transform."""</span></span><br><span class="line">    sc = MinMaxScaler()</span><br><span class="line">    sc.fit(X_train)</span><br><span class="line">    <span class="keyword">return</span> (sc.transform(X_train), sc.transform(X_test))</span><br></pre></td></tr></table></figure>
<h3 id="2-3-样本均匀化"><a href="#2-3-样本均匀化" class="headerlink" title="2.3 样本均匀化"></a>2.3 样本均匀化</h3><h4 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h4><blockquote>
<p>正负样本分布不均匀，需要均匀化处理，使得正负样本数基本一致。<br>隆重介绍<strong>imblearn</strong>库，提供各种样本均匀化算法的实现。</p>
</blockquote>
<table>
<thead>
<tr>
<th>Offset（销量）</th>
<th>正分类（大于offset）</th>
<th>负分类(小于offset)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000</td>
<td>1477</td>
<td>4471</td>
</tr>
<tr>
<td>1600</td>
<td>1016</td>
<td>4932</td>
</tr>
<tr>
<td>10000</td>
<td>204</td>
<td>5744</td>
</tr>
<tr>
<td>50000</td>
<td>16</td>
<td>5932</td>
</tr>
</tbody>
</table>
<h4 id="under-sampling"><a href="#under-sampling" class="headerlink" title="under-sampling"></a>under-sampling</h4><blockquote>
<p>把多的砍掉，正样本多就砍正样本，负样本多就砍负样本的，最后就一致了。<br>至于如何砍就有很多算法了，这里选用了NearMiss算法。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imblearn.under_sampling <span class="keyword">import</span> NearMiss</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">under_samplingTransform</span><span class="params">(X, y)</span>:</span></span><br><span class="line">    <span class="string">"""Under-sampling NearMiss mode."""</span></span><br><span class="line">    <span class="keyword">return</span> NearMiss(random_state=<span class="number">0</span>, version=<span class="number">1</span>).fit_sample(X, y)</span><br></pre></td></tr></table></figure>
<h4 id="over-sampling"><a href="#over-sampling" class="headerlink" title="over-sampling"></a>over-sampling</h4><blockquote>
<p>哪种样本少了，就想办法造一些，最后就一致了。<br>至于如何造就有很多算法了，这里选用了SMOTE的SVM模式算法。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE, ADASYN</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">over_samplingTransform</span><span class="params">(X, y)</span>:</span></span><br><span class="line">    <span class="string">"""Over-sampling SMOTE svm mode."""</span></span><br><span class="line">    <span class="keyword">return</span> SMOTE(kind=<span class="string">'svm'</span>).fit_sample(X, y)</span><br></pre></td></tr></table></figure>
<h3 id="2-4-模型算法"><a href="#2-4-模型算法" class="headerlink" title="2.4 模型算法"></a>2.4 模型算法</h3><blockquote>
<p>最简单的是感知器算法，因为不能解决线性不可分问题，就忽略掉了。。</p>
</blockquote>
<h4 id="逻辑斯蒂回归"><a href="#逻辑斯蒂回归" class="headerlink" title="逻辑斯蒂回归"></a>逻辑斯蒂回归</h4><blockquote>
<p>唬人的名字，说是回归，其实是分类算法。。<br>分类界用的很多。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logisticRegModelGenerator</span><span class="params">(train_std, y_train)</span>:</span></span><br><span class="line">    <span class="string">"""LogisticRegression model generator."""</span></span><br><span class="line">    <span class="keyword">return</span> LogisticRegression(C=<span class="number">1000</span>, random_state=<span class="number">0</span>).fit(train_std, y_train)</span><br></pre></td></tr></table></figure>
<h4 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h4><blockquote>
<p>理论上说可以忽略样本分布不均匀的问题（因为属于决策树类的算法）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_forest_classifier</span><span class="params">(train_x, train_y)</span>:</span>    </span><br><span class="line">    <span class="string">"""Random Forest model generator."""</span> </span><br><span class="line">    <span class="keyword">return</span> RandomForestClassifier(n_estimators=<span class="number">8</span>).fit(train_x, train_y)</span><br></pre></td></tr></table></figure>
<h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><blockquote>
<p>忽然概念名词超多的算法，什么超平面啥的。。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">svm_classifier</span><span class="params">(train_x, train_y)</span>:</span>    </span><br><span class="line">    <span class="string">"""SVM model generator."""</span></span><br><span class="line">    <span class="keyword">return</span> SVC(kernel=<span class="string">'rbf'</span>, probability=<span class="keyword">True</span>).fit(train_x, train_y)</span><br></pre></td></tr></table></figure>
<h4 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h4><blockquote>
<p>梯度提升算法（实测在这个场景综合效果较好😘）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_boosting_classifier</span><span class="params">(train_x, train_y)</span>:</span>    </span><br><span class="line">    <span class="string">"""GBDT model generator."""</span></span><br><span class="line">    <span class="keyword">return</span> GradientBoostingClassifier(n_estimators=<span class="number">200</span>).fit(train_x, train_y)</span><br></pre></td></tr></table></figure>
<h4 id="xgboost"><a href="#xgboost" class="headerlink" title="xgboost"></a>xgboost</h4><blockquote>
<p>在kaggle大赛中叱咤风云的神级算法，在这个场景实测效果不如GBDT<br>但xg有些好处，比如可以输出每轮学习时的精确度，以及输出目前输入特征的重要性分数，便于优化调参。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> plot_importance</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xgboost_classifier</span><span class="params">(train_x, train_y)</span>:</span></span><br><span class="line">    <span class="string">"""xgboost model generator."""</span></span><br><span class="line">    model = XGBClassifier()</span><br><span class="line">    model.fit(train_x, train_y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Feature importance.</span></span><br><span class="line">    <span class="comment"># plot_importance(model)</span></span><br><span class="line">    <span class="comment"># pyplot.show()</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure>
<h3 id="2-5-预测类"><a href="#2-5-预测类" class="headerlink" title="2.5 预测类"></a>2.5 预测类</h3><blockquote>
<p>SalesProphet（销售预言家）：预测辅助类<br>因为各种特征offset、类标、算法的组合，不封装一个类的话，将来会死的。。（已经死过一轮了，改一个东东要累死。。）<br>具体方法作用详见注释哈，总之就是传入参数，调用predit完事。<br>（吐槽python 断言竟然只能在继承于testcase的类中使用。。）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesProphet</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Sales prediction class.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        datasource: Sales prediction datasource relied on.</span></span><br><span class="line"><span class="string">        features_name: Feature names array.</span></span><br><span class="line"><span class="string">        label_name: Label names String.</span></span><br><span class="line"><span class="string">        model_type: Algorithm of model training.</span></span><br><span class="line"><span class="string">        X: Feature data.</span></span><br><span class="line"><span class="string">        y: Label data.</span></span><br><span class="line"><span class="string">        X_train: X train data.</span></span><br><span class="line"><span class="string">        X_test: X test data.</span></span><br><span class="line"><span class="string">        y_train: y train data.</span></span><br><span class="line"><span class="string">        y_test: y test data.</span></span><br><span class="line"><span class="string">        y_pred: y data predicted.</span></span><br><span class="line"><span class="string">        model: ML model fitted.</span></span><br><span class="line"><span class="string">        accuracy_score: Model accuracy score.</span></span><br><span class="line"><span class="string">        f1_score: Model f1 score.</span></span><br><span class="line"><span class="string">        train_score: Model score in train set.</span></span><br><span class="line"><span class="string">        test_score: Model score in test set.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, datasource, features_name, label_name, model_type=<span class="string">'logistic'</span>)</span>:</span></span><br><span class="line">        <span class="string">"""Inits SalesProphet with datasource, features_name, label_name, model_type(default is logistic)"""</span></span><br><span class="line">        self.datasource = datasource</span><br><span class="line">        self.features_name = features_name</span><br><span class="line">        self.label_name = label_name</span><br><span class="line">        self.model_type = model_type</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">feature_engineering</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Feature engineering about: X y generated, one-hot, sampling blabla..."""</span></span><br><span class="line">        <span class="comment"># assertIsNotNone(self.datasource, 'Guys, forget the datasource!!!')</span></span><br><span class="line">        <span class="comment"># assertNotEqual(len(self.features_name), 0, 'features is empty. WTF...')</span></span><br><span class="line">        <span class="comment"># assertNotEqual(len(self.label_name), 0, 'label is empty. WTF...')</span></span><br><span class="line">        </span><br><span class="line">        self.X = self.datasource[self.features_name].values</span><br><span class="line">        self.y = self.datasource[self.label_name]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># one-hot</span></span><br><span class="line">        ohe = OneHotEncoder(categorical_features = [<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">        self.X = ohe.fit_transform(self.X).toarray()</span><br><span class="line">        </span><br><span class="line">        self.X, self.y = over_samplingTransform(self.X, self.y)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_test_transform</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Trainset and testset splitor and standard transform."""</span></span><br><span class="line">        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=<span class="number">0.3</span>, random_state=<span class="number">0</span>)</span><br><span class="line">        self.X_train, self.X_test = standardScalerTransform(self.X_train, self.X_test)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">model_fitting</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Algorithm of model selector."""</span></span><br><span class="line">        model_alg_switcher = &#123;</span><br><span class="line">            <span class="string">'logistic'</span>: logisticRegModelGenerator,</span><br><span class="line">            <span class="string">'rf'</span>: random_forest_classifier,</span><br><span class="line">            <span class="string">'svm'</span>: svm_classifier,</span><br><span class="line">            <span class="string">'gdbt'</span>: gradient_boosting_classifier,</span><br><span class="line">            <span class="string">'xgboost'</span>: xgboost_classifier</span><br><span class="line">        &#125;</span><br><span class="line">        func = model_alg_switcher.get(self.model_type, logisticRegModelGenerator)</span><br><span class="line">        <span class="keyword">return</span> func(self.X_train, self.y_train)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">genPredictReport</span><span class="params">(self, printlog=False)</span>:</span></span><br><span class="line">        <span class="string">"""Model estimate report generation. Set printlog YES to pring log."""</span></span><br><span class="line">        self.accuracy_score = accuracy_score(self.y_test, self.y_pred)</span><br><span class="line">        self.f1_score = f1_score(self.y_test, self.y_pred, average=<span class="string">'binary'</span>)</span><br><span class="line">        self.train_score = self.model.score(self.X_train, self.y_train)</span><br><span class="line">        self.test_score = self.model.score(self.X_test, self.y_test)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> printlog:</span><br><span class="line">            print(<span class="string">'/--------------START-------------'</span>)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'| feature: %s'</span> % self.features_name)</span><br><span class="line">            print(<span class="string">'| label: %s'</span> % self.label_name)</span><br><span class="line">            print(<span class="string">'| model alg: %s'</span> % self.model_type)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'|----Estimate score------'</span>)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'| accuracy is: %.2f'</span> % self.accuracy_score)</span><br><span class="line">            print(<span class="string">'| f1_score is: %.2f'</span> % self.f1_score)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'|---Over-fitting check---'</span>)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'| train-set score: %.2f'</span> % self.train_score)</span><br><span class="line">            print(<span class="string">'| test-set score: %.2f'</span> % self.test_score)</span><br><span class="line">            print(<span class="string">'|'</span>)</span><br><span class="line">            print(<span class="string">'|---------------END--------------/\n'</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_genReportChart</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""y_test and y_pred chart generation."""</span></span><br><span class="line">        t = np.arange(len(self.y_pred))</span><br><span class="line">        <span class="comment"># Create traces</span></span><br><span class="line">        trace0 = go.Scatter(</span><br><span class="line">            x = t,</span><br><span class="line">            y = self.y_pred,</span><br><span class="line">            mode = <span class="string">'lines'</span>,</span><br><span class="line">            name = <span class="string">'predict'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        trace1 = go.Scatter(</span><br><span class="line">            x = t,</span><br><span class="line">            y = self.y_test,</span><br><span class="line">            mode = <span class="string">'lines'</span>,</span><br><span class="line">            name = <span class="string">'real'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        data = [trace0, trace1]</span><br><span class="line"></span><br><span class="line">        py.iplot(data, filename=<span class="string">'(%self.features_name)_(%self.labels_name)_(%self.model_type.model)'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">public_saveModel</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Model persistence."""</span></span><br><span class="line">        joblib.dump(self.model, <span class="string">'%(self.features_name)_%(self.labels_name)_(%self.model_type.model)'</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Predict main method."""</span></span><br><span class="line">        self.feature_engineering()</span><br><span class="line">        self.train_test_transform()</span><br><span class="line">        </span><br><span class="line">        self.model = self.model_fitting()</span><br><span class="line">        self.y_pred = self.model.predict(self.X_test)</span><br><span class="line">        self.genPredictReport()</span><br></pre></td></tr></table></figure>
<h2 id="3-数据准备"><a href="#3-数据准备" class="headerlink" title="3. 数据准备"></a>3. 数据准备</h2><h3 id="3-1-数据读取"><a href="#3-1-数据读取" class="headerlink" title="3.1 数据读取"></a>3.1 数据读取</h3><blockquote>
<p>从spark 导出准备好的数据到csv文件，pandas读取该csv中的数据。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">"data/product_2016_offset_group.csv"</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取前5条数据看看情况</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>describe 可以对df中各列的综合指标进行集中展示。<br>比如中位数、均值等等，方便进一步分析数据。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.describe()</span><br></pre></td></tr></table></figure>
<h3 id="3-2-销量特征log变换"><a href="#3-2-销量特征log变换" class="headerlink" title="3.2 销量特征log变换"></a>3.2 销量特征log变换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">'log_3_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">8</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_7_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">9</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_15_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">10</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_30_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">11</span>, axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'log_total_quantity'</span>] = train_data.apply(log_quantity, column_index=<span class="number">12</span>, axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br></pre></td></tr></table></figure>
<h3 id="3-3-类标生成"><a href="#3-3-类标生成" class="headerlink" title="3.3 类标生成"></a>3.3 类标生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_data[<span class="string">'hot_1000_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">1000</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'hot_1600_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">1600</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'hot_10000_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">10000</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br><span class="line">train_data[<span class="string">'hot_50000_product'</span>] = train_data.apply(gen_hot_product_label, args=(<span class="number">50000</span>, <span class="number">12</span>), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data.head()</span><br><span class="line">train_data[train_data.hot_1000_product == <span class="number">1</span>].count()</span><br></pre></td></tr></table></figure>
<pre><code>product_code                  1477
category_id                   1477
season                        1477
offset3_amount_actual         1477
offset7_amount_actual         1477
offset15_amount_actual        1477
offset30_amount_actual        1477
offset_total_amount_actual    1477
offset3_quantity              1477
offset7_quantity              1477
offset15_quantity             1477
offset30_quantity             1477
offset_total_quantity         1477
log_3_quantity                1477
log_7_quantity                1477
log_15_quantity               1477
log_30_quantity               1477
log_total_quantity            1477
hot_1000_product              1477
hot_1600_product              1477
hot_10000_product             1477
hot_50000_product             1477
dtype: int64
</code></pre><h3 id="3-4-数据清洗"><a href="#3-4-数据清洗" class="headerlink" title="3.4 数据清洗"></a>3.4 数据清洗</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data_normal = train_data[train_data.offset30_quantity &lt;= train_data.offset_total_quantity]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data_normal[train_data_normal.offset_total_quantity &lt; <span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># drop null row</span></span><br><span class="line">print(train_data_normal.isnull().sum())</span><br><span class="line">train_data_valid = train_data_normal.dropna()</span><br></pre></td></tr></table></figure>
<pre><code>product_code                  0
category_id                   0
season                        0
offset3_amount_actual         0
offset7_amount_actual         0
offset15_amount_actual        0
offset30_amount_actual        0
offset_total_amount_actual    0
offset3_quantity              0
offset7_quantity              0
offset15_quantity             0
offset30_quantity             0
offset_total_quantity         0
log_3_quantity                0
log_7_quantity                0
log_15_quantity               0
log_30_quantity               0
log_total_quantity            0
hot_1000_product              0
hot_1600_product              0
hot_10000_product             0
hot_50000_product             0
dtype: int64
</code></pre><blockquote>
<ol>
<li>无序特征做onehot消除次序关系。</li>
<li>整理特征与类标。</li>
<li>循环生成预言家，让它预测，生成报告，然后把他丢到预言家数组里面（salesProphets）便于后面生成分析对比用的DataFrame。</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># category_id, season onehot</span></span><br><span class="line">feature_disordered = [<span class="string">'category_id'</span>, <span class="string">'season'</span>]</span><br><span class="line"></span><br><span class="line">feature_cols_3 = feature_disordered + [<span class="string">'offset3_quantity'</span>]</span><br><span class="line">feature_cols_7 = feature_disordered + [<span class="string">'offset7_quantity'</span>]</span><br><span class="line">feature_cols_15 = feature_disordered + [<span class="string">'offset15_quantity'</span>]</span><br><span class="line">feature_cols_30 = feature_disordered + [<span class="string">'offset30_quantity'</span>]</span><br><span class="line">feature_offsets = [feature_cols_3, feature_cols_7, feature_cols_15, feature_cols_30]</span><br><span class="line"></span><br><span class="line">label_names = [<span class="string">'hot_1000_product'</span>, <span class="string">'hot_1600_product'</span>, <span class="string">'hot_10000_product'</span>, <span class="string">'hot_50000_product'</span>]</span><br><span class="line"></span><br><span class="line">algs = [<span class="string">'logistic'</span>, <span class="string">'rf'</span>, <span class="string">'svm'</span>, <span class="string">'gdbt'</span>,<span class="string">'xgboost'</span>]</span><br><span class="line"></span><br><span class="line">salesProphets = []</span><br><span class="line"><span class="keyword">for</span> alg <span class="keyword">in</span> algs:</span><br><span class="line">    <span class="keyword">for</span> feature <span class="keyword">in</span> feature_offsets:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> label_names:</span><br><span class="line">            salesProphet = SalesProphet(train_data_valid, feature, y, alg)</span><br><span class="line">            salesProphet.predict()</span><br><span class="line">            salesProphet.genPredictReport()</span><br><span class="line">            salesProphets.append(salesProphet)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>预言家数组生成综合对比DataFrame</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整理生成报告DataFrame</span></span><br><span class="line">feature_column = []</span><br><span class="line">label_column = []</span><br><span class="line">model_alg_column = []</span><br><span class="line">accuracy_column = []</span><br><span class="line">f1_score_column = []</span><br><span class="line">trainset_score_column = []</span><br><span class="line">testset_score_column = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> salesProphet <span class="keyword">in</span> salesProphets:</span><br><span class="line">    feature_column.append(salesProphet.features_name)</span><br><span class="line">    label_column.append(salesProphet.label_name)</span><br><span class="line">    model_alg_column.append(salesProphet.model_type)</span><br><span class="line">    accuracy_column.append(salesProphet.accuracy_score)</span><br><span class="line">    f1_score_column.append(salesProphet.f1_score)</span><br><span class="line">    trainset_score_column.append(salesProphet.train_score)</span><br><span class="line">    testset_score_column.append(salesProphet.test_score)</span><br><span class="line"></span><br><span class="line">result_data = &#123;<span class="string">'feature'</span>: feature_column, <span class="string">'label'</span>: label_column, </span><br><span class="line">               <span class="string">'model_alg'</span>: model_alg_column, <span class="string">'accuracy'</span>: accuracy_column, </span><br><span class="line">               <span class="string">'f1_score'</span>: f1_score_column, <span class="string">'trainset_score'</span>: trainset_score_column, </span><br><span class="line">               <span class="string">'testset_score'</span>: testset_score_column&#125;</span><br><span class="line"></span><br><span class="line">result_df = DataFrame(result_data)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分析报告保存</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result_df.to_csv(<span class="string">'data/result_df.csv'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h3 id="特征重要性分析"><a href="#特征重要性分析" class="headerlink" title="特征重要性分析"></a>特征重要性分析</h3><blockquote>
<p>分数越高越重要</p>
</blockquote>
<p><img src="https://i.loli.net/2018/12/21/5c1cabba9e6d8.jpg" alt="模型特征重要性分析"></p>
<h3 id="综合对比"><a href="#综合对比" class="headerlink" title="综合对比"></a>综合对比</h3><blockquote>
<p>分数越接近1越好</p>
</blockquote>
<p><img src="https://i.loli.net/2018/12/21/5c1cabbaa02df.png" alt="综合对比报告"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://scikit-learn.org/stable/" target="_blank" rel="noopener">scikit-learn官网</a></li>
<li><a href="http://contrib.scikit-learn.org/imbalanced-learn/stable/" target="_blank" rel="noopener">imbalanced-learn官网</a></li>
<li><a href="http://blog.csdn.net/Bryan__/article/details/51288953" target="_blank" rel="noopener">python sklearn分类算法简单调用</a></li>
<li><a href="http://www.jianshu.com/p/7e0e2d66b3d4" target="_blank" rel="noopener">Kaggle神器xgboost</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/" target="_blank" rel="noopener">莫烦PYTHON 机器学习专题(需翻墙)</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[销售预测案例源码分析]]></title>
      <url>/2017/11/09/%E9%94%80%E5%94%AE%E9%A2%84%E6%B5%8B%E6%A1%88%E4%BE%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文重在借案例学习spark相关数据结构与语法</p>
</blockquote>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="1-特征转换"><a href="#1-特征转换" class="headerlink" title="1. 特征转换"></a>1. 特征转换</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> stateHolidayIndexer = <span class="keyword">new</span> <span class="type">StringIndexer</span>()</span><br><span class="line">    .setInputCol(<span class="string">"StateHoliday"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"StateHolidayIndex"</span>)</span><br><span class="line">  <span class="keyword">val</span> schoolHolidayIndexer = <span class="keyword">new</span> <span class="type">StringIndexer</span>()</span><br><span class="line">    .setInputCol(<span class="string">"SchoolHoliday"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"SchoolHolidayIndex"</span>)</span><br><span class="line">  <span class="keyword">val</span> stateHolidayEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"StateHolidayIndex"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"StateHolidayVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> schoolHolidayEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"SchoolHolidayIndex"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"SchoolHolidayVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> dayOfMonthEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"DayOfMonth"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"DayOfMonthVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> dayOfWeekEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"DayOfWeek"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"DayOfWeekVec"</span>)</span><br><span class="line">  <span class="keyword">val</span> storeEncoder = <span class="keyword">new</span> <span class="type">OneHotEncoder</span>()</span><br><span class="line">    .setInputCol(<span class="string">"Store"</span>)</span><br><span class="line">    .setOutputCol(<span class="string">"StoreVec"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> assembler = <span class="keyword">new</span> <span class="type">VectorAssembler</span>()</span><br><span class="line">    .setInputCols(<span class="type">Array</span>(<span class="string">"StoreVec"</span>, <span class="string">"DayOfWeekVec"</span>, <span class="string">"Open"</span>,</span><br><span class="line">      <span class="string">"DayOfMonthVec"</span>, <span class="string">"StateHolidayVec"</span>, <span class="string">"SchoolHolidayVec"</span>))</span><br><span class="line">    .setOutputCol(<span class="string">"features"</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>先转化为StringIndexer</p>
<ul>
<li>inputCol原始列</li>
<li><p>outputCol转化为对应的index列: </p>
<ul>
<li>从0开始编号，出现频次最多的项目，编号小</li>
<li>有时候会有着这样的场景</li>
<li><p>用一个df转换另一个df,当df2对应列中的值超出了df1中的范围时，可以选择策略</p>
<ul>
<li>skip：忽略掉</li>
<li>keep：超出项对应分配一个index</li>
<li><p>默认为抛出异常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val indexed2 = indexer.fit(df1).setHandleInvalid(&quot;skip&quot;).transform(df2)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>做OneHotEncoder</p>
<ul>
<li>转化为对应向量</li>
<li>只指定一位为1，其余为0，出现频率最低的为(最终序号, [], [])</li>
</ul>
</li>
<li>VectorAssembler<ul>
<li>将对应元素合并成一个向量，打平</li>
</ul>
</li>
</ul>
<h3 id="2-环境初始化（面向像我这样的小白选手）"><a href="#2-环境初始化（面向像我这样的小白选手）" class="headerlink" title="2. 环境初始化（面向像我这样的小白选手）"></a>2. 环境初始化（面向像我这样的小白选手）</h3><blockquote>
<p>main中 大部分抄袭文档</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"alithink"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="keyword">val</span> sparkSession = <span class="type">SparkSession</span>.builder().getOrCreate()</span><br></pre></td></tr></table></figure>
<ul>
<li>SparkConf:<ul>
<li>Spark各种key-value的配置项<ul>
<li>setAppName: 给你的应用配置一个名字</li>
<li>setMaster: 连接到的主URL，例如这里的local代表本地单线程运行，local[4]本地4核运行，或者spark://master:7077 spark典型的Mater/slave模式</li>
</ul>
</li>
</ul>
</li>
<li>SparkContext:<ul>
<li>理解为与spark集群的对接人，可以用她来创建RDDs, accumulators 和 broadcast variables</li>
<li>每个JVM环境活着的SparkContext只有一个，创建一个新的前先stop（将来这个限制可能会被移除）</li>
</ul>
</li>
<li><p>SparkSession:</p>
<ul>
<li>合并了SparkContext和SQLContext<ul>
<li>内部有对应属性在需要时可以取得对应实例</li>
</ul>
</li>
<li>用于操作DataSet和DataFrame API</li>
<li><p>使用：</p>
<ul>
<li>REPL已经预先创建了（比如spark-shell, zeppelin）</li>
<li><p>获取已经存在的或者新创建一个：</p>
<ul>
<li><code>SparkSession.builder().getOrCreate()</code><ul>
<li>前提是sparkContext已经创建</li>
</ul>
</li>
<li><p>尽量用SparkSession来接管一切吧（上述代码可以改为如下）</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"alithink"</span>).setMaster(<span class="string">"local"</span>)</span><br><span class="line"><span class="comment">// val sc = new SparkContext(conf)</span></span><br><span class="line"><span class="comment">// val sparkSession = SparkSession.builder().getOrCreate()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sparkSession = <span class="type">SparkSession</span>.builder</span><br><span class="line">                 <span class="comment">//.master("local")</span></span><br><span class="line">                 <span class="comment">//.appName("alithink")</span></span><br><span class="line">                 .config(conf)</span><br><span class="line">                 .getOrCreate()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-训练数据整理"><a href="#3-训练数据整理" class="headerlink" title="3. 训练数据整理"></a>3. 训练数据整理</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main中调用</span></span><br><span class="line"><span class="keyword">val</span> data = loadTrainingData(sparkSession, <span class="string">"/Users/alithink/Space/common_data/train.csv"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体实现函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadTrainingData</span></span>(sqlContext:<span class="type">SparkSession</span>, filePath:<span class="type">String</span>):<span class="type">DataFrame</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> trainRaw = sqlContext</span><br><span class="line">    .read.format(<span class="string">"com.databricks.spark.csv"</span>)</span><br><span class="line">    .option(<span class="string">"header"</span>, <span class="string">"true"</span>)</span><br><span class="line">    .load(filePath)</span><br><span class="line">    .repartition(<span class="number">30</span>)</span><br><span class="line">  trainRaw.createOrReplaceTempView(<span class="string">"raw_training_data"</span>)</span><br><span class="line">   </span><br><span class="line">  sqlContext.sql(<span class="string">""</span><span class="string">"SELECT</span></span><br><span class="line"><span class="string">    double(Sales) label, double(Store) Store, int(Open) Open, double(DayOfWeek)   DayOfWeek,</span></span><br><span class="line"><span class="string">    StateHoliday, SchoolHoliday, (double(regexp_extract(Date, '\\d+-\\d+-(\\d+)', 1))) DayOfMonth</span></span><br><span class="line"><span class="string">    FROM raw_training_data</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span>).na.drop()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>SparkSession：<ul>
<li>read 返回一个DataFrameReader<ul>
<li>format(读取格式):com.databricks.spark.csv期初为一个开源库，后来已经集成到spark2.*啦</li>
<li><code>option(&quot;header&quot;, &quot;true&quot;)</code> 使用第一行作为头</li>
<li>赠送 <code>.option(&quot;inferSchema&quot;, &quot;true&quot;)</code> 自动推导类型</li>
</ul>
</li>
</ul>
</li>
<li>DataFrame（粗略一说，内容太多^_^）:<ul>
<li>DataSet[Row]</li>
<li>DataFrame vs RDD<br><img src="https://i.loli.net/2018/12/21/5c1caba0d91e0.jpg" alt="15048413811557"></li>
<li>DataFrame vs DataSet<ul>
<li>往往区别是在于行类型的不确定与确定</li>
</ul>
</li>
</ul>
</li>
<li>DataSet:<ul>
<li>repartition: 返回按规则分区后的dataset<ul>
<li>一句话：分区由少变多，或者在一些不是键值对的RDD中想要重新分区的话，就需要使用repartition了</li>
<li>有多变少，直接coalesce,repartition其实就是shuffle=true的coalesce</li>
<li>关于分区：分区的个数决定了并行计算的粒度<ul>
<li>详情参考：<a href="https://www.zhihu.com/question/31948747" target="_blank" rel="noopener">知乎传送门</a></li>
</ul>
</li>
</ul>
</li>
<li>createOrReplaceTempView:<ul>
<li>创建本地临时‘表’，便于之后sql操作</li>
</ul>
</li>
</ul>
</li>
<li>sql:<ul>
<li>na.drop() 丢掉所有包含null的row</li>
</ul>
</li>
</ul>
<h3 id="4-线性回归（随机森林类似，换了方法以及ParamMaps）"><a href="#4-线性回归（随机森林类似，换了方法以及ParamMaps）" class="headerlink" title="4. 线性回归（随机森林类似，换了方法以及ParamMaps）"></a>4. 线性回归（随机森林类似，换了方法以及ParamMaps）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preppedLRPipeline</span></span>():<span class="type">TrainValidationSplit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> lr = <span class="keyword">new</span> <span class="type">LinearRegression</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> paramGrid = <span class="keyword">new</span> <span class="type">ParamGridBuilder</span>()</span><br><span class="line">     .addGrid(lr.regParam, <span class="type">Array</span>(<span class="number">0.1</span>, <span class="number">0.01</span>))</span><br><span class="line">     .addGrid(lr.fitIntercept)</span><br><span class="line">     .addGrid(lr.elasticNetParam, <span class="type">Array</span>(<span class="number">0.0</span>, <span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>, <span class="number">1.0</span>))</span><br><span class="line">     .build()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> pipeline = <span class="keyword">new</span> <span class="type">Pipeline</span>()</span><br><span class="line">     .setStages(<span class="type">Array</span>(stateHolidayIndexer, schoolHolidayIndexer,</span><br><span class="line">       stateHolidayEncoder, schoolHolidayEncoder, storeEncoder,</span><br><span class="line">       dayOfWeekEncoder, dayOfMonthEncoder,</span><br><span class="line">       assembler, lr))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> tvs = <span class="keyword">new</span> <span class="type">TrainValidationSplit</span>()</span><br><span class="line">     .setEstimator(pipeline)</span><br><span class="line">     .setEvaluator(<span class="keyword">new</span> <span class="type">RegressionEvaluator</span>)</span><br><span class="line">     .setEstimatorParamMaps(paramGrid)</span><br><span class="line">     .setTrainRatio(<span class="number">0.75</span>)</span><br><span class="line">    tvs</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">* <span class="type">LinearRegression</span>:</span><br><span class="line">    * spark mllib自带的线性回归，支持多种类型的正则方法（具体算法迷茫中）</span><br><span class="line">        * <span class="type">Lasso</span> <span class="type">L1</span></span><br><span class="line">        * ridge <span class="type">L2</span></span><br><span class="line">        * elastic net <span class="type">L2</span> + <span class="type">L1</span>   </span><br><span class="line">        * none   </span><br><span class="line">* <span class="type">ParamGridBuilder</span>:</span><br><span class="line">    * 参数网格：</span><br><span class="line">        * 通过不同参数的组合，形成大量参数调优组合后的模型</span><br><span class="line">        * 然后用对应的验证评估方法去择优</span><br><span class="line">    * regParam:定义规范化项的权重</span><br><span class="line">    * elasticNetParam:<span class="type">Elastic</span> net参数，取值介于<span class="number">0</span>，<span class="number">1</span></span><br><span class="line">    * 这里elaticNetParam设置<span class="number">5</span>个值，regParam2个值，代表会有 <span class="number">5</span>*<span class="number">2</span>=<span class="number">10</span>个不同的模型被训练。</span><br><span class="line">* <span class="type">Pipeline</span>:</span><br><span class="line">    * 由一个个stages组成，每一个stage可以是estimator或者transformer</span><br><span class="line">    * fit model时触发</span><br><span class="line">* <span class="type">TrainValidationSplit</span>:</span><br><span class="line">    * 参数调整检验。</span><br><span class="line">    * 随机将输入的dataset划分为训练集和验证集，使用评估机制选择效果最好的模型。</span><br><span class="line">* <span class="type">RegressionEvaluator</span>:</span><br><span class="line">    * 上面说的用于验证模型效果的evaluator</span><br><span class="line"></span><br><span class="line">### <span class="number">5.</span> 模型训练与验证</span><br><span class="line"></span><br><span class="line">``` scala</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fitModel</span></span>(tvs:<span class="type">TrainValidationSplit</span>, data:<span class="type">DataFrame</span>) = &#123;</span><br><span class="line">    <span class="keyword">val</span> <span class="type">Array</span>(training, test) = data.randomSplit(<span class="type">Array</span>(<span class="number">0.8</span>, <span class="number">0.2</span>), seed = <span class="number">12345</span>)</span><br><span class="line">    logger.info(<span class="string">"Fitting data"</span>)</span><br><span class="line">    <span class="keyword">val</span> model = tvs.fit(training)</span><br><span class="line">    logger.info(<span class="string">"Now performing test on hold out set"</span>)</span><br><span class="line">    <span class="keyword">val</span> holdout = model.transform(test).select(<span class="string">"prediction"</span>,<span class="string">"label"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// have to do a type conversion for RegressionMetrics</span></span><br><span class="line">    <span class="keyword">val</span> rm = <span class="keyword">new</span> <span class="type">RegressionMetrics</span>(holdout.rdd.map(x =&gt;</span><br><span class="line">      (x(<span class="number">0</span>).asInstanceOf[<span class="type">Double</span>], x(<span class="number">1</span>).asInstanceOf[<span class="type">Double</span>])))</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"Test Metrics"</span>)</span><br><span class="line">    logger.info(<span class="string">"Test Explained Variance:"</span>)</span><br><span class="line">    logger.info(rm.explainedVariance)</span><br><span class="line">    logger.info(<span class="string">"Test R^2 Coef:"</span>)</span><br><span class="line">    logger.info(rm.r2)</span><br><span class="line">    logger.info(<span class="string">"Test MSE:"</span>)</span><br><span class="line">    logger.info(rm.meanSquaredError)rm = <span class="keyword">new</span> <span class="type">RegressionMetrics</span>(holdout.rdd.map(x =&gt;</span><br><span class="line">      (x(<span class="number">0</span>).asInstanceOf[<span class="type">Double</span>], x(<span class="number">1</span>).asInstanceOf[<span class="type">Double</span>])))</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"Test Metrics"</span>)</span><br><span class="line">    logger.info(<span class="string">"Test Explained Variance:"</span>)</span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">"Test RMSE:"</span>)</span><br><span class="line">    logger.info(rm.rootMeanSquaredError)</span><br><span class="line"></span><br><span class="line">    model</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>首先划分训练集和测试集</li>
<li>fit：<ul>
<li>用训练集拟合出一个model</li>
</ul>
</li>
<li>RegressionMetrics:<ul>
<li>回归evaluator</li>
<li>集中评估标准：<ul>
<li>R^2：决定系数，反应因变量的全部变异能通过回归关系被自变量解释的比例。如R平方为0.8，则表示回归关系可以解释因变量80%的变异。换句话说，如果我们能控制自变量不变，则因变量的变异程度会减少80%</li>
<li>explainedVariance: 解释方差，具体详见：<a href="http://blog.sciencenet.cn/blog-1148346-852482.html" target="_blank" rel="noopener">http://blog.sciencenet.cn/blog-1148346-852482.html</a></li>
<li>MAE mean absolute error: 绝对误差，准确值与其测量值之间的误差。</li>
<li>MSE mean squared error: 均方误差, 衡量平均误差的方法。</li>
<li>RMSE root mean square error: 均方根误差。</li>
</ul>
</li>
</ul>
</li>
<li>最后用训练好的模型transform测试集，然后将结果保存。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://sparktutorials.net/spark-mllib---predict-store-sales-with-ml-pipelines" target="_blank" rel="noopener">Spark MLLib - Predict Store Sales with ML Pipelines</a></li>
<li><a href="http://spark.apache.org/docs/latest/api/scala/index.html#package" target="_blank" rel="noopener">Spark doc</a></li>
<li><a href="http://dblab.xmu.edu.cn/blog/1510-2/" target="_blank" rel="noopener">Spark2.1.0入门：模型选择和超参数调整</a></li>
<li><a href="Spark2 Linear Regression线性回归">Spark2 Linear Regression线性回归</a></li>
<li><a href="http://blog.csdn.net/tuntunwang/article/details/60870312" target="_blank" rel="noopener">基于spark用线性回归（linear regression)进行数据预测</a></li>
<li><a href="http://www.jianshu.com/p/200473f264bc" target="_blank" rel="noopener">Intellij之Spark Scala开发环境搭建</a></li>
<li><a href="http://dblab.xmu.edu.cn/blog/1297-2/" target="_blank" rel="noopener">Spark入门：标签和索引的转化：StringIndexer- IndexToString-VectorIndexer</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> ML </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[爱乐之城]]></title>
      <url>/2017/03/18/%E7%88%B1%E4%B9%90%E4%B9%8B%E5%9F%8E/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一部好电影，总是能触响你内心的共鸣，爱乐之城就是这样一部好电影。</p>
</blockquote>
<h2 id="好电影应该包含什么"><a href="#好电影应该包含什么" class="headerlink" title="好电影应该包含什么"></a>好电影应该包含什么</h2><ul>
<li>引人共鸣的音乐</li>
<li>好故事</li>
<li>好结局</li>
<li>引人深思</li>
</ul>
<h2 id="共鸣"><a href="#共鸣" class="headerlink" title="共鸣"></a>共鸣</h2><h3 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h3><p>每个人都有拥有梦想的权利，年轻就应该去追逐，无惧失败。在追逐梦想的道路上，除了自己的那份坚持之外，最可贵的就是能有一个人在激励与支持你（原来想说默默的支持，看到塞的方式之后，感觉如果你打算支持她就要把这份支持高调的表达出来，并从内心真正的认可对方）。</p>
<p>最近关于梦想的讨论好多，听了马老师的演讲后，跟同事在一起也讨论了好久。很多梦想可能需要在财务自由后才能实现，为了梦想可能中途需要做很多妥协。这些妥协，对于像我们这样支身前往异地的伪单身们应该感受会更加强烈。在“家”的城市里的温暖，为了追逐自己的梦想消失了，为了梦想，妥协的不只是自己的那份还有属于家人的那份温暖。所以，我们既然为了梦想放弃了这么多，有什么理由不加倍努力呢。</p>
<h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><p>选择，每个人这辈子都会经历各种各样的选择。电影中，用一些表现形式，让大家可以看到主角们不同选择所后续形成的生活轨迹。这点让我回忆起凯奇的《居家男人》，不过结局不同，居家男人的凯奇最后还有再选择的机会与命运，而塞巴斯蒂安则选择了祝福、接受以及把那份对米娅的爱深深藏在心里。</p>
<p>选择，有的时候就是这样，你不选择永远不知道什么才是你想要的。但一定要知道哪些是不能割舍的，如果触碰了它，就没有选择的余地了。一旦失去了唾手可得的幸福，可能想要再追逐回来就太难了或者也许已经不可能了吧。我想塞看到米娅身边的人，内心想了很多，米娅已经有了自己新的生活，有了身边这个同样爱她的人，也许也已经有了一个完整的家庭，从米娅临走时的微笑，他确认到了这一点，那么这也是他想要给米娅带来的幸福，所以他的内心也就坦然接受了现实。</p>
<p>选择过了，那么就要为自己的选择负责。如果选择是错误的，可以尝试努力追回，但不要影响这个世界的轨迹。</p>
<h3 id="一种“真爱”的诠释"><a href="#一种“真爱”的诠释" class="headerlink" title="一种“真爱”的诠释"></a>一种“真爱”的诠释</h3><p>命运之神有时候就是那么喜欢开玩笑，有时候硬把两个毫不相干的人拽在一起，想不在一起都不行，然后却又会突然切断这份羁绊。</p>
<p>塞对米娅的爱是毋庸置疑的，就像他为米娅一直弹奏的那首钢琴曲，一直没有变。我觉得其实米娅最后没有选择跟塞在一起其实也是电影在映射现实。现实就是这样，唯一不变的就是变化，正是有了这些偶然才构成了生活。但从米娅对塞的回笑，可以感受到米娅还深爱着塞，但是生活还是要继续下去。</p>
<p>爱一个人，要去从内心支持对方的梦想，允许对方的偶尔发泄，毕竟我们都是人，都会有各种感情，就像哈佛幸福课中Tal所说的Permision to be human。爱一个人，要学会接受对方的选择，如果对方是幸福的，如果不能相守，也要释然的祝福它。</p>
<h3 id="生活与幸福"><a href="#生活与幸福" class="headerlink" title="生活与幸福"></a>生活与幸福</h3><p>生活代表着变化与偶然，而幸福则属于积极心理学的范畴，关于幸福感兴趣可以尝试听一下哈佛幸福课。</p>
<p>追逐梦想是幸福的，电影最后，可以说塞和米娅的梦想都实现了，但是属于他们之间的幸福却失去了。前面是幸福的范畴，后面是生活的范畴。</p>
<p>生活中的有些幸福，往往跟物质生活是无关的（当然要满足基本的物质需求）。就像塞跟米娅相爱之初，他们像一般情侣一样，天天黏在一起是幸福的。但是塞为了支持米娅的梦想，去接受乐队的工作，聚少离多的日子，他们的生活轨迹开始出现岔路，幸福也在悄然变化。</p>
<p>有时候幸福悄悄的藏了起来，不易发现，要去找到它，并把它与自己的梦想系在一起，因为可能不经意间割舍掉的幸福说不定就是自己梦想的最终故里。</p>
<h2 id="尾记"><a href="#尾记" class="headerlink" title="尾记"></a>尾记</h2><p>挺好的一部电影，好久没有这种抑制不住情感的时刻，也许跟自己当下的生活相关吧。追逐梦想，珍视幸福，不要让它们在你的指尖溜走。</p>
]]></content>
      
        <categories>
            
            <category> 影评 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[哈佛幸福课小结]]></title>
      <url>/2017/02/12/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE%E5%B0%8F%E7%BB%93/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> 鸡汤乱炖 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[关于未来的一些梳理]]></title>
      <url>/2017/02/12/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>家人与朋友的支持是男人前行的永恒动力。新起点，新方向，杭州我来了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[2016]]></title>
      <url>/2016/12/30/2016/</url>
      <content type="html"><![CDATA[<blockquote>
<p>眼睛一闭一睁，2016就这样过去了</p>
</blockquote>
<h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><ul>
<li>私有pod库封装实践<ul>
<li>简介：<a href="http://alithink.com/2016/06/04/cocoapods%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B0%81%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">cocoapods私有仓库封装过程中的思考</a></li>
<li>功能性封装</li>
<li>业务型封装</li>
</ul>
</li>
<li>纯Swift开发项目<ul>
<li>入门：<ul>
<li>猫神的swift 100 tips</li>
<li>raywenderlich的swift 学徒</li>
</ul>
</li>
<li>进阶：swift进阶</li>
<li>实践：TFA、HBI企业项目实践<ul>
<li><a href="http://alithink.com/2016/06/28/BI%20APP%E5%9B%BE%E5%BD%A2%E5%BA%93%E9%80%89%E5%9E%8B/" target="_blank" rel="noopener">BI App图形库选型</a></li>
<li><a href="http://alithink.com/2016/07/25/Charts%E8%AF%8A%E7%96%97%E6%97%A5%E5%BF%97/" target="_blank" rel="noopener">Charts诊疗日志</a></li>
</ul>
</li>
</ul>
</li>
<li>体验watchOS开发<ul>
<li>简介：<a href="http://alithink.com/2016/11/15/Focus/" target="_blank" rel="noopener">Focus</a></li>
<li>成果：Focus App开发与上线</li>
</ul>
</li>
<li>认真梳理了iOS的知识体系<ul>
<li>额。。发现打印出来可以当桌布或者鼠标垫了。。略大</li>
</ul>
</li>
<li>探索的方向：<ul>
<li>前端<ul>
<li>vuejs =&gt; weex<ul>
<li>个人观点仅从语言层面来说感觉weex有点滞后了</li>
</ul>
</li>
<li>认认真真从基础梳理下前端知识<ul>
<li>推荐书籍：The Big Nerd Ranch的Front-End Web Development</li>
</ul>
</li>
</ul>
</li>
<li>微信小程序<ul>
<li>早期实践了一波</li>
<li>1月9日正式上线敬请期待</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>2017：</p>
<ul>
<li>iOS技术深入，探求世界的真相（OC + Swift）</li>
<li>看好前端方向，持续学习</li>
</ul>
</blockquote>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul>
<li>认认真真的重新搞起了博客<ul>
<li>hexo + next + (github &amp;&amp; coding)</li>
</ul>
</li>
<li>从今年5月份开始共计18篇文章</li>
<li>有几篇同步到简书和CocoaChina，有幸得到推荐^_^</li>
</ul>
<blockquote>
<p>2017：先立一个flag，保证平均一周一篇吧</p>
</blockquote>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>自学：没人能控制得了你，除了你自己</li>
<li>学习路径：（以iOS为例）<ul>
<li>官方资源：<ul>
<li>开发文档与设计指南</li>
<li>WWDC</li>
<li>demo</li>
</ul>
</li>
<li>优秀三方：<ul>
<li>书籍：钟爱于以实例为引导的阅读方式<ul>
<li>objc相关（中文翻译水准不错）</li>
<li>Raywenderlich</li>
<li>the big nerd ranch</li>
<li>相关优秀源码</li>
</ul>
</li>
</ul>
</li>
<li>Feeds：<ul>
<li>大牛们的精品博客文章</li>
<li>社区的技术分享：最近比较多的微信分享效果也还是不错的</li>
</ul>
</li>
<li>分享：<ul>
<li>写博客</li>
<li>开源社区分享</li>
</ul>
</li>
<li>实践：<ul>
<li>开源小项目</li>
<li>上架小App（不求money，但求memory）</li>
</ul>
</li>
<li>学习小技巧<ul>
<li>遵从记忆曲线，时而停下来，闭上眼睛，回忆一下，效果更佳</li>
<li>擅用思维导图：<ul>
<li>越是一头雾水，越能拨云见日</li>
<li>知识串起来，更利于关联记忆</li>
</ul>
</li>
<li>学习没动力的时候怎么办？<ul>
<li>如何为家人带来更好的生活，只能自己更加的努力。（想一下自己闺女那可爱的脸庞^_^）</li>
<li>培养兴趣，建立成长的信心</li>
<li>推荐一个视频课程：网易公开课《哈弗幸福课》</li>
<li>其他各种鸡汤，ted啥的</li>
</ul>
</li>
<li>好好锻炼身体</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="败家"><a href="#败家" class="headerlink" title="败家"></a>败家</h3><ul>
<li>2016 MacBook Pro 13 with touchbar</li>
<li>Apple Watch Series2</li>
<li>v500 =&gt; ikbc</li>
<li>小米全家桶（箱包、移动电源、插排、路由器、净化器、手环、耳机、电池、口罩、笔、各种线材…）</li>
<li>手串（小叶紫檀、白玉菩提、黄檀、黑檀、金丝楠…）</li>
<li>其他各种乱七八糟落地吃灰的东东</li>
</ul>
<blockquote>
<p>PS：兴奋之余需节制，节制，节制，节制。。。</p>
<p>2017：极简消费，东西在精不在多。。。</p>
</blockquote>
<h3 id="家人"><a href="#家人" class="headerlink" title="家人"></a>家人</h3><p>最后也是最重要的，感谢家人这一年对我工作学习的支持。</p>
<p>家人的支持是男人前行的永恒动力。</p>
<blockquote>
<p>2017：认认真真工作，好好锻炼身体，结识各路朋友，悉心珍爱家人</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 回忆录 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Focus]]></title>
      <url>/2016/11/15/Focus/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Focus一次探索watchOS的实践。再次慨叹下Apple的审核速度，just one day…</p>
</blockquote>
<h2 id="Focus-有些事情需要这份执着"><a href="#Focus-有些事情需要这份执着" class="headerlink" title="Focus - 有些事情需要这份执着"></a>Focus - 有些事情需要这份执着</h2><p>人这一辈子总有一些一定要去做必须要去体验的东西。</p>
<p>对于这些事物的追求需要这份执念。</p>
<p>Focus帮助我们专注于做最重要的事情，给她一个期限，可能是一两年，也可能只有几天或者几小时，总之一旦决定拥有她，那么中途就不要背弃她。</p>
<p>人这一辈子不要过得太复杂，专注于现在，执着于每次的努力，当回看过往，必将为自己而骄傲。</p>
<blockquote>
<p>Focus App Store：<a href="https://itunes.apple.com/us/app/focus-concentrate-on-one-task/id1169917639" target="_blank" rel="noopener">传送门</a></p>
</blockquote>
<h2 id="Focus长什么样"><a href="#Focus长什么样" class="headerlink" title="Focus长什么样"></a>Focus长什么样</h2><p><img src="https://i.loli.net/2018/12/21/5c1cabba4e5e2.png" alt="focus_appstore"></p>
<h2 id="Focus参数"><a href="#Focus参数" class="headerlink" title="Focus参数"></a>Focus参数</h2><ul>
<li>Language: pure Swift3</li>
<li>Support: iOS9+、watchOS3.0+（包含Complication、WatchConnectivity）</li>
<li>Vender: Realm(iOS、watchOS)、DCPathButton、IQKeyboardManagerSwift、SCLAlertView、SnapKit</li>
<li>OpenSource：梳理完毕后开源</li>
</ul>
<h2 id="为什么要做这么个App"><a href="#为什么要做这么个App" class="headerlink" title="为什么要做这么个App"></a>为什么要做这么个App</h2><p>Apple发布了新款的Apple Watch Series2，之前一直想涉足watchOS的领域，一看设备更新了就赶紧入手了一款。这么贵的东东，不开发点东西感觉对不起自己花出去的银子。于是在认真体验了一段时间后，进行了以下产品思考:</p>
<p><img src="https://i.loli.net/2018/12/21/5c1cabbaa1136.png" alt="aw_mind"></p>
<p>最后决定先尝试制作一款GTD类APP，跟其它同质App的区别呢就在于只关注于一件事情的实现引导。提供的Apple Watch端App包含了几乎所有iOS端的功能，同时结合Complication可以将Focus的精简信息展现到表盘中。利用Apple Watch的贴近特点，进行一些轻度提醒。（说不定过段时间可能会搞一下那个偷偷录音的APP ^_^）</p>
<h2 id="Focus让我了解了什么"><a href="#Focus让我了解了什么" class="headerlink" title="Focus让我了解了什么"></a>Focus让我了解了什么</h2><h3 id="1-Swift3"><a href="#1-Swift3" class="headerlink" title="1. Swift3"></a>1. Swift3</h3><p>Swift3更新以来，还没有将原有的swift2项目进行迁移，正好拿个人项目进行了实践。</p>
<p>综合体会就是更加优雅简洁了，这里就不展开描述了。推荐几个不错的教程，首先是官方文档，然后有猫神的《Swifter - <em>100</em> 个 <em>Swift</em> 必备 <em>tips</em>》（买的正版，动态更新为了swift3的版本）,还有raywenderlich swift相关教程也在第一时间更新为了swift3版本。</p>
<h3 id="2-watchOS-3-0"><a href="#2-watchOS-3-0" class="headerlink" title="2. watchOS 3.0"></a>2. watchOS 3.0</h3><p>初涉watch SDK，现在的感觉是相较iOS SDK各有优劣，不过watch SDK的劣势多了一些。</p>
<h4 id="几个小例子："><a href="#几个小例子：" class="headerlink" title="几个小例子："></a>几个小例子：</h4><ul>
<li>table这一块，watchOS的处理会更“简约”一些，没有这么多的数据代理，转而采用了配置方法的调用，初始化配置更集中了。这里也是针对watch的使用场景进行了SDK层面的精简优化。</li>
<li>自带一个计时性质的文本控件date、timer，一般的场景只需要简单配置就可以使用了（不过可定制项比较有限，Focus中为了统一，还是改为自己实现一个倒计时）</li>
<li>感觉watchOS中的picker就是一个噩梦。。。，官方是没有提供watchOS版本的日期选择器的，所以需要自己用picker进行组装，里面好多坑，这块等开源后感兴趣的同学可以参考下。</li>
<li>关于控件封装，原本搞完了watchOS版本的日期选择器是打算抽离封装一下的，但是发现watchOS的控件封装真的没有太好的途径，总不能把一个controller分享出来吧。。。（虽然github上有人这么搞）</li>
</ul>
<h4 id="几个建议："><a href="#几个建议：" class="headerlink" title="几个建议："></a>几个建议：</h4><ul>
<li><p>将iOS与watchOS的公用模块提取为单独的framework方便复用。</p>
</li>
<li><p>iOS与watchOS的数据同步通过WatchConnectivity，由于一些技术文章的更新缓慢，其中介绍的appgroup方式其实已经不适用了（被坑了一轮）。</p>
<p>同时建议除了配置自动的同步机制外，添加一个按钮触发的同步操作，以方便用户及时进行同步。例如Focus中当点击iPhone或者watch主页面中央的小漏斗时，会弹出同步提示窗口：</p>
<p><img src="http://of71dfqgz.bkt.clouddn.com/sync.PNG" alt="sync.PNG"></p>
</li>
<li><p>关于文本录入这块watchOS3已经可以使用presentTextInputController(withSuggestions:allowedInputMode:)了，弹出的输入模块可以进行语音录入，建议选择以及新更新的Scribble，也建议大家使用。（虽然中文的录入还是有点难用）</p>
</li>
</ul>
<h3 id="3-Realm"><a href="#3-Realm" class="headerlink" title="3. Realm"></a>3. Realm</h3><p>早就听说了realm的大名，一直想尝试一下，正好借助这个机会集成了进去。不过得出的结论是，其实就目前的realm而言，个人感觉不太适合用于watch相关的应用。主要原因就是库文件略大，watch应用四五十兆的应用大小限制，使得每一寸空间都显得特别珍贵（App Store审核的限制，其实相较Apple Watch的存储来说集成realm造成的空间占用还是可以接受的）。</p>
<h4 id="说说使用realm的几点感受"><a href="#说说使用realm的几点感受" class="headerlink" title="说说使用realm的几点感受:"></a>说说使用realm的几点感受:</h4><ul>
<li><p>用起来确实很爽，很容易上手，基本就是在操作对象，用过coredata的同学应该很习惯这种方式。</p>
</li>
<li><p>数据库版本迁移这块仔细一点也很容易搞定。</p>
</li>
<li><p>因为要同时集成iOS跟watchOS两个版本的realm所以不要将他们放在同一个项目文件夹下，分别创建文件夹添加引用。</p>
</li>
<li><p>官方的提供的run script：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash "$&#123;BUILT_PRODUCTS_DIR&#125;/$&#123;FRAMEWORKS_FOLDER_PATH&#125;/Realm.framework/strip-frameworks.sh"</span><br></pre></td></tr></table></figure>
<p>需要在iOS和watch extension的Build Phases中都要进行添加调用。（我就是因为没有在extension中添加调用导致模拟器真机运行正常，上传App Store却总是验证报错…）</p>
</li>
<li><p>对于添加了realm的watchOS项目建议打开bitcode，也是为了优化watch APP的体积。</p>
</li>
</ul>
<h3 id="4-“新”产品上线"><a href="#4-“新”产品上线" class="headerlink" title="4. “新”产品上线"></a>4. “新”产品上线</h3><p>好久没有完整的操作一遍应用的上线流程了，体会有几点：</p>
<ul>
<li>Xcode8.1的自动管理签名还是挺好用的，尚未发现问题。使用该配置后，记得Build Settings中Code Signing Identity的子选项都要配置为iOS Developer。</li>
<li>发现Certificate中添加了专门用于生成服务器推送证书的功能。（估计早就更新了，之前没在意）</li>
<li>新的itunes connect功能真的挺好用，相较原来的版本慢慢的幸福感。</li>
<li>慨叹下目前Apple的审核速度，真实快啊，上传到上架one day。</li>
</ul>
<h2 id="可利用的资源"><a href="#可利用的资源" class="headerlink" title="可利用的资源"></a>可利用的资源</h2><ul>
<li><a href="https://developer.apple.com/watchos/resources/" target="_blank" rel="noopener">watchOS官方资源（包括Human Interface Guidelines、App Programming Guide for watchOS 等)</a></li>
<li><a href="https://developer.apple.com/swift/resources/" target="_blank" rel="noopener">swift官方资源</a></li>
<li><a href="https://www.raywenderlich.com/" target="_blank" rel="noopener">Raywenderlich</a></li>
<li><a href="https://onevcat.com/2015/08/watchos2/" target="_blank" rel="noopener">猫神相关文章(虽然是watchOS 2的，但是很受用)</a></li>
<li>图形素材：<a href="http://www.dribbble.com/" target="_blank" rel="noopener">dribbble(寻找创意)</a>、<a href="http://www.easyicon.net/" target="_blank" rel="noopener">easyicon(图标)</a>、<a href="http://makeappicon.com/" target="_blank" rel="noopener">MakeAppIcon(iPhone App图标与watch App图标生成)</a></li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Focus会持续更新，目前主要解决了我自己的一些痛点，希望她也能够帮助到你。如果有什么好的建议欢迎留言讨论。Watch中的App种类确实很有限，不像iOS的这么丰富，有好的产品创意也欢迎一起讨论。watchOS 3.0的更新让Apple Watch焕发了新的生机，有了不少新的可能，让我们一起把我们的Apple Watch丰富起来吧^_^。</p>
]]></content>
      
        <categories>
            
            <category> 个人作品 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[next、空白与404]]></title>
      <url>/2016/11/14/next%E4%B8%8E404/</url>
      <content type="html"><![CDATA[<blockquote>
<p>有没有发现最近github pages访问特别慢，是不是发现自己挂在github pages上的东东变成一片空白啦，那么这篇文章也许能帮助到你。</p>
</blockquote>
<h2 id="Github-pages访问速度慢"><a href="#Github-pages访问速度慢" class="headerlink" title="Github pages访问速度慢"></a>Github pages访问速度慢</h2><p>也不知道是不是美国大选的原因（胡诌模式），最近自己挂在github pages上面的博客访问速度特别慢。解决方案大致搜了下，还是选择一个国内的pages服务靠谱一些，毕竟不是自己的服务器，可以控制的东西确实有限。</p>
<p>那么国内提供这种服务的自然就想到了coding。</p>
<p>至于coding里面如何搭建pages服务就不再冗述了，网上的文章一大把，只在这里标记几个特别点的小坑：</p>
<ul>
<li>建pages的项目名一定要跟coding用户名同名。</li>
<li>开始部署pages服务时，项目分支一定要写对（额。。默认的跟填充的名字竟然不是主分支。。。）。</li>
</ul>
<p>剩下的呢，基本就是对于域名的处理了，对于同一个CNAME分别创建默认线路跟海外线路两条解析，默认的对应到coding的pages服务地址，海外的对应github的pages服务地址即可。</p>
<h2 id="页面好白好白"><a href="#页面好白好白" class="headerlink" title="页面好白好白"></a>页面好白好白</h2><p>突然间自己的博客变成了一大片空白，赶紧打开开发者工具看了下，发现有好多vender下面的js、css都加载不出来了。。。</p>
<p>稍微研究了一下，原来是github pages的jekyll新版本会忽略掉vender目录。然后看了下next的更新，其实新版的next（5.1.0）已经对于这种情况进行了处理，将原有vender目录下的东东迁移到了lib目录。那么按说问题应该解决了，于是赶紧下载了next最新的主题源码，将原有配置迁移好了之后，发布测试一看还是白花花的一片。WTF …</p>
<p>那么记录下这里的坑:</p>
<ul>
<li><p>新版本的next虽然修复了这个问题，但是主题配置文件里面的vender默认路径依然没有指向lib，于是果断修改，问题解决。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">vendors:</span></span><br><span class="line">  <span class="comment"># Internal path prefix. Please do not edit it.</span></span><br><span class="line">  <span class="symbol">_internal:</span> lib</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经此一役，问题就应该都解决了，继续码字吧，骚年们。</p>
]]></content>
      
        <categories>
            
            <category> 疑难杂症 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[小试设计]]></title>
      <url>/2016/10/17/%E5%B0%8F%E8%AF%95%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>公司的产品兄弟走了，有需求，只能自己操刀了。</p>
<p>Sketch的综合体验还是很不错的，功能发现自然流畅，没有看过教程，也能无阻碍的进行设计。</p>
</blockquote>
<h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><p><img src="https://i.loli.net/2018/12/21/5c1cabc060f60.png" alt="1111smal"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>大致划分展示区域：上部为纯数据点展示；下部为图形图表。</li>
<li>背景高斯模糊用于进行模块划分。</li>
<li>对于基础色的选择，以及字号的梳理，让页面不会显得特别凌乱。</li>
<li>PC端、移动端的风格统一化。</li>
<li>内容导向，拒绝杂乱的背景。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> sketch </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[学做父亲]]></title>
      <url>/2016/10/16/%E5%AD%A6%E5%81%9A%E7%88%B6%E4%BA%B2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近看了本书，孙云晓的《好好做父亲》，书中的几个原则比较有指导意义，罗列出来，各位爸爸学徒们一起努力吧^_^</p>
</blockquote>
<h3 id="重要原则"><a href="#重要原则" class="headerlink" title="重要原则"></a>重要原则</h3><p>在家庭关系中，不宜把亲子关系放在第一位，而应该是夫妻关系第一，亲子关系第二。因为，夫妻关系的稳定最有利于孩子健康成长。</p>
<h3 id="好父亲的8种品质"><a href="#好父亲的8种品质" class="headerlink" title="好父亲的8种品质"></a>好父亲的8种品质</h3><ol>
<li>认真负责</li>
<li>意志坚定</li>
<li>勇敢独立</li>
<li>目光远大，影响孩子作出积极的人生选择</li>
<li>是非分明</li>
<li>胸怀宽广，富有包容精神</li>
<li>勤劳自律</li>
<li>爱好运动，父亲是孩子最好的教练</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 鸡汤乱炖 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[AFNetworking源码拾遗]]></title>
      <url>/2016/09/12/AFNetworking%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一句话简介：最著名的OC开源网络库。</p>
<p>Github: <a href="https://github.com/AFNetworking/AFNetworking" target="_blank" rel="noopener">传送门</a></p>
<p>PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p>
</blockquote>
<h3 id="1-import和modulemap"><a href="#1-import和modulemap" class="headerlink" title="1. @import和modulemap"></a>1. @import和modulemap</h3><p>首先OC中的@import以及Swift中的import其实都是基于modulemap实现的。</p>
<ul>
<li>@import的使用可以参考：<a href="http://stackoverflow.com/questions/18947516/import-vs-import-ios-7" target="_blank" rel="noopener">@import vs #import</a></li>
<li>关于modulemap相关的内容可以参考：<a href="http://nsomar.com/modular-framework-creating-and-using-them/" target="_blank" rel="noopener">Modular framework, creating and using them</a></li>
</ul>
<h3 id="2-各种标记"><a href="#2-各种标记" class="headerlink" title="2. 各种标记"></a>2. 各种标记</h3><ul>
<li>__unused: 避免因变量声明未使用造成的警告。</li>
<li>ARC相关（如__autoreleasing）参考: <a href="http://www.cnblogs.com/flyFreeZn/p/4264220.html" target="_blank" rel="noopener">iOS开发ARC内存管理技术要点</a></li>
<li>NS_DESIGNATED_INITIALIZER 声明了designated初始化方法后，其余初始化方法如果没有调用designated初始化会有警告提示，具体可以参考: <a href="http://useyourloaf.com/blog/xcode-6-objective-c-modernization/" target="_blank" rel="noopener">Xcode 6 Objective-C Modernization</a> </li>
<li>DEPRECATED_ATTRIBUTE（过期）、NS_SWIFT_NOTHROW（一些便于OC迁移Swift的标记）等</li>
</ul>
<h3 id="3-宏"><a href="#3-宏" class="headerlink" title="3. 宏"></a>3. 宏</h3><ul>
<li>FOUNDATION_EXPORT: 对于extern的兼容性封装，根据不同的平台，转化为对应的extern形式。</li>
<li>NS_ASSUME_NONNULL_BEGIN、NS_ASSUME_NONNULL_END: 在宏范围内的变量、参数、返回值等都默认添加nonnull。</li>
</ul>
<h3 id="4-queryString转换的经典代码"><a href="#4-queryString转换的经典代码" class="headerlink" title="4. queryString转换的经典代码"></a>4. queryString转换的经典代码</h3><p>经常被摘出来放到自己项目中使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> Returns a percent-escaped string following RFC 3986 for a query string key or value.</span><br><span class="line"> RFC 3986 states that the following characters are &quot;reserved&quot; characters.</span><br><span class="line">    - General Delimiters: &quot;:&quot;, &quot;#&quot;, &quot;[&quot;, &quot;]&quot;, &quot;@&quot;, &quot;?&quot;, &quot;/&quot;</span><br><span class="line">    - Sub-Delimiters: &quot;!&quot;, &quot;$&quot;, &quot;&amp;&quot;, &quot;&apos;&quot;, &quot;(&quot;, &quot;)&quot;, &quot;*&quot;, &quot;+&quot;, &quot;,&quot;, &quot;;&quot;, &quot;=&quot;</span><br><span class="line"></span><br><span class="line"> In RFC 3986 - Section 3.4, it states that the &quot;?&quot; and &quot;/&quot; characters should not be escaped to allow</span><br><span class="line"> query strings to include a URL. Therefore, all &quot;reserved&quot; characters with the exception of &quot;?&quot; and &quot;/&quot;</span><br><span class="line"> should be percent-escaped in the query string.</span><br><span class="line">    - parameter string: The string to be percent-escaped.</span><br><span class="line">    - returns: The percent-escaped string.</span><br><span class="line"> */</span><br><span class="line">NSString * AFPercentEscapedStringFromString(NSString *string) &#123;</span><br><span class="line">    static NSString * const kAFCharactersGeneralDelimitersToEncode = @&quot;:#[]@&quot;; // does not include &quot;?&quot; or &quot;/&quot; due to RFC 3986 - Section 3.4</span><br><span class="line">    static NSString * const kAFCharactersSubDelimitersToEncode = @&quot;!$&amp;&apos;()*+,;=&quot;;</span><br><span class="line"></span><br><span class="line">    NSMutableCharacterSet * allowedCharacterSet = [[NSCharacterSet URLQueryAllowedCharacterSet] mutableCopy];</span><br><span class="line">    [allowedCharacterSet removeCharactersInString:[kAFCharactersGeneralDelimitersToEncode stringByAppendingString:kAFCharactersSubDelimitersToEncode]];</span><br><span class="line"></span><br><span class="line">	// FIXME: https://github.com/AFNetworking/AFNetworking/pull/3028</span><br><span class="line">    // return [string stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</span><br><span class="line">    // 以下为针对非单字节字符的处理</span><br><span class="line">  </span><br><span class="line">    static NSUInteger const batchSize = 50;</span><br><span class="line"></span><br><span class="line">    NSUInteger index = 0;</span><br><span class="line">    NSMutableString *escaped = @&quot;&quot;.mutableCopy;</span><br><span class="line"></span><br><span class="line">    while (index &lt; string.length) &#123;</span><br><span class="line">        NSUInteger length = MIN(string.length - index, batchSize);</span><br><span class="line">        NSRange range = NSMakeRange(index, length);</span><br><span class="line"></span><br><span class="line">        // To avoid breaking up character sequences such as 👴🏻👮🏽</span><br><span class="line">        range = [string rangeOfComposedCharacterSequencesForRange:range];</span><br><span class="line"></span><br><span class="line">        NSString *substring = [string substringWithRange:range];</span><br><span class="line">        NSString *encoded = [substring stringByAddingPercentEncodingWithAllowedCharacters:allowedCharacterSet];</span><br><span class="line">        [escaped appendString:encoded];</span><br><span class="line"></span><br><span class="line">        index += range.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	return escaped;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-架构简图"><a href="#5-架构简图" class="headerlink" title="5. 架构简图"></a>5. 架构简图</h3><p><img src="http://alithink.com/img/7afnetworking/afnetworking.png" alt="AFNetworking.png"></p>
]]></content>
      
        <categories>
            
            <category> 读过的源码 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[CTNetworking源码拾遗]]></title>
      <url>/2016/09/05/CTNetworking%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p> 一句话简介：CTNetworking为casa大神针对iOS网络层方案的一个架构实例。</p>
<p> 架构详解: <a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html" target="_blank" rel="noopener">传送门</a></p>
<p> Github: <a href="https://github.com/casatwy/RTNetworking" target="_blank" rel="noopener">传送门</a></p>
<p> PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p>
</blockquote>
<h3 id="1-宏相关"><a href="#1-宏相关" class="headerlink" title="1. 宏相关"></a>1. 宏相关</h3><ul>
<li><p>预防重复引入导致的重定义问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#ifndef CTNetworking_CTNetworkingConfiguration_h</span><br><span class="line">#define CTNetworking_CTNetworkingConfiguration_h</span><br><span class="line"></span><br><span class="line">typedef NS_ENUM(NSInteger, CTAppType) &#123;</span><br><span class="line">    CTAppTypexxx</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">static NSString *CTKeychainServiceName = @&quot;xxxxx&quot;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">extern NSString * const kCTServiceGDMapV3;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>CTNetworking_CTNetworkingConfiguration_h这块的命名没有什么特别的规范，往往是将点替换为下划线，开头添加一条下划线。（casa这里是在最前面又加了工程名，AFNetworking则是省略了扩展名）</p>
</li>
<li><p>巧妙的宏替换：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#define AXCallAPI(REQUEST_METHOD, REQUEST_ID)\</span><br><span class="line">&#123;\</span><br><span class="line">    __weak typeof(self) weakSelf = self;\</span><br><span class="line">    REQUEST_ID = [[CTApiProxy sharedInstance] call##REQUEST_METHOD##WithParams:apiParams serviceIdentifier:self.child.serviceType methodName:self.child.methodName success:^(CTURLResponse *response) &#123;\</span><br><span class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;\</span><br><span class="line">        [strongSelf successedOnCallingAPI:response];\</span><br><span class="line">    &#125; fail:^(CTURLResponse *response) &#123;\</span><br><span class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;\</span><br><span class="line">        [strongSelf failedOnCallingAPI:response withErrorType:CTAPIManagerErrorTypeDefault]; \</span><br><span class="line">    &#125;];\</span><br><span class="line">    [self.requestIdList addObject:@(REQUEST_ID)];\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 通过##REQUEST_METHOD##包裹的变量将进行宏替换，进而达到根据约定区分方法调用的目的</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-UDID"><a href="#2-UDID" class="headerlink" title="2. UDID"></a>2. UDID</h3><p>常规的UUID+keychain的策略：</p>
<ul>
<li><p>创建</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)CT_createUUID</span><br><span class="line">&#123;</span><br><span class="line">    CFUUIDRef uuid = CFUUIDCreate(NULL);</span><br><span class="line">    CFStringRef string = CFUUIDCreateString(NULL, uuid);</span><br><span class="line">    CFRelease(uuid);</span><br><span class="line">    return (__bridge_transfer NSString *)string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存读取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (void)saveUDID:(NSString *)udid</span><br><span class="line">&#123;</span><br><span class="line">    BOOL saveOk = NO;</span><br><span class="line">    NSData *udidData = [self searchKeychainCopyMatching:CTUDIDName];</span><br><span class="line">    if (udidData == nil) &#123;</span><br><span class="line">        saveOk = [self createKeychainValue:udid forIdentifier:CTUDIDName];</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        saveOk = [self updateKeychainValue:udid forIdentifier:CTUDIDName];</span><br><span class="line">    &#125;</span><br><span class="line">    if (!saveOk) &#123;</span><br><span class="line">        [self createPasteBoradValue:udid forIdentifier:CTUDIDName];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (NSString *)UDID</span><br><span class="line">&#123;</span><br><span class="line">    NSData *udidData = [self searchKeychainCopyMatching:CTUDIDName];</span><br><span class="line">    NSString *udid = nil;</span><br><span class="line">    if (udidData != nil) &#123;</span><br><span class="line">        NSString *temp = [[NSString alloc] initWithData:udidData encoding:NSUTF8StringEncoding];</span><br><span class="line">        udid = [NSString stringWithFormat:@&quot;%@&quot;, temp];</span><br><span class="line">    &#125;</span><br><span class="line">    if (udid.length == 0) &#123;</span><br><span class="line">        udid = [self readPasteBoradforIdentifier:CTUDIDName];</span><br><span class="line">    &#125;</span><br><span class="line">    return udid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-内存管理权转移标记"><a href="#3-内存管理权转移标记" class="headerlink" title="3. 内存管理权转移标记"></a>3. 内存管理权转移标记</h3><ul>
<li>__bridge: 不涉及管理所有权的转移。</li>
<li>__bridge_transfer: CF对象转成OC对象时，顺便交出内存管理权。（ARC）</li>
<li>__bridge_retained: OC对象转成CF对象时，顺便交出内存管理权。（CFRelease(xxx)）</li>
</ul>
<h3 id="4-DECORATOR-PATTERN小解"><a href="#4-DECORATOR-PATTERN小解" class="headerlink" title="4. DECORATOR PATTERN小解"></a>4. DECORATOR PATTERN小解</h3><p><img src="http://alithink.com/img/6ctnetworking/decorator.jpg" alt="decorator.png"></p>
<p>适用场景：</p>
<ul>
<li><p>在不影响其他对象的情况下,以动态、透明的方式给单个对象添加职责。</p>
</li>
<li><p>处理那些可以撤消的职责。</p>
</li>
<li><p>当不能采用生成子类的方法进行扩充时。一种情况是,可能有大量独立的扩展,为支持每一种组合将产生大量的子类,使得子类数目呈爆炸性增长。另一种情况可能是因为类定义被隐藏,或类定义不能用于生成子类。            </p>
<blockquote>
<p> 一个专门讲解OC设计模式的开源库—<a href="https://github.com/huang303513/Design-Pattern-For-iOS" target="_blank" rel="noopener">传送门</a>        </p>
</blockquote>
</li>
</ul>
<h3 id="5-闭包的三元操作"><a href="#5-闭包的三元操作" class="headerlink" title="5. 闭包的三元操作"></a>5. 闭包的三元操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fail?fail(CTResponse):nil</span><br></pre></td></tr></table></figure>
<h3 id="6-封装一个统一的空值处理"><a href="#6-封装一个统一的空值处理" class="headerlink" title="6. 封装一个统一的空值处理"></a>6. 封装一个统一的空值处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;NSObject+AXNetworkingMethods.h&quot;</span><br><span class="line">@implementation NSObject (AXNetworkingMethods)</span><br><span class="line"></span><br><span class="line">- (id)CT_defaultValue:(id)defaultData</span><br><span class="line">&#123;</span><br><span class="line">    if (![defaultData isKindOfClass:[self class]]) &#123;</span><br><span class="line">        return defaultData;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self CT_isEmptyObject]) &#123;</span><br><span class="line">        return defaultData;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)CT_isEmptyObject</span><br><span class="line">&#123;</span><br><span class="line">    if ([self isEqual:[NSNull null]]) &#123;</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self isKindOfClass:[NSString class]]) &#123;</span><br><span class="line">        if ([(NSString *)self length] == 0) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self isKindOfClass:[NSArray class]]) &#123;</span><br><span class="line">        if ([(NSArray *)self count] == 0) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if ([self isKindOfClass:[NSDictionary class]]) &#123;</span><br><span class="line">        if ([(NSDictionary *)self count] == 0) &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>如果要是Swift的话其实就不用这么搞啦^_^</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">optionalVarA ?? <span class="string">"为空的时候我就派上用场啦"</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读过的源码 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[CTMediator源码拾遗]]></title>
      <url>/2016/09/01/CTMediator%E6%BA%90%E7%A0%81%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一句话简介：CTMediator为casa大神针对iOS组件化方案的一个架构实例。</p>
<p>架构详解: <a href="http://casatwy.com/iOS-Modulization.html" target="_blank" rel="noopener">传送门</a></p>
<p>Github: <a href="https://github.com/casatwy/CTMediator" target="_blank" rel="noopener">传送门</a></p>
<p>PS: 本拾遗系列文章只专注于代码以及工程层面知识点拾遗，架构层面作者文章已经进行了详细的讲解。</p>
</blockquote>
<h3 id="1-UIViewController常用分段"><a href="#1-UIViewController常用分段" class="headerlink" title="1. UIViewController常用分段"></a>1. UIViewController常用分段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pragma mark - life cycle</span><br><span class="line">#pragma mark - UITableViewDelegate</span><br><span class="line">#pragma mark - CustomDelegate</span><br><span class="line">#pragma mark - event response</span><br><span class="line">#pragma mark - private methods</span><br><span class="line">#pragma mark - getters and setters</span><br></pre></td></tr></table></figure>
<p>这里有个争论就是关于是不是应该将属性实例的初始化放在getter中，这里个人倾向于casa的做法（放在getter中），所以贴一下相关的解释：</p>
<blockquote>
<p>我比较习惯一个对象的”私有”属性写在extension里面，然后这些属性的初始化全部放在getter里面做，在init和dealloc之外，是不会出现任何类似<code>_property</code>这样的写法的。</p>
<p>唐巧说他喜欢的做法是用<code>_property</code>这种，然后关于<code>_property</code>的初始化通过<code>[self setupProperty]</code>这种做法去做。从刚才上面的代码来看，就是要在viewDidLoad里面多调用一个setup方法而已，然后我推荐的方法就是不用多调一个setup方法，直接走getter。</p>
<p>嗯，怎么说呢，其实两种做法都能完成需求。但是从另一个角度看，苹果之所以选择让<code>[self getProperty]</code>和<code>self.property</code>可以互相通用，这种做法已经很明显地表达了苹果的倾向：<code>希望每个property都是通过getter方法来获得</code>。</p>
<p>早在2003年，Allen Holub就发了篇文章《<a href="http://www.javaworld.com/article/2073723/core-java/why-getter-and-setter-methods-are-evil.html" target="_blank" rel="noopener">Why getter and setter methods are evil</a>》，自此之后，业界就对此产生了各种争议，虽然是从Java开始说的，但是发展到后面各种语言也参与了进来。然后虽然现在关于这个问题讨论得少了，但是依旧属于没有定论的状态。setter的情况比较复杂，也不是我这一节的重点，我这边还是主要说getter。我们从objc的设计来看，苹果的设计者更加倾向于<code>getter is not evil</code>。</p>
<p>认为<code>getter is evil</code>的原因有非常之多，或大或小，随着争论的进行，大家慢慢就聚焦到这样的一个原因：<code>Getter和Setter提供了一个能让外部修改对象内部数据的方式，这是evil的，正常情况下，一个对象自己私有的变量应该是只有自己关心</code>。</p>
<p>然后我们回到iOS领域来，objc也同样面临了这样的问题，甚至更加严重：<code>objc并没有像Java那么严格的私有概念</code>。但在实际工作中，我们不太会去操作头文件里面没有的变量，这是从规范上就被禁止的。</p>
<p>认为<code>getter is not evil</code>的原因也可以聚焦到一个：<code>高度的封装性</code>。getter事实上是工厂方法，有了getter之后，业务逻辑可以更加专注于调用，而不必担心当前变量是否可用。我们可以想一下，假设一个ViewController有20个subview要加入view中，这20个subview的初始化代码是肯定逃不掉的，放在哪里比较好？放在哪里都比放在addsubview的地方好，我个人认为最好的地方还是放在getter里面，结合单例模式之后，代码会非常整齐，生产的地方和使用的地方得到了很好的区分。</p>
<p>所以放到iOS来说，我还是觉得使用getter会比较好，因为evil的地方在iOS这边基本都避免了，not evil的地方都能享受到，还是不错的。</p>
</blockquote>
<h3 id="2-应该在哪里配置View的位置？（-继续引用casa的原文）"><a href="#2-应该在哪里配置View的位置？（-继续引用casa的原文）" class="headerlink" title="2. 应该在哪里配置View的位置？（^_^继续引用casa的原文）"></a>2. 应该在哪里配置View的位置？（^_^继续引用casa的原文）</h3><ul>
<li><p>关于在哪儿写Constraints?</p>
<p>苹果在文档中指出，<code>updateViewConstraints</code>是用来做add constraints的地方。</p>
<p>但是在<a href="http://stackoverflow.com/questions/17497002/when-will-or-wont-updateviewconstraints-be-called-on-my-view-controller-for-m" target="_blank" rel="noopener">这里</a>有一个回答者说<code>updateViewConstraints</code>并不适合做添加Constraints的事情。</p>
<p>综合我自己和评论区各位关心这个问题的兄弟们的各种测试和各种文档，我现在觉得还是在<code>viewDidLoad</code>里面开一个layoutPageSubviews的方法，然后在这个里面创建Constraints并添加，会比较好。就是像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (void)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line"></span><br><span class="line">    [self.view addSubview:self.firstView];</span><br><span class="line">    [self.view addSubview:self.secondView];</span><br><span class="line">    [self.view addSubview:self.thirdView];</span><br><span class="line"></span><br><span class="line">    [self layoutPageSubviews];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)layoutPageSubviews</span><br><span class="line">&#123;</span><br><span class="line">    [self.view addConstraints:xxxConstraints];</span><br><span class="line">    [self.view addConstraints:yyyConstraints];</span><br><span class="line">    [self.view addConstraints:zzzConstraints];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生命周期方法选择</p>
<p>其实在viewWillAppear这里改变UI元素不是很可靠，Autolayout发生在viewWillAppear之后，严格来说这里通常不做视图位置的修改，而用来更新Form数据。改变位置可以放在viewWilllayoutSubview或者didLayoutSubview里，而且在viewDidLayoutSubview确定UI位置关系之后设置autoLayout比较稳妥。另外，viewWillAppear在每次页面即将显示都会调用，viewWillLayoutSubviews虽然在lifeCycle里调用顺序在viewWillAppear之后，但是只有在页面元素需要调整时才会调用，避免了Constraints的重复添加。</p>
</li>
</ul>
<h3 id="3-TableView-didSelect习惯"><a href="#3-TableView-didSelect习惯" class="headerlink" title="3. TableView didSelect习惯"></a>3. TableView didSelect习惯</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 选择的开始先取消选择状态</span><br><span class="line">[tableView deselectRowAtIndexPath:indexPath animated:YES]</span><br></pre></td></tr></table></figure>
<h4 id="4-URL相关api"><a href="#4-URL相关api" class="headerlink" title="4. URL相关api"></a>4. URL相关api</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">NSMutableDictionary *params = [[NSMutableDictionary alloc] init];</span><br><span class="line"></span><br><span class="line">// 1. query: key1=value1&amp;key2=value2</span><br><span class="line">NSString *urlString = [url query];</span><br><span class="line"></span><br><span class="line">// 2. 解析参数</span><br><span class="line">for (NSString *param in [urlString componentsSeparatedByString:@&quot;&amp;&quot;]) &#123;</span><br><span class="line">    NSArray *elts = [param componentsSeparatedByString:@&quot;=&quot;];</span><br><span class="line">    if([elts count] &lt; 2) continue;</span><br><span class="line">    [params setObject:[elts lastObject] forKey:[elts firstObject]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 3. path: /index.html</span><br><span class="line">NSString *actionName = [url.path stringByReplacingOccurrencesOfString:@&quot;/&quot; withString:@&quot;&quot;];</span><br><span class="line">if ([actionName hasPrefix:@&quot;native&quot;]) &#123;</span><br><span class="line">    return @(NO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-忽略不必要的警告⚠️"><a href="#5-忽略不必要的警告⚠️" class="headerlink" title="5. 忽略不必要的警告⚠️"></a>5. 忽略不必要的警告⚠️</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line">        return [target performSelector:action withObject:params];</span><br><span class="line">#pragma clang diagnostic pop</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 读过的源码 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《函数式Swift》读书拾遗]]></title>
      <url>/2016/08/16/%E3%80%8A%E5%87%BD%E6%95%B0%E5%BC%8FSwift%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>设计良好的Swift函数式程序应该具有的一些特质：</p>
<ul>
<li>模块化</li>
<li>对可变状态的谨慎处理</li>
<li>类型</li>
</ul>
<blockquote>
<p>避免使用程序状态和可变对象，是降低程序复杂度的有效方式之一，而这也正是函数式编程的精髓。</p>
</blockquote>
<h3 id="函数式思想"><a href="#函数式思想" class="headerlink" title="函数式思想"></a>函数式思想</h3><h4 id="1-常规的重构思路"><a href="#1-常规的重构思路" class="headerlink" title="1. 常规的重构思路"></a>1. 常规的重构思路</h4><p>抽象实体，扩展方法，逻辑复杂之后抽象出辅助方法</p>
<h4 id="2-函数式"><a href="#2-函数式" class="headerlink" title="2. 函数式"></a>2. 函数式</h4><blockquote>
<p>函数式编程的核心理念就是函数是值。（因此函数的typealias的命名规则应与类、结构体相同）</p>
</blockquote>
<p>实例代码链式版本：</p>
<blockquote>
<p>这个例子是你在编写战舰类游戏时可能需要实现的一个核心函数。我们把将要看到的问题归结为,判断一个给定的点是否在射程范围内,并且距离友方船舶和我们自身都不太近。</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Distance</span> = <span class="type">Double</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Position</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">minus</span><span class="params">(p: Position)</span></span> -&gt; <span class="type">Position</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Position</span>(x: x - p.x, y: y - p.y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> length: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqrt(x * x + y * y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ship</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> position: <span class="type">Position</span></span><br><span class="line">    <span class="keyword">var</span> firingRange: <span class="type">Distance</span></span><br><span class="line">    <span class="keyword">var</span> unsafeRange: <span class="type">Distance</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Region</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> lookup: <span class="type">Position</span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Region</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">circle</span><span class="params">(redius: Distance)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> point.length &lt;= redius &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">shift</span><span class="params">(offset: Position)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point.minus(offset)) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">invert</span><span class="params">()</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> !<span class="keyword">self</span>.lookup(point) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(region: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point) &amp;&amp; region.lookup(point) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">union</span><span class="params">(region: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Region</span>(lookup: &#123; point <span class="keyword">in</span> <span class="keyword">self</span>.lookup(point) || region.lookup(point) &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">difference</span><span class="params">(minus: Region)</span></span> -&gt; <span class="type">Region</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.intersection(minus.invert())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Ship</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canSafelyEngageShip</span><span class="params">(target: Ship, friendly: Ship)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> unsafeRegion = <span class="type">Region</span>.circle(<span class="keyword">self</span>.unsafeRange)</span><br><span class="line">        <span class="keyword">let</span> maxfireRegion = <span class="type">Region</span>.circle(<span class="keyword">self</span>.firingRange)</span><br><span class="line">        <span class="keyword">let</span> rangeRegion = maxfireRegion.difference(unsafeRegion)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> firingRegion = rangeRegion.shift(position)</span><br><span class="line">        <span class="keyword">let</span> friendlyRegion = unsafeRegion.shift(friendly.position)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> resultRegion = firingRegion.difference(friendlyRegion)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> resultRegion.lookup(target.position)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">2</span>, y: <span class="number">2</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> enemyShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">5</span>, y: -<span class="number">7</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> friendShip = <span class="type">Ship</span>(position: <span class="type">Position</span>(x: <span class="number">5</span>, y: -<span class="number">5</span>), firingRange: <span class="number">10</span>, unsafeRange: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">myShip.canSafelyEngageShip(enemyShip, friendly: friendShip)</span><br></pre></td></tr></table></figure>
<h3 id="类型驱动开发"><a href="#类型驱动开发" class="headerlink" title="类型驱动开发"></a>类型驱动开发</h3><blockquote>
<p>函数生成器，生成预设参数的专用函数。</p>
</blockquote>
<p>一些优势：</p>
<ul>
<li>安全</li>
<li>模块化</li>
<li>清晰易懂</li>
</ul>
<p>柯里化带来的一些好处（重点在于统一类型）：</p>
<blockquote>
<p>按照柯里化⻛格来定义滤镜,我们可以很容易地使用 &gt;&gt;&gt; 运算符将它们进行组合。假如我们用这些函数未柯里化的版本来构建滤镜的话,虽然依然可以写出相同的滤镜,但是这些滤镜的类型将根据它们所接受的参数不同而略有不同。这样一来,想要为这些不同类型的滤镜定义一个统一的组合运算符就要比现在困难得多了。</p>
</blockquote>
<p>自己的感受就是利于统一类型，将额外的参数都包装在生成的函数中，只保留源作为参数，加工之后的结果作为输出，方便对于函数类型的抽象。</p>
<h3 id="Map、Filter和Reduce"><a href="#Map、Filter和Reduce" class="headerlink" title="Map、Filter和Reduce"></a>Map、Filter和Reduce</h3><blockquote>
<p>接受其它函数作为参数的函数有时被称为<em>高阶函数</em>。</p>
</blockquote>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">T</span>] = [] </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            result.append(transform(x))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由顶层函数转为了协议扩展，这样做的优点是自动补全更完善，暧昧的命名更少，以及（通常）代码结构更清晰。</p>
<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filter</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> result: [<span class="type">Element</span>] = []</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> <span class="keyword">where</span> includeElement(x) &#123;</span><br><span class="line">            result.append(x) </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">reduce</span>&lt;T&gt;<span class="params">(initial: T, combine: <span class="params">(T, Element)</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> result = initial <span class="keyword">for</span> x <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            result = combine(result, x) </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用reduce实现map跟filter的版本</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">mapUsingReduce</span>&lt;T&gt;<span class="params">(transform: Element -&gt; T)</span></span> -&gt; [<span class="type">T</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> result + [transform(x)]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterUsingReduce</span><span class="params">(includeElement: Element -&gt; Bool)</span></span> -&gt; [<span class="type">Element</span>] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduce</span>([]) &#123; result, x <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">return</span> includeElement(x) ? result + [x] : result</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="泛型和Any类型"><a href="#泛型和Any类型" class="headerlink" title="泛型和Any类型"></a>泛型和Any类型</h4><blockquote>
<p>Any类型和泛型两者都能用于定义接受两个不同类型参数的函数。然而，理解两者之间的区别至关重要：泛型可以用于定义灵活的函数，类型检查仍然由编译器负责；而Any类型则可以避开Swift的类型系统（所以应该尽可能避免使用）。</p>
</blockquote>
<p>使用泛型允许你无需牺牲类型安全就能够在编译器的帮助下写出灵活的函数；如果使用Any类型，那你就真的孤立无援了。</p>
<h3 id="可选值"><a href="#可选值" class="headerlink" title="可选值"></a>可选值</h3><h4 id="？？操作符"><a href="#？？操作符" class="headerlink" title="？？操作符"></a>？？操作符</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">in</span> x <span class="keyword">operator</span>??</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, defaultValue: T)</span></span> -&gt; <span class="type">T</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">optional</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了避免defaultValue的无效求值</span></span><br><span class="line"><span class="keyword">in</span> x <span class="keyword">operator</span> ?? &#123; <span class="keyword">associativity</span> <span class="keyword">right</span> <span class="keyword">precedence</span> <span class="number">110</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> ??&lt;T&gt;<span class="params">(<span class="keyword">optional</span>: T?, @autoclosure defaultValue: <span class="params">()</span></span></span> -&gt; <span class="type">T</span>) -&gt; <span class="type">T</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">optional</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue()</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="分支上的可选值"><a href="#分支上的可选值" class="headerlink" title="分支上的可选值"></a>分支上的可选值</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//switch中的使用</span></span><br><span class="line"><span class="keyword">switch</span> madridPopulation &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>?: <span class="built_in">print</span>(<span class="string">"Nobody in Madrid"</span>)</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">1</span>..&lt;<span class="number">1000</span>)?: <span class="built_in">print</span>(<span class="string">"Less than a million in Madrid"</span>) </span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Some</span>(<span class="keyword">let</span> x): <span class="built_in">print</span>(<span class="string">"<span class="subst">\(x)</span> people in Madrid"</span>)</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">None</span>: <span class="built_in">print</span>(<span class="string">"We don't know about Madrid"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//guard中的使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">populationDescriptionForCity</span><span class="params">(city: String)</span></span> -&gt; <span class="type">String</span>? &#123; </span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> population = cities[city] <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"The population of Madrid is <span class="subst">\(population * <span class="number">1000</span>)</span>"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="可选映射"><a href="#可选映射" class="headerlink" title="可选映射"></a>可选映射</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">map</span>&lt;U&gt;<span class="params">(transform: Wrapped -&gt; U)</span></span> -&gt; <span class="type">U</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> x = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> transform(x) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">flatMap</span>&lt;U&gt;<span class="params">(f: Wrapped -&gt; U?)</span></span> -&gt; <span class="type">U</span>? &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> x = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> f(x) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="为什么使用可选值？"><a href="#为什么使用可选值？" class="headerlink" title="为什么使用可选值？"></a>为什么使用可选值？</h4><p>避免参数不合法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSParameterAssert(param);</span><br></pre></td></tr></table></figure>
<p>可选类型标识了失败的可能性，类型系统将有助于你捕捉难以察觉的错误。其中一些错误很容易在开发过程中被发现，但是其余的可能会一直留存到生产代码中去。坚持使用可选值能够从根本上杜绝这类错误。</p>
<h3 id="QuickCheck"><a href="#QuickCheck" class="headerlink" title="QuickCheck"></a>QuickCheck</h3>]]></content>
      
        <categories>
            
            <category> 读过的书 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS屏幕旋转那些事]]></title>
      <url>/2016/08/01/iOS%E5%B1%8F%E5%B9%95%E6%97%8B%E8%BD%AC%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文屏幕旋转方案仅限于兼容iOS8+</p>
</blockquote>
<h3 id="1-从APP层次谈起"><a href="#1-从APP层次谈起" class="headerlink" title="1. 从APP层次谈起"></a>1. 从APP层次谈起</h3><p>APP常见的布局层次如下图所示：<br><img src="http://alithink.com/img/5rotate/app layer.png" alt="app layer.png"><br>当工程目标开启了多个屏幕方向之后，具体类中有关屏幕旋转的配置其实只与当前屏幕展示模块的最外层VC容器有关。<br>但由于往往存在容器中某些VC针对屏幕旋转的个性化配置，所以需要进行从里层VC到外层容器的旋转状态传递。例如： </p>
<ul>
<li>里层UIViewController的配置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义UINavigationController的配置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.shouldAutorotate() ?? <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.supportedInterfaceOrientations() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.viewControllers.last?.preferredInterfaceOrientationForPresentation() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义UITabBarController的配置</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">shouldAutorotate</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.shouldAutorotate() ?? <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">supportedInterfaceOrientations</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.supportedInterfaceOrientations() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">preferredInterfaceOrientationForPresentation</span><span class="params">()</span></span> -&gt; <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController?.preferredInterfaceOrientationForPresentation() ?? .<span class="type">Portrait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-AppDelegate配置"><a href="#2-AppDelegate配置" class="headerlink" title="2. AppDelegate配置"></a>2. AppDelegate配置</h3><p>按照上面的方法配置好后，就可以自由的控制转屏了，但在某些情况下会存在问题，举个例子：假如A页面屏幕锁定为竖屏，点击A页面的一个按钮跳转到了B页面（方式存在push跟present两种），B页面是可以进行横竖屏旋转的，当B页面旋转至横屏，这时候点击返回，会发现A页面也变成横屏展示了，而且无法通过屏幕旋转恢复到竖屏展示。这时候下面这个代理方法就排上用场了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">application</span><span class="params">(application: UIApplication, supportedInterfaceOrientationsForWindow window: UIWindow?)</span></span> -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;    </span><br><span class="line">    <span class="comment">// 限定所有present的模态视图只能竖屏</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">self</span>.window?.rootViewController?.presentedViewController != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 限定容器中当前展示的为RotateDetailViewController的实例时可以旋屏，其余页面只能竖屏</span></span><br><span class="line">    <span class="keyword">let</span> baseTabBarController = <span class="keyword">self</span>.window?.rootViewController <span class="keyword">as</span>? <span class="type">BaseTabBarController</span></span><br><span class="line">    <span class="keyword">if</span> ((baseTabBarController?.selectedViewController <span class="keyword">as</span>? <span class="type">BaseNavigationController</span>)?.topViewController <span class="keyword">is</span> <span class="type">RotateDetailViewController</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">AllButUpsideDown</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Portrait</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-强制旋屏"><a href="#3-强制旋屏" class="headerlink" title="3. 强制旋屏"></a>3. 强制旋屏</h3><blockquote>
<p>前提条件：该VC允许旋转</p>
</blockquote>
<ul>
<li>强制竖屏</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forcePortrait</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> width = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line">    <span class="keyword">let</span> height = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isLandscape = width &gt; height</span><br><span class="line">    <span class="keyword">if</span> isLandscape &#123;</span><br><span class="line">        <span class="keyword">let</span> device = <span class="type">UIDevice</span>.currentDevice()</span><br><span class="line">        <span class="keyword">let</span> number = <span class="type">NSNumber</span>(integer: <span class="type">UIInterfaceOrientation</span>.<span class="type">Portrait</span>.rawValue)</span><br><span class="line">        device.setValue(number, forKey: <span class="string">"orientation"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>强制横屏</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">forceLandScape</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> width = <span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line">    <span class="keyword">let</span> height = <span class="type">UIScreen</span>.mainScreen().bounds.size.height</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> isLandscape = width &lt; height</span><br><span class="line">    <span class="keyword">if</span> isLandscape &#123;</span><br><span class="line">        <span class="keyword">let</span> device = <span class="type">UIDevice</span>.currentDevice()</span><br><span class="line">        <span class="keyword">let</span> number = <span class="type">NSNumber</span>(integer: <span class="type">UIInterfaceOrientation</span>.<span class="type">LandscapeRight</span>.rawValue)</span><br><span class="line">        device.setValue(number, forKey: <span class="string">"orientation"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上方案基本可以搞定大部分的屏幕旋转场景了。如果APP的产品需求中主体为固定方向，只要求对弹出(present)模态视图进行旋转的话，可以参考下面这篇文章：<br><a href="http://swiftiostutorials.com/ios-orientations-landscape-orientation-one-view-controller/" target="_blank" rel="noopener">iOS Orientations: Landscape orientation for only one View Controller</a><br>这么做会更加方便一些，但问题是这种方案对于push模式的场景并不适用，需要结合以上方案综合解决。  </p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Charts诊疗日志]]></title>
      <url>/2016/07/25/Charts%E8%AF%8A%E7%96%97%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用Charts有一段时间了，期间遇到了一些现有版本存在的问题，特作此记录。<br><a href="https://github.com/danielgindi/Charts" target="_blank" rel="noopener">Charts传送门</a></p>
</blockquote>
<h2 id="病症1-组合图-CombinedChartView-弹出MarkerView位置不对"><a href="#病症1-组合图-CombinedChartView-弹出MarkerView位置不对" class="headerlink" title="病症1.组合图(CombinedChartView)弹出MarkerView位置不对"></a>病症1.组合图(CombinedChartView)弹出MarkerView位置不对</h2><h3 id="病症表象如下图："><a href="#病症表象如下图：" class="headerlink" title="病症表象如下图："></a>病症表象如下图：</h3><p><img src="http://alithink.com/img/4charts/combine.png" alt="combine.png"></p>
<p>截图为想要的结果（修复后的效果），实际情况为弹出的Marker没有显示在对应折线图的数据点上。</p>
<h3 id="患病位置如下图："><a href="#患病位置如下图：" class="headerlink" title="患病位置如下图："></a>患病位置如下图：</h3><p><img src="http://alithink.com/img/4charts/chart_marker.png" alt="chart_marker.png"></p>
<h3 id="治疗方案："><a href="#治疗方案：" class="headerlink" title="治疗方案："></a>治疗方案：</h3><p>BarLineChartViewBase -&gt; getMarkerPosition  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pt = <span class="type">CGPoint</span>(x: xPos, y: yPos * _animator.phaseY)</span><br></pre></td></tr></table></figure>
<p>在pt初始化之后添加如下分支：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">self</span> <span class="keyword">is</span> <span class="type">CombinedChartView</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> combinedChartView = <span class="keyword">self</span> <span class="keyword">as</span>! <span class="type">CombinedChartView</span></span><br><span class="line">    <span class="keyword">let</span> combinedChartData = _data <span class="keyword">as</span>! <span class="type">CombinedChartData</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">if</span> highlight.dataIndex &gt;= <span class="number">0</span> &amp;&amp; highlight.dataIndex &lt; combinedChartView.drawOrder.<span class="built_in">count</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> chartType =  <span class="type">CombinedChartView</span>.<span class="type">DrawOrder</span>(rawValue: combinedChartView.drawOrder.<span class="built_in">reverse</span>()[highlight.dataIndex])!</span><br><span class="line">        <span class="keyword">var</span> axisDependency = <span class="type">ChartYAxis</span>.<span class="type">AxisDependency</span>.<span class="type">Left</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">switch</span> chartType &#123;</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Bar</span>:</span><br><span class="line">            axisDependency = combinedChartData.barData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Line</span>:</span><br><span class="line">            axisDependency = combinedChartData.lineData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Bubble</span>:</span><br><span class="line">            axisDependency = combinedChartData.bubbleData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Candle</span>:</span><br><span class="line">            axisDependency = combinedChartData.candleData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        <span class="keyword">case</span> .<span class="type">Scatter</span>:</span><br><span class="line">            axisDependency = combinedChartData.scatterData.getDataSetByIndex(dataSetIndex)!.axisDependency</span><br><span class="line">        &#125;</span><br><span class="line">        getTransformer(axisDependency).pointValueToPixel(&amp;pt)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getTransformer(data.getDataSetByIndex(dataSetIndex)!.axisDependency).pointValueToPixel(&amp;pt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处drawOrder.reverse()要做reverse的原因是highlight里面记录的dataIndex的顺序正好与drawOrder数组的顺序相反，例如drawOrder为[Bar, Line],那么对应的Bar的dataIndex为1，Line的dataIndex为0。</p>
</blockquote>
<h3 id="总结分析"><a href="#总结分析" class="headerlink" title="总结分析"></a>总结分析</h3><p>CombinedChartView中包含的各类图形的数据会保存在独立的data属性中，例如柱状图的barData,折线图的lineData。因此原有的从统一data属性取得dataSet对应参考轴的操作就会返回错误的结果，以致因为选错了参考轴计算出了错误的Marker绘制位置。</p>
<h2 id="病症2-堆积图弹出MarkerView数值不对"><a href="#病症2-堆积图弹出MarkerView数值不对" class="headerlink" title="病症2.堆积图弹出MarkerView数值不对"></a>病症2.堆积图弹出MarkerView数值不对</h2><h3 id="病症表象如下图：-1"><a href="#病症表象如下图：-1" class="headerlink" title="病症表象如下图："></a>病症表象如下图：</h3><p><img src="http://alithink.com/img/4charts/stack.png" alt="stack.png"></p>
<p>截图为想要的结果（修复后的效果），实际情况为弹出的Marker总是显示所有柱子的叠加值。</p>
<h3 id="治疗方案：-1"><a href="#治疗方案：-1" class="headerlink" title="治疗方案："></a>治疗方案：</h3><p>BalloonMarker -&gt; refreshContent</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> entry <span class="keyword">is</span> <span class="type">BarChartDataEntry</span> &amp;&amp; highlight.stackIndex != -<span class="number">1</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> chartEntry = entry <span class="keyword">as</span>! <span class="type">BarChartDataEntry</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> values = chartEntry.values &#123;</span><br><span class="line">        configLabelns(entry, value: values[highlight.stackIndex])</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    configLabelns(entry)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>首先目前只有柱状图支持堆积展现，并且进行堆积展示的BarChartDataEntry有一个values属性用于存放该列的所有堆积值；stackIndex用于标示当前点击的柱子从下往上的序列，例如最下面的柱子为0，之上一个为1，依次递增。</p>
</blockquote>
<h3 id="总结分析-1"><a href="#总结分析-1" class="headerlink" title="总结分析"></a>总结分析</h3><p>默认的Marker处理值展示的时候，没有考虑到堆积图的特殊性，统一从entry的value属性进行取值，导致最终展现的数值不是我们想要的结果。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《世界简史》略读]]></title>
      <url>/2016/07/20/%E3%80%8A%E4%B8%96%E7%95%8C%E7%AE%80%E5%8F%B2%E3%80%8B%E7%95%A5%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h3 id="生命的起源"><a href="#生命的起源" class="headerlink" title="生命的起源"></a>生命的起源</h3><ul>
<li>沉积岩（岩石记录）大致可以了解到16亿年前的生命形态。</li>
<li>包含着生命迹象的最初的岩石称为原生岩。</li>
</ul>
<blockquote>
<p>古生代早期：比较低等的生物遗迹如水生贝类的贝壳、植物状动物的花状头、海藻、沙蚕类的甲壳类生物足迹和骨骼化石。<br>三叶虫：最早出生的生物，跟蚜虫十分相似，他们能像蚜虫那样把身体卷成球状。<br>海蝎：过了几百万年出现，比之前的生物更灵活有力</p>
</blockquote>
<h3 id="鱼类时期"><a href="#鱼类时期" class="headerlink" title="鱼类时期"></a>鱼类时期</h3><h4 id="生物区别于非生命体的两个特征："><a href="#生物区别于非生命体的两个特征：" class="headerlink" title="生物区别于非生命体的两个特征："></a>生物区别于非生命体的两个特征：</h4><ul>
<li>能够通化其他物质，使其成为自身的一部分（吃东西）。</li>
<li>可以再造自己（繁衍后代）。</li>
</ul>
<blockquote>
<p>鱼类时期（泥盆季）：大约在5亿年以前，已知的最早的脊椎动物。他们起初的样子跟现在的鲨鱼、鲟鱼有些相似。</p>
</blockquote>
<h3 id="石炭纪沼泽期"><a href="#石炭纪沼泽期" class="headerlink" title="石炭纪沼泽期"></a>石炭纪沼泽期</h3><p>植物先于动物移居到陆地上。</p>
<blockquote>
<p>植物：大型湿地木质植物，如木质苔藓、木质蕨类、巨型木贼等。<br>动物：蜈蚣、马路、原生昆虫（体型较大，如巨型蜻蜓）、蜘蛛蝎子的祖先，随后脊椎动物登陆。<br>肺的进化。<br>末期温度剧烈变化，沼泽地植物完全消失，煤炭层的形成基础。</p>
</blockquote>
<h3 id="爬行动物时期"><a href="#爬行动物时期" class="headerlink" title="爬行动物时期"></a>爬行动物时期</h3><ul>
<li>卵生，在孵化完成前就已经接近发育的成熟阶段。</li>
<li>出现了结籽植物。</li>
</ul>
<blockquote>
<p>爬行动物时期（中生代）：持续到距今大约8000万年以前，之前称为古生代和无生代（共14亿年）。中生代大约持续了两亿年以上。之后称为新生代。<br>动物：各种恐龙以及其他爬行动物。</p>
</blockquote>
<h3 id="哺乳动物时期"><a href="#哺乳动物时期" class="headerlink" title="哺乳动物时期"></a>哺乳动物时期</h3><p>此时的地图版图和现在的世界地图看起来有些大致相似了。<br>新生代与中生代生物的最根本区别，在于它们的精神生活不同。这种差别就其本质来说，主要是来源于母体和后代之间不同程度的接触。爬行动物和后代几乎没有接触。除个别特例之外，爬行动物在产卵之后就会自行离开，任其自生自灭。新生代以哺育和抚养后代为特点。</p>
<blockquote>
<p>灵长目：狐猿、猿、类人猿和人（解刨学上的相似性）<br>一共四次冰河时期。第一次距今60万年，最后一次距今约5万年。最后一次冰河时期，类人猿开始出现。<br>新石器时代：大约在10000到12000年以前。</p>
</blockquote>
<h3 id="文明雏形"><a href="#文明雏形" class="headerlink" title="文明雏形"></a>文明雏形</h3><p>大约公元前6000年</p>
<h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><ul>
<li>字母文字<ul>
<li>苏美尔：楔形文字</li>
<li>埃及：象形文字</li>
</ul>
</li>
<li>中国：象形文字</li>
</ul>
<h4 id="汉谟拉比法典"><a href="#汉谟拉比法典" class="headerlink" title="汉谟拉比法典"></a>汉谟拉比法典</h4><p>公元前2100年巴比伦帝国</p>
<h3 id="犹太人"><a href="#犹太人" class="headerlink" title="犹太人"></a>犹太人</h3><ul>
<li>希伯来人-闪米特系的民族。</li>
<li>公元前1000年之前，就定居在犹地亚，首都一直是耶路撒冷。</li>
<li>《旧约》（希伯来圣经），公元前4世纪或5世纪。</li>
</ul>
<h3 id="希腊文明"><a href="#希腊文明" class="headerlink" title="希腊文明"></a>希腊文明</h3><p>促使希腊各个城邦形成一个整体的原因： </p>
<ul>
<li>史诗</li>
<li>每四年在奥林匹亚举行一次奥运会</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读过的书 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[联通旧事]]></title>
      <url>/2016/07/08/%E8%81%94%E9%80%9A%E6%97%A7%E4%BA%8B/</url>
      <content type="html"><![CDATA[<blockquote>
<p>时间：2011.3~2013.6</p>
</blockquote>
<h3 id="初来乍到"><a href="#初来乍到" class="headerlink" title="初来乍到"></a>初来乍到</h3><blockquote>
<p>出场人物代号简介：<br>我：初出茅庐的Java小菜鸟</p>
</blockquote>
<p>　　那是一个属于Java的年代（^_^其实现在依然如此）。但造化弄人一直没有长时间从事相关工作。在浪潮实习的时候用了C#，在另一个伤心之地（实在不想提。。唉。。）用了一盏茶的J2EE和PB，而后我来到了联通。<br>　　面试时问的问题都是J2EE相关的，于是顺利的加入了经分数据组😂（跟J2EE几乎没半毛钱关系，这就是命吧，不过现在回想，还是要感谢一下命运之神）。时间太久，忘记当时的心情了，只依稀记得当时坐到工位上，时而会慨叹：“也许我就要跟数据库、etl和shell搞一辈子了吧”。</p>
<h3 id="误打误撞"><a href="#误打误撞" class="headerlink" title="误打误撞"></a>误打误撞</h3><blockquote>
<p>出场人物代号简介:<br>川哥：掌分项目的发起者<br>老孟：掌分项目组长以及同甘共苦过的兄弟</p>
</blockquote>
<p>　　同事领导都挺好，身边也有不少同学，所以日子过得还算温馨舒适。然后突然有一天命运的轨迹就发生了改变，在集团常驻的川哥发起了掌上经分项目（仅限iOS端）。  </p>
<blockquote>
<p>回想当时iOS生态圈的境况为：<br>目标设备：iPhone3G、3GS、iPad1<br>iOS版本: iOS4.x<br>开发设备：iMac、黑苹果(t410黑)<br>开发环境：那是一个Xcode与Interface builder分离的时代</p>
</blockquote>
<p>　　迷迷瞪瞪的就跟老孟被安排进了掌分项目组，当时对于OSX（现在应该叫macOS啦）和iOS一无所知，唯一的学习资料是一本iPhone开发书籍（名字忘掉了，这本书其中之一的作者以外包团队领头人的身份加入了项目）。项目的第一个版本主要由外包团队负责研发，但是我跟老孟需要尽快的融入进来，借助项目快速上手iOS开发，然后将项目接手过来（最大限度的节省外包费用，😂据说最后也没有把外包团队的费用完全结清）。</p>
<h3 id="小有所成"><a href="#小有所成" class="headerlink" title="小有所成"></a>小有所成</h3><blockquote>
<p>军军：外包团队主力开发<br>苟工：外包团队领头人</p>
</blockquote>
<p>　　那是一个几乎没有轮子的时代，或者说当时都还没有使用过github的我没有具备找轮子的能力。所以几乎所有的东西都是从零做起，走过的坑不少，但是收获也很大，很快就可以上手一些简单模块的开发了。说起成长的喜悦，记得兄弟们一起加班时的免费餐补报销，加班九点之后的打车报销以及写出bug后大家开玩笑的声讨书（那超大字号的白底黑字，打开屏幕吓出一身冷汗来）。<br>　　这里要感谢下苟工当时对于delegate的悉心讲解，感谢军军同志对于我冒出的各种问题的耐心解答。
　　</p>
<h3 id="北京你好"><a href="#北京你好" class="headerlink" title="北京你好"></a>北京你好</h3><blockquote>
<p>博士：名副其实的博士，会议室加班常客，只因为大家都叫他博士，导致往往有些人都不记得他叫什么名字了，但是我记得，因为他跟托塔李天王重名^_^<br>文哥：目前公司的领导</p>
</blockquote>
<p>　　当领导让你出差，但是又不明确说多少天的时候，你就应该明白我可能一时半会回不来了😂。就这样，北京，我来了。<br>　　在项目的初版汇报通过之后，我们来到了北京金融街21号-联通集团总部，开始了现场开发支持工作。想象过一个人提着iMac盒子出差的感受吗，回想起来，好心酸，胳膊也好酸。。。<br>　　常驻联通会议室之后，发现一个真相，原来工作之后需要掌握的一项重要技能就是做PPT。逐级的汇报，不停的过片子，修改字眼与内容的组织是博士经常加班到很晚的原因。记得我们晚上从集团运动区打完球回来，还能经常享受到博士亲切地问候。<br>　　博士给我留下了很深刻的印象，跟现在的文哥有一拼，为人温文尔雅，专业知识过硬，处事细致全面，知识面很广，仿佛所有的东西都有所涉猎并且见解独特。（这里声明下，绝无拍马屁之嫌）<br>　　集团的食堂也给我留下了不少美味的回忆，超值的早餐、便宜好吃的肉龙等等，现在想想当时没有胖起来真是个奇迹。（然而在我的不懈努力下，现在终于还是胖起来了）
　　</p>
<h3 id="重新来过"><a href="#重新来过" class="headerlink" title="重新来过"></a>重新来过</h3><p>　　终于热更新这个问题被提出来了，Native开发的最大不足其实就是这里了。当时没有如今大行其道的JSPatch、风风火火的React Native，于是开发一时进入了瓶颈。想过不少方案都没有很好的解决这个问题，于是川哥决定借助现有的成熟平台换一个架构重新来过。<br>　　经过几轮讨论之后，确定了MicroStrategy的方案，至今跟厂商的几个伙伴还保持着联系，毕竟国内懂得定制化改造MSTR SDK的iOS开发者估计不算多，当时一起讨论了不少问题，还乔装成他们的技术人员去帮他们紧急搞定了一个项目^_^。<br>　　实体、事实、度量、选择器、报表、文档、智能立方体、缓存、权限。。。接触了不少商业智能常见的概念与功能。起初是比较排斥的，因为借助第三方平台就基本失去了实际编写功能代码的机会了（因为涉及二次开发，针对MSTR SDK套壳的部分还是需要编写的）。但转念一想既然改变的势头已无法扭转，那只有硬着头皮顺流而行了。因为处女座的特质，让我在很短的时间内就掌握了MSTR的基本功能，有疑惑的地方就联系厂商技术支持，所以很快MSTR版本的掌分就搞出来了。</p>
<blockquote>
<p>心里话：<br>不知道现在掌分的状况如何了，个人一直觉得中途换成MSTR的方案并不是一个明智的选择，原因如下：  </p>
<ol>
<li>APP其实往往不需要彻底的动态性，内容的动态性往往可以通过产品向的方案进行解决。  </li>
<li>MSTR的权限以及缓存模型是基于用户的，而用户又涉及到license的费用计算，一旦涉及到费用就会衍生出不少扯皮的事情；反观自主开发的APP这部分配置就非常灵活。  </li>
<li>这点我觉得最重要，那就是APP存在的重要意义之一其实就是她极致的用户体验，如果在动态性与极致用户体验之一做个权衡的话，会毫不犹豫的以保证后者为先。（尤其在企业应用的范畴内，省掉了App Store的审核成本，版本的迭代速度可以非常快，版本的更新提示反而可以算作是对于用户的一种引导）</li>
</ol>
</blockquote>
<h3 id="北京再见"><a href="#北京再见" class="headerlink" title="北京再见"></a>北京再见</h3><blockquote>
<p>朋友们：东儿、芳芳*2、小杜、传奇、夺儿等（排名不分先后）</p>
</blockquote>
<p>　　来到北京最开心的回忆就是跟一起出差的朋友们几乎游遍了京城所有可玩的地方。故宫、天坛、长城、颐和园、南锣鼓巷、后海、雍和宫、国家博物馆、国家图书馆、鸟巢、水立方、清华北大、前门、王府井、西单、三里屯（优衣库试衣间）等。借老孟跟东儿的单反留下了不少记忆的片段，现在还经常看一下当时的照片，回味当初那份单纯的快乐，这份快乐只属于那段日子，那个年纪。（着重提一下，菜市口附近教子胡同里面的一个麻辣烫小店，里面的辣椒太tm过瘾了。。。）<br>　　唯一不变的就是变化，突然因为项目成本的原因（还有一些其他原因）研发团队就回到了济南。模式变为了济南团队研发结束提交变更，留守在集团的老孟负责向领导进行汇报安装。  </p>
<blockquote>
<p>说说这段日子的收获：  </p>
<ol>
<li>扩展视野、吃喝玩乐、结交朋友算是一方面😜。  </li>
<li>中途也参加了一些iOS精通类以及用户体验类的培训，总算是给我这个自学党补了补漏。  </li>
<li>接触MSTR，熟悉了主流报表平台的常用概念以及构建流程；通过对SDK的二次开发，为了实现一些奇葩需求，了解了不少iOS相关的黑魔法（swizzling、runtime等）</li>
</ol>
</blockquote>
<h3 id="联通再见"><a href="#联通再见" class="headerlink" title="联通再见"></a>联通再见</h3><p>　　人忙起来往往没时间去想太多其他事情，可一旦闲下来，然后再有不爽的任务压过来时，就往往会思考权衡下自己将来要走的路了。当掌分的工作暂时告一段落，领导打算安排去做其他数据加工审核相关工作的时候，心里总是有种排斥感。那段时间心里总是有个声音在问自己，将来到底想做什么。联通的生活确实很安逸舒适，但自己内心坚持移动端研发方向，所以最后还是选择了离开。    </p>
<blockquote>
<p>后记：<br>在联通工作的这段日子，结识了伙伴，扩展了视野，最重要的是确定了自己下一步该走的路。<br>感谢那段时光，感谢那段日子有你们相伴。年轻万岁，青春无悔。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 回忆录 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《禅与 Objective-C 编程艺术》读书拾遗]]></title>
      <url>/2016/07/01/%E3%80%8A%E7%A6%85%E4%B8%8E%20Objective-C%20%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%8B%BE%E9%81%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>纯粹拾遗性质的读书笔记，只记录知识体系尚模糊的内容<br>原文链接：<a href="https://github.com/oa414/objc-zen-book-cn#%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">《禅与 Objective-C 编程艺术》</a></p>
</blockquote>
<h3 id="1-条件语句"><a href="#1-条件语句" class="headerlink" title="1.条件语句"></a>1.条件语句</h3><ul>
<li>善用return, 将主流程从分支中脱离</li>
</ul>
<h3 id="2-命名"><a href="#2-命名" class="headerlink" title="2.命名"></a>2.命名</h3><ul>
<li>常量 static NSString * const ZOCCacheNotification(尽量避免使用宏，除非真的需要用到她)</li>
<li>with连接 取代and</li>
<li>字面量<ul>
<li>不可变集合尽量使用字面量赋值</li>
<li>可变集合避免[@[] mutableCopy]</li>
</ul>
</li>
</ul>
<h3 id="3-类"><a href="#3-类" class="headerlink" title="3.类"></a>3.类</h3><ul>
<li>类命名规范：ZOC(前缀)+Twitter(子类)+NetworkClient(父类)</li>
<li>推荐代码组织顺序：<ul>
<li>dealloc(MRC)</li>
<li>init<ul>
<li>designated initializer</li>
<li>secondary initializer</li>
</ul>
</li>
</ul>
</li>
<li>init的可失败性</li>
<li>提供自己的初始化函数的三个步骤<ul>
<li>定义你的designated initializer, 确保调用了直接超类designated initializer</li>
<li>重载直接超类的designated initializer。调用你的新的designated initializer</li>
<li>为新的designated initializer写文档</li>
</ul>
</li>
<li><p>类簇：</p>
<ul>
<li><p>简单示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@implementation ZOCKintsugiPhotoViewController</span><br><span class="line"></span><br><span class="line">- (id)initWithPhotos:(NSArray *)photos</span><br><span class="line">&#123;</span><br><span class="line">  		if ([self isMemberOfClass:ZOCKintsugiPhotoViewController.class]) &#123;</span><br><span class="line">      		self = nil;</span><br><span class="line"></span><br><span class="line">      		if ([UIDevice isPad]) &#123;</span><br><span class="line">          		self = [[ZOCKintsugiPhotoViewController_iPad alloc] initWithPhotos:photos];</span><br><span class="line">      		&#125;</span><br><span class="line">      		else &#123;</span><br><span class="line">          		self = [[ZOCKintsugiPhotoViewController_iPhone alloc] initWithPhotos:photos];</span><br><span class="line">      		&#125;</span><br><span class="line">      		return self;</span><br><span class="line">  		&#125;</span><br><span class="line">  		return [super initWithNibName:nil bundle:nil];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>单例模式应该运用于类及类的接口趋向于作为单例来使用的情况</p>
</li>
<li>属性：<ul>
<li>NSString *text</li>
<li>总应该使用getter和setter</li>
<li>永远不要在init方法里面用getter和setter(dealloc中同样需要注意)</li>
<li>使用点符号会让表达更加清晰并且帮助区分属性访问和方法调用</li>
<li>属性定义推荐格式：@property (nonatomic, readwrite, copy) NSString *name;</li>
<li>BOOL类型推荐格式：@property (assign, getter=isEditable) BOOL editable;</li>
<li>通过readonly的属性暴露类内部可变属性的值</li>
</ul>
</li>
<li><p>相等性示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)isEqual:(id)object &#123;</span><br><span class="line">   	if (self == object) &#123;</span><br><span class="line">     		return YES;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line">   	if (![object isKindOfClass:[ZOCPerson class]]) &#123;</span><br><span class="line">     		return NO;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line">   	return [self isEqualToPerson:(ZOCPerson *)object];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isEqualToPerson:(Person *)person &#123;</span><br><span class="line">   	if (!person) &#123;</span><br><span class="line">       	return NO;</span><br><span class="line">   	&#125;</span><br><span class="line"></span><br><span class="line">   	BOOL namesMatch = (!self.name &amp;&amp; !person.name) ||</span><br><span class="line">                      [self.name isEqualToString:person.name];</span><br><span class="line">   	BOOL birthdaysMatch = (!self.birthday &amp;&amp; !person.birthday) ||</span><br><span class="line">                          [self.birthday isEqualToDate:person.birthday];</span><br><span class="line"></span><br><span class="line"> 		return haveEqualNames &amp;&amp; haveEqualBirthdays;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-Category"><a href="#4-Category" class="headerlink" title="4.Category"></a>4.Category</h3><ul>
<li>category方法前加上自己的小写前缀以及下划线，避免重名的category方法的覆盖不确定性</li>
<li>利用category创建方法分组可以用来更好地进行不同功能的表示，并且把类打破在更多自我包含的组成部分里</li>
</ul>
<h3 id="5-Protocols"><a href="#5-Protocols" class="headerlink" title="5.Protocols"></a>5.Protocols</h3><ul>
<li>当实现一个protocol你总应该坚持里氏替换原则。这个原则是：你应该可以取代任意接口实现，而不用改变客户端或者相关实现</li>
</ul>
<h3 id="6-NSNotification"><a href="#6-NSNotification" class="headerlink" title="6.NSNotification"></a>6.NSNotification</h3><ul>
<li>通知名定义示例：extern NSString * const ZOCFooDidBecomeBarNotification;</li>
</ul>
<h3 id="7-代码组织"><a href="#7-代码组织" class="headerlink" title="7.代码组织"></a>7.代码组织</h3><ul>
<li>清晰地组织代码和规范地进行定义，是你对自己以及其他阅读代码的人的尊重</li>
<li>善用代码块({})</li>
<li><p>pragma示例：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">- (void)dealloc &#123; /* ... */ &#125;</span><br><span class="line">- (instancetype)init &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - View Lifecycle （View 的生命周期）</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123; /* ... */ &#125;</span><br><span class="line">- (void)viewWillAppear:(BOOL)animated &#123; /* ... */ &#125;</span><br><span class="line">- (void)didReceiveMemoryWarning &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Custom Accessors （自定义访问器）</span><br><span class="line"></span><br><span class="line">- (void)setCustomProperty:(id)value &#123; /* ... */ &#125;</span><br><span class="line">- (id)customProperty &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - IBActions  </span><br><span class="line"></span><br><span class="line">- (IBAction)submitData:(id)sender &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Public</span><br><span class="line"></span><br><span class="line">- (void)publicMethod &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Private</span><br><span class="line"></span><br><span class="line">- (void)zoc_privateMethod &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - UITableViewDataSource</span><br><span class="line"></span><br><span class="line">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath &#123; /* ... */ &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - ZOCSuperclass</span><br><span class="line"></span><br><span class="line">// ... 重载来自 ZOCSuperclass 的方法</span><br><span class="line"></span><br><span class="line">#pragma mark - NSObject</span><br><span class="line"></span><br><span class="line">- (NSString *)description &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>#pragma unused</p>
</li>
<li>#error #warning</li>
</ul>
<h3 id="8-对象间的通讯"><a href="#8-对象间的通讯" class="headerlink" title="8.对象间的通讯"></a>8.对象间的通讯</h3><ul>
<li>Block<ul>
<li>把需要提供的数据和错误信息整合到一个单独block中，比分别提供成功和失败的block要好<ul>
<li>若objects不为nil,则error必须为nil</li>
<li>若objects为nil,则error必须不为nil</li>
</ul>
</li>
<li>三种方案的讨论（循环引用相关）</li>
</ul>
</li>
<li>委托和数据源<ul>
<li>委托模式：事件发生的时候，委托者需要通知代理者</li>
<li>数据源模式：委托者需要从数据源对象拉去数据<ul>
<li>重载代理方法：instancesRespondToSelector</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-面向切面编程"><a href="#9-面向切面编程" class="headerlink" title="9.面向切面编程"></a>9.面向切面编程</h3><ul>
<li>aspects</li>
<li>应用举例 统计与日志：<ul>
<li>预先留一个统计的配置文件，记录需要统计的类、方法跟标签</li>
<li>初始化时统一埋点</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 读过的书 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[BI APP图形库选型]]></title>
      <url>/2016/06/28/BI%20APP%E5%9B%BE%E5%BD%A2%E5%BA%93%E9%80%89%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>BI中会涉及到不少图形可视化的应用，因为考虑到APP用户体验方面的需求（移动端版本主要面向集团领导使用），BI APP主要采用Native的图形可视化解决方案（当然Swift优先^_^）。</p>
<h3 id="涉及的图形类型"><a href="#涉及的图形类型" class="headerlink" title="涉及的图形类型"></a>涉及的图形类型</h3><p><img src="http://alithink.com/img/3bi/1.png" alt="BI show.png"></p>
<p>BI 中的各种图形图表都封装成了对应的卡片类型，根据接口的卡片类型描述动态生成对应的数据卡片进行展示。</p>
<h3 id="开源库选型"><a href="#开源库选型" class="headerlink" title="开源库选型"></a>开源库选型</h3><h4 id="1-Charts"><a href="#1-Charts" class="headerlink" title="1.Charts"></a>1.Charts</h4><blockquote>
<p>传送门：<a href="https://github.com/danielgindi/Charts" target="_blank" rel="noopener">https://github.com/danielgindi/Charts</a>  </p>
</blockquote>
<h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><p>主力图形库，常规图形的展示。</p>
<h5 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h5><ul>
<li>图形类型支持覆盖率较高，基本涵盖了所有常用的图形类型（组合图待完善中…）。</li>
<li>文档较完备，且iOS、Android平台接口一致，迁移成本低</li>
<li>图形库热度高，持续更新中。</li>
<li>较为优雅的动画支持、默认数据展示区域的控制、各种展示细节的灵活控制等。</li>
</ul>
<h4 id="2-ESArcProgressView"><a href="#2-ESArcProgressView" class="headerlink" title="2.ESArcProgressView"></a>2.ESArcProgressView</h4><blockquote>
<p>传送门：<a href="https://github.com/e-sites/ESArcProgressView" target="_blank" rel="noopener">https://github.com/e-sites/ESArcProgressView</a>  </p>
</blockquote>
<h5 id="应用场景：-1"><a href="#应用场景：-1" class="headerlink" title="应用场景："></a>应用场景：</h5><p><img src="http://alithink.com/img/3bi/2.png" alt="Circle.png"></p>
<p>多层环形图（暂时这么称呼她吧）<br>其实是仿照的Apple Watch的Activity，不过确实比纯粹的柱状图更具美感一些^_^。</p>
<h5 id="优势：-1"><a href="#优势：-1" class="headerlink" title="优势："></a>优势：</h5><ul>
<li>其它的类似轮子还真没找到。。。</li>
<li>支持简单动画，不过需要手动处理下timer的runloop mode的问题。</li>
</ul>
<h4 id="3-XCL-Charts"><a href="#3-XCL-Charts" class="headerlink" title="3.XCL-Charts"></a>3.XCL-Charts</h4><blockquote>
<p>传送门：<a href="https://github.com/xcltapestry/XCL-Charts" target="_blank" rel="noopener">https://github.com/xcltapestry/XCL-Charts</a> </p>
</blockquote>
<h5 id="应用场景：-2"><a href="#应用场景：-2" class="headerlink" title="应用场景："></a>应用场景：</h5><p><img src="http://alithink.com/img/3bi/3.png" alt="android circle.png"></p>
<p>Android的多层环形图解决方案，XCL也是一个较为完备的Android图形库，不过相较来说库的成熟度没有Charts高，一些细节功能也存在一定程度的缺失。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>这里主要就Charts的问题解决方案进行一些分享：</p>
<h4 id="1-展示图形中的最后几个元素"><a href="#1-展示图形中的最后几个元素" class="headerlink" title="1. 展示图形中的最后几个元素"></a>1. 展示图形中的最后几个元素</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示可视区域的元素个数</span></span><br><span class="line">chartView?.setVisibleXRangeMaximum(<span class="number">6</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * moveViewToX存在bug无法正确切换位置</span></span><br><span class="line"><span class="comment"> * 调用此方法的前提条件是需要预先提供一个确定的frame</span></span><br><span class="line"><span class="comment"> * xIndex为显示到的x元素的序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">chartView?.moveViewToAnimated(xIndex: <span class="type">CGFloat</span>(xVals.<span class="built_in">count</span> - <span class="number">1</span>), yValue: <span class="number">0</span>, axis: <span class="type">ChartYAxis</span>.<span class="type">AxisDependency</span>.<span class="type">Left</span>, duration: <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>这里setVisibleXRangeMaximum设置的数目在grouped柱状图配置的时候记得要乘以单位组内柱子的数目并包含组之间间隔的空间（往往间隔的空间也算做一个柱子）。</p>
<h4 id="2-完整显示x轴所有的元素标签"><a href="#2-完整显示x轴所有的元素标签" class="headerlink" title="2. 完整显示x轴所有的元素标签"></a>2. 完整显示x轴所有的元素标签</h4><p>Charts默认自动计算相邻x轴元素标签的距离, 控制x轴部分标签的隐藏以达到较好的现实效果。但实际需求中往往会要求展示所有x轴的元素标签，那么就可以通过以下配置禁用默认的计算。<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xAxis?.setLabelsToSkip(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="3-设置为可拖动的图形与tableview的滑动存在冲突"><a href="#3-设置为可拖动的图形与tableview的滑动存在冲突" class="headerlink" title="3. 设置为可拖动的图形与tableview的滑动存在冲突"></a>3. 设置为可拖动的图形与tableview的滑动存在冲突</h4><p>暂时的解决办法是在可拖动的图形顶部覆盖一层隐藏层，需要看全局数据的用户需要先进行一步点击才能进行图形的拖动操作。</p>
<h3 id="存在的不足"><a href="#存在的不足" class="headerlink" title="存在的不足"></a>存在的不足</h3><h4 id="1-组合图包含grouped柱状图时存在bug"><a href="#1-组合图包含grouped柱状图时存在bug" class="headerlink" title="1. 组合图包含grouped柱状图时存在bug"></a>1. 组合图包含grouped柱状图时存在bug</h4><p><img src="http://alithink.com/img/3bi/4.png" alt="problem.png"><br><img src="http://alithink.com/img/3bi/5.png" alt="solution.png"><br>尚未解决，暂时只能将grouped柱状图跟线形图分开成两个图进行展示。。。<br>或者研究下liuxuan30的这个PR<br><a href="https://github.com/danielgindi/Charts/issues/1159#issuecomment-228954675" target="_blank" rel="noopener">issue传送门</a></p>
<h4 id="2-堆积图缺失线性堆积图"><a href="#2-堆积图缺失线性堆积图" class="headerlink" title="2. 堆积图缺失线性堆积图"></a>2. 堆积图缺失线性堆积图</h4><p>目前只提供柱状堆积图的支持。</p>
<h4 id="3-ChartMarker堆积图功能缺失"><a href="#3-ChartMarker堆积图功能缺失" class="headerlink" title="3. ChartMarker堆积图功能缺失"></a>3. ChartMarker堆积图功能缺失</h4><p>堆积图的ChartMarker目前只能展示堆积后的总值，而不能展示分项的值。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>目前的这套方案可以满足基本的数据可视化需求，对于一些较为复杂灵活的图形展示需求，也可以封装一个单独的web类型的卡片，对于这部分需求采用web相关的图形可视化解决方案进行处理。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[工作与生活的平衡]]></title>
      <url>/2016/06/11/%E5%B7%A5%E4%BD%9C%E4%B8%8E%E7%94%9F%E6%B4%BB%E7%9A%84%E5%B9%B3%E8%A1%A1/</url>
      <content type="html"><![CDATA[<p>对应视频的传送门：</p>
<p><a href="http://open.163.com/movie/2011/2/D/L/M77U1DAGR_M77U1L2DL.html" target="_blank" rel="noopener">如何实现工作与生活的平衡</a></p>
<h3 id="平衡的四个关键"><a href="#平衡的四个关键" class="headerlink" title="平衡的四个关键"></a>平衡的四个关键</h3><h4 id="1-有些职业的选择与生活具有不可调和性"><a href="#1-有些职业的选择与生活具有不可调和性" class="headerlink" title="1.有些职业的选择与生活具有不可调和性"></a>1.有些职业的选择与生活具有不可调和性</h4><p>这种不可调和跟周五允许不穿工装、育儿假等生活福利没有多大联系。很多人一直从事着自己痛恨着的工作，目的只是为了买一些没有多大用处的东西，以此博得自己的邻居朋友的羡慕而已。  </p>
<blockquote>
<p>职业的选择很重要，找到一份自己热爱并且可以驾驭掌控的工作是解决平衡问题的一个关键。</p>
</blockquote>
<h4 id="2-做平衡问题的掌舵者"><a href="#2-做平衡问题的掌舵者" class="headerlink" title="2.做平衡问题的掌舵者"></a>2.做平衡问题的掌舵者</h4><p>政府跟公司是无法帮你解决这个问题的，只能靠自己，自己不主动，最终的结果就不尽如意。所有商业公司其实本质上都是榨取你的价值以及尽可能的逃避责任，因此我们要尽可能的设定并加固自己生活中的各种界限，当工作的范畴越界时，主动的去解决与平衡。</p>
<blockquote>
<p>主动权在自己手中，理性的划分工作与生活的边界，才能为平衡提供依据。</p>
</blockquote>
<h4 id="3-合理控制理想平衡的时间周期"><a href="#3-合理控制理想平衡的时间周期" class="headerlink" title="3.合理控制理想平衡的时间周期"></a>3.合理控制理想平衡的时间周期</h4><p>这里慨叹下演讲者的身体素质（一天四次。。。），每个人对于理想中一天的定义不尽相同，但往往会发现其实这些想做的事情二十四小时的时间容量是不够的。有些人往往会想着等退休之后再好好享受生活，等孩子大了之后就可以有时间好好享受生活，其实这样就走入了另一个极端。一天太短，退休又太长，肯定会有折中的办法。</p>
<blockquote>
<p>有了好的规划，就要尽快实施，不要拖延，也不要安排的过于紧凑，制定一个合理的规划周期对于平衡来说也很重要。</p>
</blockquote>
<h4 id="4-平衡不只是工作之余健健身"><a href="#4-平衡不只是工作之余健健身" class="headerlink" title="4.平衡不只是工作之余健健身"></a>4.平衡不只是工作之余健健身</h4><p>很多人上班族，往往下班后以健身的方式来维持健康以及缓解压力，这本身是没问题的，但是只是健身其实还不够。很多人会说，我连健身的时间都没有，再让我去做其它事情就更不可能了。这里演讲者讲述了他与自己儿子的某一天的生活经历，大致是他提前下班去接儿子放学，然后带他在街边做了一些简单的户外游乐，然后带儿子去咖啡店吃了一些东西，最后回家给儿子洗澡给他讲故事陪他睡觉，等他吻过儿子的额头准备要离开儿子的房间时，儿子对他说：“爸爸，这是我过得最棒的一天”。</p>
<blockquote>
<p>小事并非无关紧要，在处理平衡问题时并不需要大张旗鼓的颠覆式的行动，也许多注意一些细节，多一些关心体贴与陪伴就够了。</p>
</blockquote>
<p>最后讲述者呼吁大家都能正确的处理平衡问题，这样也许会改变目前社会上单纯以个人财产衡量成功的观念。成功应该有一个更具平衡行和思想性的定义，即一个美好的生活的实现。</p>
<blockquote>
<p>共勉，为“美好生活“而努力。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 鸡汤乱炖 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[cocoapods私有仓库封装过程中的思考]]></title>
      <url>/2016/06/04/cocoapods%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E5%B0%81%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<blockquote>
<p>背景：随着公司相关APP项目的开展，公用框架的创建与维护越发显得迫切起来。因为工作中经常接触使用cocoapods,也知道她其实可以搞定这件事，所以就首当其冲的选择了基于cocoapods的封装方案。</p>
</blockquote>
<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><ul>
<li>给工作中封装的组件一个沉淀的地方。</li>
<li>为新项目的开展提供高效的支撑。</li>
<li>框架代码单独维护，功能点升级更新快捷。</li>
<li>一定程度督促自己代码的组织与优化。</li>
</ul>
<h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>搭建的过程大致参考了这篇教程：<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="noopener">使用Cocoapods创建私有podspec</a><br>教程非常的细致，很赞的分享。其中有几个地方可能会有点疑惑：</p>
<h3 id="Podfile中specs引入方式"><a href="#Podfile中specs引入方式" class="headerlink" title="Podfile中specs引入方式"></a>Podfile中specs引入方式</h3><h4 id="1-path-gt-的引入方式"><a href="#1-path-gt-的引入方式" class="headerlink" title="1. :path =&gt;的引入方式"></a>1. :path =&gt;的引入方式</h4><ul>
<li>会添加到Development Pods中，并且复制整个私有库的文件组织结构（文件夹嵌套关系都会保留）,这种引入方式非常适合于私有库的开发阶段，因为这种方式引入的其实就是实际私有库的源文件，在demo项目中通过这种方式引入，充分测试私有库的相关功能会非常方便快捷。</li>
<li>对强迫症患者来说可能会觉得有点不完美的地方，就是当specs中包含subspecs的时候，用这种方式引入时，会出现一些多余的文件层次嵌套。。。感兴趣的患者们可以去试一下。。。</li>
</ul>
<h4 id="2-常规的引入方式"><a href="#2-常规的引入方式" class="headerlink" title="2. 常规的引入方式"></a>2. 常规的引入方式</h4><p>常规的引入方式这里就不多说了，它走的是另一个极端，会剔除库中的文件组织结构，而简单的划分了源文件与资源文件，如果包含subspecs，只保留子模块名一级的文件层次，模块内部的文件结构将不复存在，这里暂时没有找到合适的解决办法保留原有组织结构。</p>
<p><img src="http://alithink.com/img/2cocoapods/1.png" alt="1.png"></p>
<p>比如上图的结构，发布之后将改变为：</p>
<p><img src="http://alithink.com/img/2cocoapods/2.png" alt="2.png"></p>
<h3 id="子模块划分思路"><a href="#子模块划分思路" class="headerlink" title="子模块划分思路"></a>子模块划分思路</h3><p>先说结果，大致是按照这个思路进行划分的：  </p>
<h4 id="1-网络（剔除具体API调用部分）"><a href="#1-网络（剔除具体API调用部分）" class="headerlink" title="1. 网络（剔除具体API调用部分）"></a>1. 网络（剔除具体API调用部分）</h4><ul>
<li>添加样例</li>
<li>包含常用插件（network状态标识等）</li>
<li>缓存</li>
</ul>
<h4 id="2-模型映射"><a href="#2-模型映射" class="headerlink" title="2. 模型映射"></a>2. 模型映射</h4><ul>
<li>统一API调用规则</li>
<li>封装公共响应处理逻辑</li>
<li>对于错误类型的统一处理</li>
</ul>
<h4 id="3-Hybrid"><a href="#3-Hybrid" class="headerlink" title="3. Hybrid"></a>3. Hybrid</h4><ul>
<li>资源的预加载（js, css等）</li>
<li>native能力开放</li>
</ul>
<h4 id="4-UI"><a href="#4-UI" class="headerlink" title="4. UI"></a>4. UI</h4><ul>
<li>HUD</li>
<li>Tab</li>
<li>侧边栏</li>
<li>Nav常用操作</li>
<li>下拉上拉</li>
<li>Autolayout封装</li>
<li>datasource封装</li>
<li>常用动画转场</li>
</ul>
<h4 id="5-安全"><a href="#5-安全" class="headerlink" title="5. 安全"></a>5. 安全</h4><ul>
<li>加密解密</li>
</ul>
<h4 id="6-统计"><a href="#6-统计" class="headerlink" title="6. 统计"></a>6. 统计</h4><ul>
<li>swizzling添加打点入口</li>
<li>日志记录模块封装</li>
<li>bug收集分析</li>
</ul>
<h4 id="7-动态性"><a href="#7-动态性" class="headerlink" title="7. 动态性"></a>7. 动态性</h4><ul>
<li>热部署方案</li>
</ul>
<p>主要基于目前涉及项目主要关注的部分进行了一些拆解，每个模块直接可能存在依赖关系，这块cocoapods也贴心的帮忙搞定了，例如:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s.subspec <span class="string">'APIModule'</span> <span class="keyword">do</span> <span class="params">|ss|</span></span><br><span class="line">    ss.source_files = <span class="string">'Classes/APIModule/**/*.&#123;swift,h,m&#125;'</span></span><br><span class="line">    ss.dependency <span class="string">'Moya'</span>, <span class="string">'~&gt; 6.5.0'</span></span><br><span class="line">    ss.dependency <span class="string">'HanekeSwift'</span>, <span class="string">'~&gt; 0.10.1'</span></span><br><span class="line">    ss.dependency <span class="string">'NetworkActivityIndicator'</span>, <span class="string">'~&gt; 0.1.6'</span></span><br><span class="line">    ss.dependency <span class="string">'MonkeyKit/UtilModule'</span></span><br><span class="line">    ss.dependency <span class="string">'MonkeyKit/ModelMapperModule'</span></span><br><span class="line">    ss.dependency <span class="string">'MonkeyKit/SecurityModule'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>框架会根据将来的实际使用情况再进行优化调整，逐渐完善起来。  </p>
<h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>本轮主要是基于基础功能模块的拆分封装，其实对于APP群常用的业务模块也可以做相同的工作，比如登录验证模块或者逻辑的封装等。通过对于公用业务场景的思考，逐渐提炼出可以产品化的地方，然后塞入公用库，将大大提升相关APP群的开发效率与产品质量。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[理性的你和猴子还有惊慌怪兽]]></title>
      <url>/2016/05/24/%E7%90%86%E6%80%A7%E7%9A%84%E4%BD%A0%E5%92%8C%E7%8C%B4%E5%AD%90%E8%BF%98%E6%9C%89%E6%83%8A%E6%85%8C%E6%80%AA%E5%85%BD/</url>
      <content type="html"><![CDATA[<p>TED上面关于拖延症的两个视频很简短但确实分析的比较合理。  </p>
<h3 id="第一段讲述中主要点出了几个拖延期间的影响角色"><a href="#第一段讲述中主要点出了几个拖延期间的影响角色" class="headerlink" title="第一段讲述中主要点出了几个拖延期间的影响角色"></a>第一段讲述中主要点出了几个拖延期间的影响角色</h3><ol>
<li>理性的你：<br>初期愿景的发起者，确立的目标，并制定了简单的规划，促使目标完成的积极分子。</li>
<li>享乐的猴子：<br>用各种有意思的东西去吸引你，打断任务的执行，它出现的时候往往会感觉日子会过的很舒服，理性的你拿他没有办法，但它胆子小，最怕怪兽。</li>
<li>惊慌怪兽：<br>猴子的克星，只在有任务截止日期（Deadline）的任务最后一段时间出现，将猴子赶回树上，让理智的你重新掌握小船，奋力在截止日期前搞定这桩事情。</li>
</ol>
<p>从这里面可以看出来其实有惊慌怪兽的压制，往往猴子还是不敢太嚣张的，惊慌怪兽的出现时机也往往因人因任务量而异，但往往事情还是能够搞定的。<br>所以问题的关键就在于那些没有Deadline的任务！！！<br>那么问题解决的关键也就很清楚了，规划的时候要确立截止的时间，并最好让它不容易被轻易推翻，比如承诺给他人、公开发布自己的规划等等。 </p>
<h3 id="其实拖延也是有好处的"><a href="#其实拖延也是有好处的" class="headerlink" title="其实拖延也是有好处的"></a>其实拖延也是有好处的</h3><p>这是第二段讲述中主要阐述的东西<br>核心思想：立马开始并慢慢结束，让拖延的这段时间去发现重新认识目标任务本身，是很多创造者善于做的事情。<br>举了几个例子，比如贝多芬画蒙娜丽莎，画了好多年，中间研究了光学，反而促进了后期作品的创作。<br>还有就是以创业来说的话，其实不一定要做第一人，而要做创新者，因为基于已经有的事物的创新要容易的多，讲述着分享了一个调查，抢做第一人的失败率大概是48%，而创新改进的后起者的失败率则要低至8%。  </p>
<blockquote>
<p>博客写作也是拖延了好久了，今天开始一周至少一篇吧，周末就是Deadline ^_^ 共勉</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 鸡汤乱炖 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Swifter Tips阅读随想1]]></title>
      <url>/2016/05/10/Swifter%20Tips%E9%98%85%E8%AF%BB%E9%9A%8F%E6%83%B31/</url>
      <content type="html"><![CDATA[<p><img src="/img/1operator/1.png" alt=""></p>
<blockquote>
<p>这样可以很自然的想到<br>aaa ?? (a<em>b</em>c)<br>比<br>var default = a<em>b</em>c<br>aaa ?? default<br>性能上要优越，规避了一次计算，只有在真正需要的时候才会去计算默认值 </p>
</blockquote>
<p>在 Swift 中，其实 &amp;&amp; 和 || 这两个操作符里也用到了 @autoclosure。作为练习，不妨打开 Playground，试试看怎么实现这两个操作符<br><img src="/img/1operator/2.png" alt=""><br>按照这个思路，就可以轻松的定制操作符啦<br>比如这个&amp;&amp;的就这么简单<br>swift这个操作符只能接受bool类型<br>那么其实知道怎么实现的了就可以尝试给他扩展<br><img src="/img/1operator/3.png" alt=""><br>默认的是不支持的<br>这样这一块的知识点就通过一轮探索就都搞通了，还能加强记忆</p>
]]></content>
      
        <categories>
            
            <category> Swift </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[《三体》浅读梳理]]></title>
      <url>/2015/06/06/%E3%80%8A%E4%B8%89%E4%BD%93%E3%80%8B%E6%B5%85%E8%AF%BB%E6%A2%B3%E7%90%86/</url>
      <content type="html"><![CDATA[<blockquote>
<p>弱小和无知不是生存的障碍，傲慢才是</p>
</blockquote>
<hr>
<h3 id="三体中的经典宇宙观点："><a href="#三体中的经典宇宙观点：" class="headerlink" title="三体中的经典宇宙观点："></a>三体中的经典宇宙观点：</h3><ol>
<li>同纬度的黑暗森林法则</li>
<li>零光速（光幕 零维）黑洞的形成是因为曲率光速航迹所致</li>
<li>宇宙的低维化进程 塌缩为奇点 重归高维</li>
<li>物理法则不是恒定不变的，物理法则是可以当做武器的，常被利用的有光速与维度（二向箔）</li>
<li>可以向大宇宙索取质量形成小宇宙</li>
<li>各个宇宙其实是超模上的一个个泡</li>
</ol>
<h3 id="三体中感兴趣科技："><a href="#三体中感兴趣科技：" class="headerlink" title="三体中感兴趣科技："></a>三体中感兴趣科技：</h3><ol>
<li>冬眠技术，即使未来可能是毁灭</li>
<li>高度信息化，随处调取的全息信息窗体</li>
<li>光速飞船</li>
<li>与宇宙的无隔绝接触 人造地表大气压层</li>
<li>宇宙人造生态系统</li>
<li>智子</li>
<li>太空电梯</li>
<li>控制睡眠时间</li>
<li>高维碎片感受</li>
</ol>
<h3 id="印象深刻的角色："><a href="#印象深刻的角色：" class="headerlink" title="印象深刻的角色："></a>印象深刻的角色：</h3><ol>
<li>大史</li>
<li>逻辑</li>
<li>云天明</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 读过的书 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[IPA 企业证书重新签名]]></title>
      <url>/2014/07/21/IPA%20%E4%BC%81%E4%B8%9A%E8%AF%81%E4%B9%A6%E9%87%8D%E6%96%B0%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>Step1 : 解压IPA</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip MYAPP.ipa</span><br></pre></td></tr></table></figure>
<ul>
<li>Step2: 删除旧的代码签名</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf Payload/ MYAPP.app/_CodeSignature</span><br></pre></td></tr></table></figure>
<ul>
<li>Step3: 更换证书</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp MyEnterprise.mobileprovision Payload/ MYAPP.app/embedded.mobileprovision</span><br></pre></td></tr></table></figure>
<ul>
<li>Step4: 重签名</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/codesign -f -s <span class="string">"iPhone Distribution: YourCompanyName"</span> --resource-rules Payload/ MYAPP.app/ResourceRules.plist Payload/ MYAPP.app</span><br></pre></td></tr></table></figure>
<ul>
<li>Step 5: 重新打包，生成新的ipa</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r New_ MYAPP.ipa Payload</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明：<br>MYAPP.ipa: 要重签名的ipa</p>
<p>MyEnterprise.mobileprovision:要用来签名的provision文件</p>
<p>YourCompanyName:指该签名对应的证书的名字，这个可以在钥匙串中找到</p>
</blockquote>
<h4 id="在step4时有可能会报错：object-file-format-unrecognized-invalid-or-unsuitable-解决方法："><a href="#在step4时有可能会报错：object-file-format-unrecognized-invalid-or-unsuitable-解决方法：" class="headerlink" title="在step4时有可能会报错：object file format unrecognized, invalid, or unsuitable 解决方法："></a>在step4时有可能会报错：object file format unrecognized, invalid, or unsuitable 解决方法：</h4><ul>
<li>1）首先查看/usr/bin目录下是否存在codesign_allocate程序，如果存在，执行改名操作。 如果不存在，直接执行第二步</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /usr/bin/codesign_allocate /usr/bin/codesign_allocate_old</span><br></pre></td></tr></table></figure>
<ul>
<li>2）将xcode目录下的codesign_allocate做一个软链接</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/codesign_allocate /usr/bin</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocos2D简单iPhone游戏【入门教程】]]></title>
      <url>/2014/07/17/cocos2d%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>我想没有什么比更新入门教程更适合用来庆祝具有标志性的Cocos2D 3.0的诞生了。</p>
<p>Cocos2D 3.0是iOS平台一款2D游戏开发框架的最新版本。App Store上数以千计的游戏不乏一些排行前十的游戏都是用它来进行开发的。</p>
<p>它对sprite有很好的支持,包含一个完美的Chipmunk2D physics类库，支持OpenAL声音类库，诸多有趣的效果，让你可以用它做更多事情。</p>
<p>通过本Cocos2D 3.0的入门教程，你将会学习从头到尾的编写一个简单有趣的iPhone 2D游戏。如果你之前已经学习过了Cocos2D 2.0的教程，那么将会将会对本教程感觉比较熟悉，但是你仍然可以通过本教程学习利用物理引擎实现一些好玩的东西。</p>
<p>你可以选择跟随本教程进行学习，当然你也可以直接在本文的末尾下载例子源程序进行学习。那么接下来我们跟随忍者一起热血一下吧。</p>
<h3 id="Cocos2D-vs-Sprite-Kit"><a href="#Cocos2D-vs-Sprite-Kit" class="headerlink" title="Cocos2D vs Sprite Kit"></a>Cocos2D vs Sprite Kit</h3><p>在你开始学习之前，你也许在想：“嘿，我已经有苹果的Sprite Kit了，还需要Cocos2D吗？我真的需要尝试一些其它的东东吗？”</p>
<p>好吧，跟其它任何游戏框架一样，Cocos2D也有它的一些优点和缺点：</p>
<h4 id="Cocos2D-优点"><a href="#Cocos2D-优点" class="headerlink" title="Cocos2D 优点"></a>Cocos2D 优点</h4><ul>
<li><p>优点一: 你不再被限制在iOS平台了，想要把你的游戏发布到Android平台上吗？那么用Cocos2D可以帮你写一遍代码就可以跨平台发布了！</p>
</li>
<li><p>优点二: 你可以写代码自定义一些OpenGL效果了。</p>
</li>
<li>优点三: 它是开源的，也就是说如果你想要改造写什么或者研究一下它内部是如何运转的，你只需要深入研究一下它的源码就可以了。.</li>
</ul>
<h4 id="Cocos2D-缺点"><a href="#Cocos2D-缺点" class="headerlink" title="Cocos2D 缺点"></a>Cocos2D 缺点</h4><ul>
<li><p>缺点一: 它不是内建在Xcode里面的，所以你要使用它就必须要下载安装它。</p>
</li>
<li><p>缺点二: 它目前还没有自带的纹理与粒子编辑器（但是已经有很多很棒的第三方编辑器了）。</p>
</li>
</ul>
<p>Cocos2D拥有一个完整的社区，社区里有很多相关的教程、书籍和例子程序。Cocos2D的缔造者是一波旨在令游戏开发变得简单的游戏开发者，他们希望开发者利用它能够简单地创造很多伟大的游戏。</p>
<h3 id="安装-Cocos2D"><a href="#安装-Cocos2D" class="headerlink" title="安装 Cocos2D"></a>安装 Cocos2D</h3><p>The new Cocos2D 3.0 Installer</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game1.png" alt=""></p>
<p>Cocos2D 3.0 使用了一个全新的安装程序，安装起来没有比这更简单的了！</p>
<p>只需要 下载最新的Cocos2D 安装器 (3.0版本以上), 打开DMG文件然后双击安装器。随后安装器会自动帮你配置好Xcode的Cocos2D模板并且部署好Cocos2D的Xcode文档。</p>
<p>当安装开始的时候，你将会看到一大堆信息，待安装完成之后会自动打开Cocos2D的欢迎页面。恭喜你，你已经做好了使用Cocos2D的准备工作了！</p>
<h3 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h3><p>让我们使用上一步安装的Cocos2D模板搭建一个简单的Hello World游戏作为开始吧。</p>
<p>打开Xcode，选择File\New Project, 然后选择iOS\cocos2d v3.x\cocos2d iOS 模板，点击Next:</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game2.png" alt=""></p>
<p>Product Name 输入Cocos2DSimpleGame, 设备选择iPhone 然后点击Next:</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game3.png" alt=""></p>
<p>选择一个位置保存你的工程，然后点击Create。然后直接点击play按钮编译运行一下项目。你会看到下面的东东:</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game4.png" alt=""></p>
<p>点击 Simple Sprite 按钮切换到另一个测试场景,接下来我们将一起针对改场景进行改造:</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game5.png" alt=""></p>
<p>Cocos2D引入了场景scenes的概念，你可以把它想成是游戏的多个屏幕。HelloWorld游戏的第一个场景就是它的菜单场景IntroScene, 第二个场景就是转动着Cocos2D logo标志的HelloWorldScene. 让我们仔细研究下这个场景。</p>
<h3 id="忍者驾到"><a href="#忍者驾到" class="headerlink" title="忍者驾到!"></a>忍者驾到!</h3><p>在忍者做它漂亮的出场秀之前，你首先需要用到一些图片素材…</p>
<ul>
<li><p>第一步：First step, 下载本工程的资源包。解压后拖动ResourcePack到项目的工程目录中。一定要勾选上 “Copy items into destination group’s folder (if needed)”选项并且勾选上Cocos2DSimpleGame目标target。</p>
</li>
<li><p>第二步：打开HelloWorldScene.m。记住，这段代码是用来构建那个旋转着Cocos2D logo的场景的，这个场景可以作为游戏制作很好的起点。修改之前先看一下模板代码：</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@implementation HelloWorldScene &#123;  </span><br><span class="line">    <span class="comment">// 1  </span></span><br><span class="line">    CCSprite *_sprite;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (id)init &#123;  </span><br><span class="line">    <span class="comment">// 2  </span></span><br><span class="line">    self = [super init];  </span><br><span class="line">    <span class="keyword">if</span> (!self) <span class="keyword">return</span>(nil); </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 3  </span></span><br><span class="line">    self.userInteractionEnabled = YES;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4  </span></span><br><span class="line">    CCNodeColor *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:<span class="number">0.2f</span> green:<span class="number">0.2f</span> blue:<span class="number">0.2f</span> alpha:<span class="number">1.0f</span>]];  </span><br><span class="line">    [self addChild:background];  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5  </span></span><br><span class="line">    _sprite = [CCSprite spriteWithImageNamed:@<span class="string">"Icon-72.png"</span>];  </span><br><span class="line">    _sprite.position  = ccp(self.contentSize.width/<span class="number">2</span>,self.contentSize.height/<span class="number">2</span>);  </span><br><span class="line">    [self addChild:_sprite];  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 6  </span></span><br><span class="line">    CCActionRotateBy* actionSpin = [CCActionRotateBy actionWithDuration:<span class="number">1.5f</span> angle:<span class="number">360</span>];  </span><br><span class="line">    [_sprite runAction:[CCActionRepeatForever actionWithAction:actionSpin]];  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 7  </span></span><br><span class="line">    CCButton *backButton = [CCButton buttonWithTitle:@<span class="string">"[ Menu ]"</span> fontName:@<span class="string">"Verdana-Bold"</span> fontSize:<span class="number">18.0f</span>];  </span><br><span class="line">    backButton.positionType = CCPositionTypeNormalized;  </span><br><span class="line">    backButton.position = ccp(<span class="number">0.85f</span>, <span class="number">0.95f</span>); <span class="comment">// Top Right of screen  </span></span><br><span class="line">    [backButton setTarget:self selector:@selector(onBackClicked:)];  </span><br><span class="line">    [self addChild:backButton];  </span><br><span class="line">    <span class="keyword">return</span> self;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们一起逐行过一下：</p>
<p>为了接下来更方便地操作这个正在旋转的Cocos2D logo图标，我们为它声明一个私有实例。</p>
<p>初始化 HelloWorld 场景.</p>
<p>配置这个场景让它可以响应Cocos2D 的点击事件。在之后你会看到这这样配置使得 touchBegan:withEvent: 方法将要被调用到。</p>
<p>创建一个 CCNodeColor, 用它来展示一种颜色（本教程中用它展示深灰色）。当这个node创建之后，你需要调用 addChild: 把它加到当前场景之后才能看到它。现在你的场景拥有一个背景色了!</p>
<p>用 spriteWithImageNamed: 这个方法创建一个 CCSprite 并为它加载一个图片资源。通过使用这个屏幕的坐标，这个sprite的位置被放置在了屏幕的中央。再调用一下 addChild: 方法，把它也添加到场景中。</p>
<p>创建一个 CCActionRotateBy action，我们将用它来给这个sprite做360度旋转，配置 CCActionRepeatForever 参数让这个旋转动作无限循环下去。然后调用 runAction 方法让sprite接收这个action。在接下来的讨论中会发现Actions 是Cocos2D的一项非常强大的特性。</p>
<p>创建一个 CCButton 用以点击返回 IntroScene 场景, 你可以用这个操作作为重新初始化当前场景的一种简单方法。</p>
<p>很棒! 首先呢，让我们把旋转着的Cocos2D logo图标替换成忍者的。</p>
<p>想想该怎么做呢? 给你一些提示:</p>
<p>看一看你刚刚添加到项目中的 ResourcePack ,从里面找一找忍者的图片。</p>
<p>你只需要改动一行代码就可以了!</p>
<p>尝试尽量自己搞定它，但是如果你实在卡在这里了，那么方法就在下面：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5  </span></span><br><span class="line">_sprite = [CCSprite spriteWithImageNamed:@<span class="string">"player.png"</span>];</span><br></pre></td></tr></table></figure>
<p>这很简单， _sprite 是一个很明显的名字但是当你开始使用_sprite1, _sprite2 的时候它会显得有一点混乱，所以我们把 _sprite 改成 _player。在 @implementation 中找到第一项：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@implementation HelloWorldScene &#123;  </span><br><span class="line">    <span class="comment">// 1  </span></span><br><span class="line">    CCSprite *_sprite;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后把它改成:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@implementation HelloWorldScene &#123;  </span><br><span class="line">    <span class="comment">// 1  </span></span><br><span class="line">    CCSprite *_player;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>很快你就会发现Xcode给你标志出5个错误并且帮你把这错误的几行用红色高亮了。不用担心，这是因为你把 _sprite 改名成了 _player，导致 _sprite 失效的原因。所以继续把所有的 _sprite 引用都改成 _player. 就OK了。</p>
<p>编译运行项目，让我们看一下不需要打怪的忍者的生活状态。</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game6.png" alt=""></p>
<p>现在旋转着的Cocos2D logo图片已经被替换成忍者的了。但愿忍者不会感觉到晕。。。</p>
<p>然而，忍者这辈子就是被训练来战斗的，所以接下来你想要搞一些怪物让忍者挑战一下!</p>
<h3 id="疯狂的怪物出现了"><a href="#疯狂的怪物出现了" class="headerlink" title="疯狂的怪物出现了"></a>疯狂的怪物出现了</h3><p>接下来你想要添加一些怪物到你的场景中。一个不会动的怪物自然不会对一个训练有素的忍者造成任何威胁,所以为了变得更有趣一些，你将添加一些会动的怪物。你将在屏幕的右外延创建一些怪物并且给它们添加 CCAction , 命令它们从屏幕右边向屏幕左边移动。</p>
<p>在 HelloWorldScene.m 中添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addMonster:(CCTime)dt &#123;  </span><br><span class="line">    CCSprite *monster = [CCSprite spriteWithImageNamed:@<span class="string">"monster.png"</span>];  </span><br><span class="line">    <span class="comment">// 1  </span></span><br><span class="line">    <span class="keyword">int</span> minY = monster.contentSize.height / <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">int</span> maxY = self.contentSize.height - monster.contentSize.height / <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">int</span> rangeY = maxY - minY;  </span><br><span class="line">    <span class="keyword">int</span> randomY = (arc4random() % rangeY) + minY;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2  </span></span><br><span class="line">    monster.position = CGPointMake(self.contentSize.width + monster.contentSize.width/<span class="number">2</span>, randomY);  </span><br><span class="line">    [self addChild:monster];  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 3  </span></span><br><span class="line">    <span class="keyword">int</span> minDuration = <span class="number">2.0</span>;  </span><br><span class="line">    <span class="keyword">int</span> maxDuration = <span class="number">4.0</span>;  </span><br><span class="line">    <span class="keyword">int</span> rangeDuration = maxDuration - minDuration;  </span><br><span class="line">    <span class="keyword">int</span> randomDuration = (arc4random() % rangeDuration) + minDuration;  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 4  </span></span><br><span class="line">    CCAction *actionMove = [CCActionMoveTo actionWithDuration:randomDuration position:CGPointMake(-monster.contentSize.width/<span class="number">2</span>, randomY)];  </span><br><span class="line">    CCAction *actionRemove = [CCActionRemove action];  </span><br><span class="line">    [monster runAction:[CCActionSequence actionWithArray:@[actionMove,actionRemove]]];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们一起逐行过一下：</p>
<p>为怪物的诞生位置定一个纵向范围。当你放置一个sprite的时候，默认的定位到的是sprite的中心坐标。所以这里为了不至于让怪物断掉，你在计算的时候需要用屏幕的高度减掉怪物的高度。</p>
<p>用屏幕的宽度加上怪物的宽度确保把怪物恰好定位到屏幕的右外延，不让怪物露出来。</p>
<p>现在你想要决定怪物横穿屏幕的用时，让我们定个随机时间吧，让怪物的移动更加难以预测。</p>
<p>你将使用Cocos2D的 CCActionMoveTo: action 来快速移动怪物从起点（屏幕右外延）到目的地（屏幕左外延）。</p>
<p>你已经看到旋转的action了，然而Cocos2D其实提供了很多非常方便的内置actions，包括移动的、旋转的、消失的、动画的等等。这里我们对怪物使用三种action:</p>
<ul>
<li><p>CCActionMoveTo: 这个action被用作控制怪物的移动轨迹，在本教程中用于控制它从屏幕右侧移动到左侧。这个action的duration用于控制怪物执行动作所需的时间。Duration设置的越短，怪物移动的速度将越快。在这里你把duration设置成2秒到4秒之间的随机秒数。</p>
</li>
<li><p>CCActionRemove: 将node从它的parent移除的好方法，可以有效地将node从场景中删除。当看不到怪物的时候（怪物移动到屏幕做外延的时候）你可以使用这个action把怪物从这个场景中移除。这步是非常重要的，如果不这么做你会发现有成千上万的怪物试图穿越你的iPhone，它们会耗光你设备的全部资源。</p>
</li>
<li><p>CCActionSequence: 这个序列action可以让你把一组action串在一起按序列执行，同一时间只有一个action在执行。通过这个方法你可以设置 CCActionMoveTo action 首先执行，一旦这个action执行完成了接着执行 CCActionRemove action。你可以用这个强大的action创建一组复杂的动画序列。<br>好的，现在你有了一个向场景添加怪物的方法了。然而对于一个经验丰富的忍者来说，一个怪物不足为惧，让我们写一个定时产生怪物的方法吧。</p>
</li>
</ul>
<p>Cocos2D 提供了一个定时器帮助你每X.X秒调用一下回调方法，所以你可以利用它来完成每X秒生成怪物的方法。</p>
<p>打开 HelloWorldScene.m 然后在 onEnter 方法的 [super onEnter]; 之后添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self schedule:@selector(addMonster:) interval:<span class="number">1.5</span>];</span><br></pre></td></tr></table></figure>
<p>这样会创建一个每1.5秒调用 addMonster: 方法的Cocos2D 定时器。</p>
<p>记住当你创建 addMonster 方法的时候, 会有一个额外的 dt 参数。 这代表着时间增量，也表示当前帧与之前的时间差异。定时器要求每个方法声明的时候都加上这个参数，虽然在这个教程里面你将不会使用到它。</p>
<p>在你看到这些怪物之前，你需要做点修改。让我们带领大家从阴暗中走出来一些。为啥不把背景色从深灰改成浅灰色呢？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2  </span></span><br><span class="line">CCNodeColor *background = [CCNodeColor nodeWithColor:[CCColor colorWithRed:<span class="number">0.6f</span> green:<span class="number">0.6f</span> blue:<span class="number">0.6f</span> alpha:<span class="number">1.0f</span>]];</span><br></pre></td></tr></table></figure>
<p>目前你忍者的头一定还在旋转着，你能让它停止转动，并且把他移动到偏左一些这样便于让它做好准备面对前面的突击？</p>
<p>禁用头的旋转 CCActionRotateBy action。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6  </span></span><br><span class="line"><span class="comment">//CCActionRotateBy* actionSpin = [CCActionRotateBy actionWithDuration:1.5f angle:360];  </span></span><br><span class="line"><span class="comment">//[_player runAction:[CCActionRepeatForever actionWithAction:actionSpin]];</span></span><br></pre></td></tr></table></figure></p>
<p>改变忍者的位置。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_player.position  = ccp(self.contentSize.width/<span class="number">8</span>,self.contentSize.height/<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p>
<p>你也许会疑惑为什么要把宽度除以8（屏幕的1/8）。这是因为如果图方便直接写死坐标，那么遇到不同分辨率设备的时候就需要每种设备设置不同的坐标。</p>
<p>如果你感兴趣想要多了解一些，看一下 CCButton 的位置配置方式，注意它使用了一种不同的 positionType ，它使用了标准化的解决方案0..1，0..1针对所有设备。</p>
<p>编译运行，你应该可以看到很多怪物穿越屏幕！</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game7.png" alt=""></p>
<h3 id="波动拳（Hadouken）"><a href="#波动拳（Hadouken）" class="headerlink" title="波动拳（Hadouken）"></a>波动拳（Hadouken）</h3><p>不幸的是你的忍者还没有足够强大到可以发射波动拳，所以你将需要依靠你专业的投掷技巧来抵御邪恶的（或者可能只是误解）怪物。</p>
<p>给自己那个手里剑然后添加个投掷的action</p>
<p>你将再次使用 CCActionMoveTo: action, 然而这次不会像是从 _player.position 移动到点击位置那般简单。 你想要将你的投射物沿着点击的方向穿越整个屏幕。因此你需要用到只是一点数学知识。</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game8.png" alt=""></p>
<p>你可以从起点到点击点的x轴、y轴的位移变化中得到一个小的三角形。你只需求得一个拥有相同角度并且终止点在屏幕边沿的大三角形就OK了。</p>
<p>为了完成这个运算，如果你有一些向量数学的基础就轻松多了（比如知道增加和减少向量的方法）。 Cocos2D 包含了一系列方便的向量操作函数，如 ccpAdd 和 ccpSub 。</p>
<p>如果你对接下来的计算有任何疑问，请速查 vector math explanation。关于这个方面我个人建议看一下非常好的 Khan Academy 教学视频。</p>
<p>响应点击了!</p>
<p>正如你所看到的HelloWorldScene 模板已经在 init 方法中允许接收touch相应了。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3  </span></span><br><span class="line">self.userInteractionEnabled = YES;</span><br></pre></td></tr></table></figure></p>
<p>为了处理点击相应你通常需要创建 touchBegan: 方法，不过默认模板已经很体贴地给你带来了一个简单的 touchBegan 方法实例。</p>
<p>打开 HelloWorldScene.m 并且用下面的代码替换现有的 touchBegan: 方法内容:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)touchBegan:(UITouch *)touch withEvent:(UIEvent *)event &#123;  </span><br><span class="line">    <span class="comment">// 1  </span></span><br><span class="line">    CGPoint touchLocation = [touch locationInNode:self];  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2  </span></span><br><span class="line">    CGPoint offset    = ccpSub(touchLocation, _player.position);  </span><br><span class="line">    <span class="keyword">float</span>   ratio     = offset.y/offset.x;  </span><br><span class="line">    <span class="keyword">int</span>     targetX   = _player.contentSize.width/<span class="number">2</span> + self.contentSize.width;  </span><br><span class="line">    <span class="keyword">int</span>     targetY   = (targetX*ratio) + _player.position.y;  </span><br><span class="line">    CGPoint targetPosition = ccp(targetX,targetY);  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 3  </span></span><br><span class="line">    CCSprite *projectile = [CCSprite spriteWithImageNamed:@<span class="string">"projectile.png"</span>];  </span><br><span class="line">    projectile.position = _player.position;  </span><br><span class="line">    [self addChild:projectile ];  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 4  </span></span><br><span class="line">    CCActionMoveTo *actionMove   = [CCActionMoveTo actionWithDuration:<span class="number">1.5f</span> position:targetPosition];  </span><br><span class="line">    CCActionRemove *actionRemove = [CCActionRemove action];  </span><br><span class="line">    [projectile runAction:[CCActionSequence actionWithArray:@[actionMove,actionRemove]]];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们一起逐行过一下：</p>
<p>你需要将屏幕点击转化为场景的坐标系表示。Cocos2D的UITouch分类里有一个很方便的方法 locationInNode: 可以做的这一点。</p>
<p>所以正如你所见，你得到了一个由起点到点击点的x、y轴位移组成的小三角形。你只需求得一个拥有相同角度并且终止点在屏幕边沿的大三角形就OK了。</p>
<p>创建投掷物的sprite并且设置它的起始位置与忍者一样。你可以简单的使用 _player ，这就是你之前设置这个私有实例变量的原因。</p>
<p>你现在应该对CCActionMoveTo 这个方法更加熟悉了。你有了之前计算的目标点和投掷物投掷完成的时间duration（duration越小，投掷物就会越快投过去）。</p>
<p>编译运行，尽情开火吧!</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game9.png" alt=""></p>
<p>Arggghhh 这些怪物太强大了，我们为什么不把他们给干掉呢！</p>
<h3 id="碰撞检测和物理"><a href="#碰撞检测和物理" class="headerlink" title="碰撞检测和物理"></a>碰撞检测和物理</h3><p>那么现在你有了一个忍者、很多怪物和很多穿越屏幕的手里剑。看起来不错了，不过如果带一点摩擦的话就更好玩了，为了达成这一目的你需要在投掷物跟怪物之间做碰撞检测。</p>
<p>Cocos2D 3.0的一个伟大的特性就是一套完整的物理引擎，有了它完成这个任务就小菜一碟了。物理引擎的伟大在于模拟了真实的移动，而且它对于处理碰撞检测也非常有用。 </p>
<p>你现在将要使用Cocos2D的物理引擎去判定怪物和抛掷物的碰撞。完成它需要四个步骤：</p>
<ul>
<li><p>搭建物理世界. 物理世界是针对物理学计算的模拟空间。你将为当前场景搭建一个并且修改一些属性例如重力。物理世界搭建完成之后，你需要修改现有的游戏对象，把他们添加到物理世界中进而他们都将成为物理模拟的一部分。</p>
</li>
<li><p>为每个sprite创建物理主体. 使用Cocos2D你可以为每一个sprite关联物理主体用于碰撞检测并且可以设置某些属性。记住物理主体不用必须跟sprite的形状完全一样。通常它是一些简单的矩形或者圆形，甚至是一个像素清晰的轮廓。这样已经可以很好的满足大部分游戏并且可以提供更好的物理效果处理效率。<br>为每一种sprite设置CollisionType. Cocos2D物理引擎的一个方便特性是你不需要用数字定义你的碰撞类型了。你可以配置一个简单易懂的字符串定义你的碰撞类型。</p>
</li>
<li><p>配置碰撞相应代理. 默认当连个物理主体碰在一起他们会被物理模拟器处理，然而你想要在投掷物碰到怪物的时候做一些事情例如干掉怪物。因此你需要添加一个碰撞响应代理去处理投掷物与怪物之间的碰撞类型。</p>
</li>
</ul>
<p>让我们开始吧。首先，你现在需要为你的物理世界添加另外一个私有实例变量。</p>
<p>打开 HelloWorldScene.m 然后在 @implementation HelloWorldScene 声明里面 CCSprite 的初始化之后添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CCPhysicsNode *_physicsWorld;</span><br></pre></td></tr></table></figure>
<p>现在你需要配置并添加这个物理模拟器到你的场景中，在 init 方法的 CCNodeColor 之后添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_physicsWorld = [CCPhysicsNode node];  </span><br><span class="line">_physicsWorld.gravity = ccp(<span class="number">0</span>,<span class="number">0</span>);  </span><br><span class="line">_physicsWorld.debugDraw = YES;  </span><br><span class="line">_physicsWorld.collisionDelegate = self;  </span><br><span class="line">[self addChild:_physicsWorld];</span><br></pre></td></tr></table></figure>
<p>因为你要使用物理模拟器主要为了做碰撞检测，在这里把重力（Gravity）设置成 (0,0) 。Cocos2D 有很多方便的调试函数，debugDraw 标志对于具体数字化物理世界是非常有用的。你可以看到所有被添加到模拟器上的物理主体。你同时需要设置 collisionDelegate 到 self, 这样使得你可以添加碰撞处理到场景中而且物理模拟器知道去 HelloWorldScene 中匹配碰撞的响应处理。</p>
<p>你会注意到Xcode在 collisionDelegate 这行抛出了一个警告; 这很容易解决。打开 HelloWorldScene.h 然后标志这个 interface 实现CCPhysicsCollisionDelegate。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@interface HelloWorldScene : CCScene &lt;CCPhysicsCollisionDelegate&gt;</span><br></pre></td></tr></table></figure>
<p>现在你需要为忍者配置物理主体并且将它添加到 _physicsWorld 而不是直接添加到场景中。</p>
<p>退回到 HelloWorldScene.m, 在 init 方法中找到如下代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self addChild:_player];</span><br></pre></td></tr></table></figure>
<p>将它替换成如下代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_player.physicsBody = [CCPhysicsBody bodyWithRect:(CGRect)&#123;CGPointZero, 	_player.contentSize&#125; cornerRadius:<span class="number">0</span>]; <span class="comment">// 1  </span></span><br><span class="line">_player.physicsBody.collisionGroup = @<span class="string">"playerGroup"</span>; <span class="comment">// 2  </span></span><br><span class="line">[_physicsWorld addChild:_player];</span><br></pre></td></tr></table></figure>
<p>快速看一下这个代码片段:</p>
<p>创建一个物理主体，在这个例子中使用忍者的 contentSize 来创建一个环绕在忍者四周的矩形主体。<br>设置物理主体的 collisionGroup, 默认所有的主体都会碰撞。如果你将一些物理主体设置成相同的 collisionGroup 他们之间就不会再互相碰撞了, 这点当你想要创建一个由多个身体组成的角色，而且不想让他的每个身体互相碰撞的时候非常有用,例如一个拿着武器的角色。你将用这个保证投掷物不会撞到角色。</p>
<p>你已经配置好物理模拟器、为角色创建了物理主体并且把它添加到了物理模拟器中。现在想想你能不能自己为怪物也添加到物理模拟器中。</p>
<p>查找 addMonster: 方法并且定位到如下代码:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self addChild:monster];</span><br></pre></td></tr></table></figure>
<p>将它替换成:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">monster.physicsBody = [CCPhysicsBody bodyWithRect:(CGRect)&#123;CGPointZero, 	monster.contentSize&#125; cornerRadius:<span class="number">0</span>];  </span><br><span class="line">monster.physicsBody.collisionGroup = @<span class="string">"monsterGroup"</span>;  </span><br><span class="line">monster.physicsBody.collisionType  = @<span class="string">"monsterCollision"</span>;  </span><br><span class="line">[_physicsWorld addChild:monster];</span><br></pre></td></tr></table></figure></p>
<p>这几乎是跟为 _player 添加物理主体的方式的一致的，但是我为了介绍一个新属性使了点小聪明。这次你设置了 collisionType 属性, 这将被用来为’monsterCollision’和’projectileCollsion’的 collisionType 搭建一个物理模拟器碰撞代理方法。</p>
<p>你快搞定它了！这次试着把抛掷物添加到模拟器中。</p>
<p>我会给你一个提示：搞定它需要使用到 collisionType 和 collisionGroup 属性。</p>
<p>找到 touchBegan:withEvent 方法然后定位到如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self addChild:projectile];</span><br></pre></td></tr></table></figure>
<p>将它替换成:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">projectile.physicsBody = [CCPhysicsBody bodyWithRect:(CGRect)&#123;CGPointZero, 	projectile.contentSize&#125; cornerRadius:<span class="number">0</span>];  </span><br><span class="line">projectile.physicsBody.collisionGroup = @<span class="string">"playerGroup"</span>;  </span><br><span class="line">projectile.physicsBody.collisionType  = @<span class="string">"projectileCollision"</span>;  </span><br><span class="line">[_physicsWorld addChild:projectile];</span><br></pre></td></tr></table></figure>
<p>编译运行，你应该会看到很多漂亮的粉红色的小方块。</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game10.png" alt=""></p>
<p>这些sprite周围的粉红色方块是被 _physics 的 debugDraw 属性创建的。在你首次搭建物理世界的时候他们是很有用的，你可以通过他们确认一切工作是否如你所愿的进行着。注意到在手里剑周围的方块不是很和谐；如果用圆形的话应该更合适一些。</p>
<p>当然有这么个方法bodyWithCircleOfRadius:可以用于创建更时候你的抛掷物的圆形物理主体。将抛掷物物理主体的配置代码替换为如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">projectile.physicsBody = [CCPhysicsBody bodyWithCircleOfRadius:projectile.contentSize.width/<span class="number">2.0f</span> 	andCenter:projectile.anchorPointInPoints];</span><br></pre></td></tr></table></figure>
<p>默认中心点会被设置在sprite的左下方，然而你想把圆形放置在你的sprite的中心处。</p>
<p>好的，你现在已经把你的游戏对象改成物理模拟器的一部分了。现在你一定想要在 projectileCollision 和monsterCollison collisionType 交流的时候做一些事情。</p>
<p>Cocos2D物理引擎有很多很好的方法去完成这个目的。只需要在 HelloWorldScene.m中添加如下方法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)ccPhysicsCollisionBegin:(CCPhysicsCollisionPair *)pair monsterCollision:(CCNode *)monster projectileCollision:(CCNode *)projectile &#123;  </span><br><span class="line">    [monster removeFromParent];  </span><br><span class="line">    [projectile removeFromParent];  </span><br><span class="line">    <span class="keyword">return</span> YES;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码很强大。当物理模拟器被搭建完成之后，物理引擎会去查找CCPhysicsCollisionDelegate 方法，如果找到了就会触发它。参数名设置成你想要配置成的collisionType。</p>
<p>用这个方法你把 ‘projectile’ 和 ‘monster’彻底从模拟器和场景中移除了。你当然可以添加一个计分器，添加一个特殊效果或者其它你想在抛掷物与怪物碰撞时发生的事情。</p>
<p>编译运行，你最后应该可以毁灭这些怪物了。忍者，前进，开火！</p>
<h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3><p>你现在已经离完成一个简单游戏非常近了。但是 (Pew-Pew!), 添加一些音乐对于现在来说再好不过了。</p>
<p>Cocos2D 用OpenAL声音类库提供声音支持。不需要添加任何的额外头文件，都为你准备好了。</p>
<p>历史课程: 对于那些使用Cocos2D之前版本的用户也许会疑惑SimpleAudioEngine怎么了, 这个声音类库已经被Open AL取代了。</p>
<p>播放一个SFX非常简单, 是时候在忍者每次发镖的时候添加一个SFX了。这个声音可能不能100%完美表现出忍者投掷手里剑的声音。:-)</p>
<p>在创建抛掷物的 touchBegan: 方法的最后添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[OALSimpleAudio sharedInstance] playEffect:@<span class="string">"pew-pew-lei.caf"</span>];</span><br></pre></td></tr></table></figure>
<p>是时候添加一些热血的音乐了，在 init 方法的 userInteractionEnabled 之后添加如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[OALSimpleAudio sharedInstance] playBg:@<span class="string">"background-music-aac.caf"</span> loop:YES];</span><br></pre></td></tr></table></figure>
<p>最后一步，注释掉 init 方法中的调试语句：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_physicsWorld.debugDraw = YES;</span><br></pre></td></tr></table></figure>
<p>编译运行, pew-pew. 你现在有声音了，简单不？</p>
<p><img src="http://7xir36.com1.z0.glb.clouddn.com/cocos2d-game11.png" alt=""></p>
<h3 id="搞完了去哪"><a href="#搞完了去哪" class="headerlink" title="搞完了去哪?"></a>搞完了去哪?</h3><p>完工了!  Cocos2D 3.0 game 这里有你目前编写的完整的代码。</p>
<p>你已经在学习 Cocos2D 3.0 的道路上走了一大段路了,向你介绍了一些Cocos2D的核心内容。伟大始于渺小，所以你为什么不通过找个项目再做一些更加深入的研究呢？</p>
<p>看一下 IntroScene 的代码你将会学到如何创建一个label。为何不加一个记录干掉怪物数量的计数器呢？</p>
<p>当忍者碰到怪物的时候会发生什么呢？</p>
<p>想要尝试一些更高大上的动画的话，在Xcode里面打开 Help\Documentation and API References 然后搜索 CCAction ，你会看到所有的你可以添加到你的游戏角色对象上的动画列表。</p>
<p>我从来没有见过不会转的手里剑，为啥不尝试给它加一点旋转（我确定在这个教程开始的时候我们看到过一个现成的例子）提示：你可以对一个node多次使用 runAction 。 这些action没必要放在一个序列中。</p>
<p>如果你想要学到更多关于Cocos2D的知识，official Cocos2D forum 是一个询问问题和学习经验的好地方。我的用户名是 @cocojoe ，随时都可以过来跟我交流。</p>
<p>如果你对这篇教程有任何疑问或者建议请一起讨论！</p>
<p><a href="http://www.raywenderlich.com/61391/how-to-make-a-simple-iphone-game-with-cocos2d-3-0-tutorial" target="_blank" rel="noopener">英文原文链接</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[NSNull 找不到指定方法解决方案]]></title>
      <url>/2014/07/14/NSNull%E6%89%A9%E5%B1%95/</url>
      <content type="html"><![CDATA[<h3 id="近期遇到一个问题："><a href="#近期遇到一个问题：" class="headerlink" title="近期遇到一个问题："></a>近期遇到一个问题：</h3><blockquote>
<p>由于后台人员对于接口数据没有做空值处理，导致客户端接收到的有些数据为空（NSNull），而针对此类数据恰好客户端的存储结构为int和float类型，类型转换时报出了[NSNull intValue]或者[NSNull floatValue] unrecognized selector sent to instance 的错误。</p>
</blockquote>
<h3 id="解决此问题尝试了以下思路："><a href="#解决此问题尝试了以下思路：" class="headerlink" title="解决此问题尝试了以下思路："></a>解决此问题尝试了以下思路：</h3><blockquote>
<p>1 添加returnObject == [NSNull null] 判断，NSNull的元素配置一个目标类型的初始值。<br>问题解决了，但这样做的话对于应用需要修改的地方较多，想想比较烦。</p>
<p>2 想到此问题的引起原因是NSNull缺失这两种方法，也就是说只要为NSNull扩展补充缺失的方法就不会有问题了。</p>
</blockquote>
<h3 id="扩展NSNull代码如下："><a href="#扩展NSNull代码如下：" class="headerlink" title="扩展NSNull代码如下："></a>扩展NSNull代码如下：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"NSNull+NullCast.h"</span> </span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">float</span>)floatValue &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)intValue &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在可能出现类似问题的类中引入NSNull+NullCast这个类问题就解决了，无需修改逻辑代码。</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[“简密”App Store处女作]]></title>
      <url>/2014/05/22/%E7%AE%80%E5%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天是我的iOS App Store上架应用处女作“简密”第一天上线的日子，简密是我从事iOS开发三年以来的第一款个人上架应用，之前做过两年的企业级应用开发以及公司的电商应用开发，有不少应用上架的经验，但要是论完全从头到尾，设计、制图、开发、测试、文案、广告以及部署上架完全由自己一人完成，“简密”确实是我的处女作。不论上架之后销售效果如何，这次开发的过程帮我重新梳理了一遍iOS App Store应用开发上架的整个流程，这点是我觉得做这件事意义最大的地方，当然如果有那么点微薄收入的话，我会更加欣慰的^_^。</p>
<h3 id="回顾一下APP创作的过程，有这么几块感觉需要梳理总结："><a href="#回顾一下APP创作的过程，有这么几块感觉需要梳理总结：" class="headerlink" title="回顾一下APP创作的过程，有这么几块感觉需要梳理总结："></a>回顾一下APP创作的过程，有这么几块感觉需要梳理总结：</h3><h3 id="APP原始矛盾的发掘"><a href="#APP原始矛盾的发掘" class="headerlink" title="APP原始矛盾的发掘"></a>APP原始矛盾的发掘</h3><p>说白了就是应用要解决什么问题，能用来做些什么。这点很重要，“简密”这点做的不是特别好，因为当时做这款应用其实多半是想把平时工作学习中用到见到过的个人感觉比较好的体验效果做一个集合展示，由于最近做过二维码与加密解密模块的研究开发，所以就草率的选定了带加密功能的二维码这个核心需求。但现在回想过来这样做其实是有点本末倒置了，还是应该从用户的角度出发，从问题出发，然后再组织解决用户问题的功能实现、模块组合。</p>
<h4 id="拿“简密”来说的话，需求经过后期整理文案如下："><a href="#拿“简密”来说的话，需求经过后期整理文案如下：" class="headerlink" title="拿“简密”来说的话，需求经过后期整理文案如下："></a>拿“简密”来说的话，需求经过后期整理文案如下：</h4><blockquote>
<p>简密：秘密的创造原来可以如此简单</p>
<p>简密是一款文本转换生成加密二维码的实用工具。用户可以把自己的秘密生成加密的二维码在你的圈子中分享，你可以将二维码的密码告诉特定的朋友，只有知道密码的他们才能扫码揭开你的秘密，了解事情的真相。当然你也可以把简密当做一个普通的二维码扫码工具来使用。用户可以针对自己的需求创造很多有意思的玩法。</p>
</blockquote>
<h3 id="APP的界面原型设计"><a href="#APP的界面原型设计" class="headerlink" title="APP的界面原型设计"></a>APP的界面原型设计</h3><p>因为是自己独立开发找了一块白板把整个应用的界面直接画在了上面。感觉效果还是不错的，高效简洁，画的过程整个App的基本页面以及模块划分就逐渐清晰了，这时候不用太注重细节和页面效果创意，只需要理清楚有多少个页面和功能，它们之间的关联和跳转又是怎样的，通过这样的梳理，也就为开发奠定了一个基础的页面框架了。同时这时候可以确定一下App的整体风格，拿“简密”来说就是简约扁平风格，基础色调就是黑白。同时这部分感觉应该把广告的布局考虑进去，把广告对App造成的负影响尽量降到最低。</p>
<h3 id="APP的程序框架搭建"><a href="#APP的程序框架搭建" class="headerlink" title="APP的程序框架搭建"></a>APP的程序框架搭建</h3><p>这块没啥说的，有了需求和具体的界面布局，哪些需要自己开发，哪些可以借助第三方类库来辅助实现就比较清楚了，组织一下项目的文件结构，把需要的类库都引入完毕，然后就可以进行开发了。</p>
<h3 id="APP的原始需求的实现以及优化"><a href="#APP的原始需求的实现以及优化" class="headerlink" title="APP的原始需求的实现以及优化"></a>APP的原始需求的实现以及优化</h3><p>拿“简密”来说基础需求不复杂，很快就可以完成了，然后就是对它进行一些力所能及的雕琢。<br>比如这部分我把“帮我解密”模块的布局模仿了一把扁平化了的锁，点击加密的时候，有锁合上的动画效果，自我感觉效果还是不错的^_^。总之发挥想象给自己的App润色。</p>
<p>同时添加一些风格统一的图标，这里推荐下面这个网站，有很多不错的免费图片素材：</p>
<blockquote>
<p>easyicon:<a href="http://www.easyicon.net/" target="_blank" rel="noopener">http://www.easyicon.net/</a></p>
</blockquote>
<h3 id="APP全球市场的一些总结"><a href="#APP全球市场的一些总结" class="headerlink" title="APP全球市场的一些总结"></a>APP全球市场的一些总结</h3><p>首先就是APP文字的本地化，这点不用说用苹果官方的本地化方案就好了<br>NSLocalizedString。<br>也可以获取设备语言写一些针对不同语言的分支处理，具体判断方法如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];</span><br><span class="line">NSArray *languages = [defaults objectForKey:@<span class="string">"AppleLanguages"</span>];</span><br><span class="line">NSString *currentLang = [languages objectAtIndex:<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> currentLang;</span><br></pre></td></tr></table></figure>
<p>同时还有一个细节就是App的CFBundleDisplayName别忘了配置一下，这能让你的应用在不同地区的设备上显示特定的语言名称。</p>
<h3 id="开发证书购买"><a href="#开发证书购买" class="headerlink" title="开发证书购买"></a>开发证书购买</h3><p>应用基本完工前就可以开始购买证书了，流程没啥难点，就是最近苹果强制定了个人民币美元的汇率（多交40多吧），这点真是亮瞎了我的眼，苹果你这是在欺负中国人吗。。。</p>
<p>个人的证书很快，没有发送验证码激活的过程，就有一点需要注意下，就是如果你的apple id是用中文注册的，姓名也是中文名，由于注册开发者的时候需要用英文，因此在购买证书的时候，需要有一步要你打电话给苹果的客服确认下两个名字都是你，唉。。。ok,搞定之后就可以配置证书、app id以及描述文件了。。</p>
<h3 id="广告与其它第三方服务"><a href="#广告与其它第三方服务" class="headerlink" title="广告与其它第三方服务"></a>广告与其它第三方服务</h3><p>广告：其实这块现在也不知道怎样才是最好的选择，有经验的朋友还请多多指点，目前借鉴网上的说法，优先展现iAd,iAd加载不到才加载AdMob的广告，不过最近AdMob刚更新，真没底，大家也都比较担心更新之后的收益问题。</p>
<p>分享：分享起初集成了友盟的分享，后来发现iOS6之后自带的分享基本就能满足我的APP需求了，决定后期改成自带的分享控件。同时做一下本地化的分享列表展现处理，国内就不展现facebook和twitter了，万恶的The Great Fire Wall。</p>
<p>推送：直接引入了腾讯的信鸽，就省去了服务器记录deviceToken的开销，免费获得一个推送功能^_^。</p>
<h3 id="itunesconnect配置与元数据"><a href="#itunesconnect配置与元数据" class="headerlink" title="itunesconnect配置与元数据"></a>itunesconnect配置与元数据</h3><p>正规流程不多说没什么难点，该签的协议就签一下。就是上全球市场这个翻译文案真是令人头大。。。翻了3个小时就翻译了这么几行字：</p>
<blockquote>
<p>“Mystery”:The creation of mysteries is so simple.</p>
<p>“Mystery” is an app that can cast text to encrypted QR Code. We can share the mysterious QR Code generated by it to our timeline.We can send the password to the target friends.The truth can only be uncovered by the people who got the password.Certainly,we can also use it just like normal QR Code scanner.We can create a lot of interesting play for their own needs ^_^</p>
<p>Tip 1:Here we can secretly write down their predictions and share them.Time to uncover the truth,show our insights.</p>
<p>Tip 2:The life bothered with conflicts.Finger guessing is the original method of solving conflicts.However,there’s a fair problems(Hand Speed).Let’s encrypt the game result,and swap the QR Code each other.Finally,swap the password each other and decrypt the result.The winner is clear.</p>
<p>Tip 3:I want to private contact in some public virtual environments(such as Twitter). Just encrypt the message and exchange the password, it’s a piece of cake ^_^</p>
<p>Tip N:……</p>
<p>There are more interesting play waiting for you to explore.Let’s enrich it together.</p>
<p>One should always be a little improbable.—Oscar wilde.</p>
<p>Welcome to contact me ^_^</p>
<p>Email:cloudsthinker@qq.com</p>
<p>Sina Weibo:@AliThink</p>
</blockquote>
<p>然后就是做展示图，双语双尺寸一共20张图，又不想直接用截图，对于一个程序员来说要了命了。。。</p>
<p>还有一点注意的就是优化关键词，感觉这块是个学问，优化的好的话对应用的影响挺大，“简密”的关键词的话，搜“神秘感”第一个就是，“保持”第三个，“简密”竟然排到了第六位，还没研究透这块，后期再优化优化。</p>
<h3 id="上传审核上架"><a href="#上传审核上架" class="headerlink" title="上传审核上架"></a>上传审核上架</h3><p>这块的话，就是当你用Xcode传不上去的时候建议再用Application Loader试一下。</p>
<p>同时建议估算一下available date 估计成一个审核通过之后的日期。</p>
<p>最后，说一下近期的审核速度，给大家做个参考，最近审核速度感觉快多了，新应用上传waiting for review 4天，in review 1天多没一会就ready for sale了。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>“简密”虽然不知道最后上架的效果如何，但是感觉对自己知识的梳理效果还是挺好的，以后就正式进入个人开发者行列了，多总结与大家共同进步^_^</p>
<p>最后做个宣传把应用的下载链接发一下，有兴趣的朋友可以下载体验给评个分，有什么好的创意建议欢迎给我留言。</p>
<p>简密 - 保持一点神秘感</p>
<p>一个人应该永远保持一点神秘感 — 王尔德</p>
<blockquote>
<p><a href="https://itunes.apple.com/cn/app/jian-mi-bao-chi-yi-dian-shen/id879758988?mt=8" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/jian-mi-bao-chi-yi-dian-shen/id879758988?mt=8</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 个人作品 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
